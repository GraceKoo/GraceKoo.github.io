<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Grace Koo&#39;s Blog</title>
  
  <subtitle>LaLaLa~~~</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://unknown.yuzhouwan.com/"/>
  <updated>2020-07-03T03:13:40.691Z</updated>
  <id>https://unknown.yuzhouwan.com/</id>
  
  <author>
    <name>Grace Koo</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>LeetCode_&amp;_Algorithm</title>
    <link href="https://unknown.yuzhouwan.com/posts/55663/"/>
    <id>https://unknown.yuzhouwan.com/posts/55663/</id>
    <published>2020-02-05T12:00:00.000Z</published>
    <updated>2020-07-03T03:13:40.691Z</updated>
    
    <content type="html"><![CDATA[<h1 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h1><div class="table-container"><table><thead><tr><th style="text-align:left">题目类型</th><th style="text-align:left">题目</th></tr></thead><tbody><tr><td style="text-align:left"><a href="https://unknown.yuzhouwan.com/posts/55663/#Hash">Hash</a></td><td style="text-align:left"><a href="https://unknown.yuzhouwan.com/posts/55663/#twoSum">twoSum</a></td></tr><tr><td style="text-align:left"></td><td style="text-align:left"><a href="https://unknown.yuzhouwan.com/posts/55663/#valid-sudoku">valid-sudoku</a></td></tr><tr><td style="text-align:left"></td><td style="text-align:left"><a href="https://unknown.yuzhouwan.com/posts/55663/#first-missing-positive">first-missing-positive</a></td></tr><tr><td style="text-align:left"><a href="https://unknown.yuzhouwan.com/posts/55663/#LinkNode">LinkNode</a></td><td style="text-align:left"><a href="https://unknown.yuzhouwan.com/posts/55663/#add-two-numbers">add-two-numbers</a></td></tr><tr><td style="text-align:left"></td><td style="text-align:left"><a href="https://unknown.yuzhouwan.com/posts/55663/#merge-two-sorted-lists">merge-two-sorted-lists</a></td></tr><tr><td style="text-align:left"></td><td style="text-align:left"><a href="https://unknown.yuzhouwan.com/posts/55663/#swap-nodes-in-pairs">swap-nodes-in-pairs</a></td></tr><tr><td style="text-align:left"></td><td style="text-align:left"><a href="https://unknown.yuzhouwan.com/posts/55663/#reverse-nodes-in-k-group">reverse-nodes-in-k-group</a></td></tr><tr><td style="text-align:left"></td><td style="text-align:left"><a href="https://unknown.yuzhouwan.com/posts/55663/#rotate-list">rotate-list</a></td></tr><tr><td style="text-align:left"></td><td style="text-align:left"><a href="https://unknown.yuzhouwan.com/posts/55663/#remove-duplicates-from-sorted-list-ii">remove-duplicates-from-sorted-list-ii</a></td></tr><tr><td style="text-align:left"></td><td style="text-align:left"><a href="https://unknown.yuzhouwan.com/posts/55663/#remove-duplicates-from-sorted-list">remove-duplicates-from-sorted-list</a></td></tr><tr><td style="text-align:left"></td><td style="text-align:left"><a href="https://unknown.yuzhouwan.com/posts/55663/#partition-list">partition-list</a></td></tr><tr><td style="text-align:left"></td><td style="text-align:left"><a href="https://unknown.yuzhouwan.com/posts/55663/#reverse-linked-list-ii">reverse-linked-list-ii</a></td></tr></tbody></table></div><a id="more"></a><div class="table-container"><table><thead><tr><th style="text-align:left">题目类型</th><th style="text-align:left">题目</th></tr></thead><tbody><tr><td style="text-align:left"><a href="https://unknown.yuzhouwan.com/posts/55663/#Hash">Hash</a></td><td style="text-align:left"><a href="https://unknown.yuzhouwan.com/posts/55663/#twoSum">twoSum</a></td></tr><tr><td style="text-align:left"></td><td style="text-align:left"><a href="https://unknown.yuzhouwan.com/posts/55663/#valid-sudoku">valid-sudoku</a></td></tr><tr><td style="text-align:left"></td><td style="text-align:left"><a href="https://unknown.yuzhouwan.com/posts/55663/#first-missing-positive">first-missing-positive</a></td></tr><tr><td style="text-align:left"><a href="https://unknown.yuzhouwan.com/posts/55663/#LinkNode">LinkNode</a></td><td style="text-align:left"><a href="https://unknown.yuzhouwan.com/posts/55663/#add-two-numbers">add-two-numbers</a></td></tr><tr><td style="text-align:left"></td><td style="text-align:left"><a href="https://unknown.yuzhouwan.com/posts/55663/#merge-two-sorted-lists">merge-two-sorted-lists</a></td></tr><tr><td style="text-align:left"></td><td style="text-align:left"><a href="https://unknown.yuzhouwan.com/posts/55663/#swap-nodes-in-pairs">swap-nodes-in-pairs</a></td></tr><tr><td style="text-align:left"></td><td style="text-align:left"><a href="https://unknown.yuzhouwan.com/posts/55663/#reverse-nodes-in-k-group">reverse-nodes-in-k-group</a></td></tr><tr><td style="text-align:left"></td><td style="text-align:left"><a href="https://unknown.yuzhouwan.com/posts/55663/#rotate-list">rotate-list</a></td></tr><tr><td style="text-align:left"></td><td style="text-align:left"><a href="https://unknown.yuzhouwan.com/posts/55663/#remove-duplicates-from-sorted-list-ii">remove-duplicates-from-sorted-list-ii</a></td></tr><tr><td style="text-align:left"></td><td style="text-align:left"><a href="https://unknown.yuzhouwan.com/posts/55663/#remove-duplicates-from-sorted-list">remove-duplicates-from-sorted-list</a></td></tr><tr><td style="text-align:left"></td><td style="text-align:left"><a href="https://unknown.yuzhouwan.com/posts/55663/#partition-list">partition-list</a></td></tr><tr><td style="text-align:left"></td><td style="text-align:left"><a href="https://unknown.yuzhouwan.com/posts/55663/#reverse-linked-list-ii">reverse-linked-list-ii</a></td></tr><tr><td style="text-align:left"><a href="https://unknown.yuzhouwan.com/posts/55663/#BackTrack">BackTrack</a></td><td style="text-align:left"><a href="https://unknown.yuzhouwan.com/posts/55663/#find-median-sorted-array">find-median-sorted-array</a> — Recursion</td></tr><tr><td style="text-align:left"></td><td style="text-align:left"><a href="https://unknown.yuzhouwan.com/posts/55663/#sudoku-solver">sudoku-solver</a></td></tr><tr><td style="text-align:left"></td><td style="text-align:left"><a href="https://unknown.yuzhouwan.com/posts/55663/#combination-sum">combination-sum</a> — Recursion</td></tr><tr><td style="text-align:left"></td><td style="text-align:left"><a href="https://unknown.yuzhouwan.com/posts/55663/#permutations">permutations</a></td></tr><tr><td style="text-align:left"></td><td style="text-align:left"><a href="https://unknown.yuzhouwan.com/posts/55663/#permutations-ii">permutations-ii</a></td></tr><tr><td style="text-align:left"></td><td style="text-align:left"><a href="https://unknown.yuzhouwan.com/posts/55663/#powx-n">powx-n</a> — Recursion</td></tr><tr><td style="text-align:left"></td><td style="text-align:left"><a href="https://unknown.yuzhouwan.com/posts/55663/#n-queens">n-queens</a></td></tr><tr><td style="text-align:left"></td><td style="text-align:left"><a href="https://unknown.yuzhouwan.com/posts/55663/#n-queens-ii">n-queens-ii</a></td></tr><tr><td style="text-align:left"></td><td style="text-align:left"><a href="https://leetcode-cn.com/problems/combinations/" target="_blank" rel="noopener">combinations</a>— Recursion</td></tr><tr><td style="text-align:left"></td><td style="text-align:left"><a href="https://unknown.yuzhouwan.com/posts/55663/#subsets">subsets</a>— Recursion</td></tr><tr><td style="text-align:left"></td><td style="text-align:left"><a href="https://unknown.yuzhouwan.com/posts/55663/#subsets-ii">subsets-ii</a></td></tr><tr><td style="text-align:left"></td><td style="text-align:left"><a href="https://unknown.yuzhouwan.com/posts/55663/#word-search">word-search</a>— Recursion</td></tr><tr><td style="text-align:left"></td><td style="text-align:left"><a href="https://unknown.yuzhouwan.com/posts/55663/#gray-code">gray-code</a>— Recursion</td></tr><tr><td style="text-align:left"></td><td style="text-align:left"><a href="https://unknown.yuzhouwan.com/posts/55663/#restore-ip-addresses">restore-ip-addresses</a></td></tr><tr><td style="text-align:left"></td><td style="text-align:left"><a href="https://unknown.yuzhouwan.com/posts/55663/#scramble-string">scramble-string</a></td></tr><tr><td style="text-align:left"></td><td style="text-align:left"><a href="https://unknown.yuzhouwan.com/posts/55663/#different-ways-to-add-parentheses">different-ways-to-add-parentheses</a></td></tr><tr><td style="text-align:left"></td><td style="text-align:left"><a href="https://unknown.yuzhouwan.com/posts/55663/#letter-case-permutation">letter-case-permutation</a></td></tr><tr><td style="text-align:left"></td><td style="text-align:left"><a href="https://unknown.yuzhouwan.com/posts/55663/#palindrome-partitioning">palindrome-partitioning</a></td></tr><tr><td style="text-align:left"><a href="https://unknown.yuzhouwan.com/posts/55663/#2DMatric">2DMatric</a></td><td style="text-align:left"><a href="https://unknown.yuzhouwan.com/posts/55663/#longest-palindrome">longest-palindrome</a></td></tr><tr><td style="text-align:left"></td><td style="text-align:left"><a href="https://unknown.yuzhouwan.com/posts/55663/#rotate-image">rotate-image</a></td></tr><tr><td style="text-align:left"></td><td style="text-align:left"><a href="https://unknown.yuzhouwan.com/posts/55663/#spiral-matrix">spiral-matrix</a></td></tr><tr><td style="text-align:left"></td><td style="text-align:left"><a href="https://unknown.yuzhouwan.com/posts/55663/#spiral-matrix-ii">spiral-matrix-ii</a></td></tr><tr><td style="text-align:left"></td><td style="text-align:left"><a href="https://unknown.yuzhouwan.com/posts/55663/#set-matrix-zeroes">set-matrix-zeroes</a></td></tr><tr><td style="text-align:left"><a href="https://unknown.yuzhouwan.com/posts/55663/#Regular Expression">Regular Expression</a></td><td style="text-align:left"><a href="https://unknown.yuzhouwan.com/posts/55663/#string-to-integer-atoi">string-to-integer-atoi</a></td></tr><tr><td style="text-align:left"></td><td style="text-align:left"><a href="https://unknown.yuzhouwan.com/posts/55663/#regular-expression-matchin">regular-expression-matchin</a></td></tr><tr><td style="text-align:left"></td><td style="text-align:left"><a href="https://unknown.yuzhouwan.com/posts/55663/#valid-number">valid-number</a></td></tr><tr><td style="text-align:left"><a href="https://unknown.yuzhouwan.com/posts/55663/#Stack">Stack</a></td><td style="text-align:left"><a href="https://unknown.yuzhouwan.com/posts/55663/#valid-parentheses">valid-parentheses</a></td></tr><tr><td style="text-align:left"></td><td style="text-align:left"><a href="https://unknown.yuzhouwan.com/posts/55663/#largest-rectangle-in-histogram">largest-rectangle-in-histogram</a></td></tr><tr><td style="text-align:left"></td><td style="text-align:left"><a href="https://unknown.yuzhouwan.com/posts/55663/#maximal-rectangle">maximal-rectangle</a></td></tr><tr><td style="text-align:left"><a href="https://unknown.yuzhouwan.com/posts/55663/#BinaryTree">BinaryTree</a></td><td style="text-align:left"><a href="https://unknown.yuzhouwan.com/posts/55663/#generate-parentheses">generate-parentheses</a></td></tr><tr><td style="text-align:left"><a href="https://unknown.yuzhouwan.com/posts/55663/#Queue">Queue</a></td><td style="text-align:left"><a href="https://unknown.yuzhouwan.com/posts/55663/#merge-k-sorted-lists">merge-k-sorted-lists</a></td></tr><tr><td style="text-align:left"><a href="https://unknown.yuzhouwan.com/posts/55663/#Bit Operation">Bit Operation</a></td><td style="text-align:left"><a href="https://unknown.yuzhouwan.com/posts/55663/#divide-two-integers">divide-two-integers</a></td></tr><tr><td style="text-align:left"></td><td style="text-align:left"><a href="https://unknown.yuzhouwan.com/posts/55663/#gray-code">gray-code</a></td></tr><tr><td style="text-align:left"></td><td style="text-align:left"><a href="https://unknown.yuzhouwan.com/posts/55663/#convert-a-number-to-hexadecimal">convert-a-number-to-hexadecimal</a></td></tr><tr><td style="text-align:left"></td><td style="text-align:left"><a href="https://unknown.yuzhouwan.com/posts/55663/#binary-watch">binary-watch</a></td></tr><tr><td style="text-align:left"><a href="https://unknown.yuzhouwan.com/posts/55663/#Binary Search">Binary Search</a></td><td style="text-align:left"><a href="https://unknown.yuzhouwan.com/posts/55663/#find-first-and-last-position-of-element-in-sorted-array">find-first-and-last-position-of-element-in-sorted-array</a></td></tr><tr><td style="text-align:left"></td><td style="text-align:left"><a href="https://unknown.yuzhouwan.com/posts/55663/#sqrtx">sqrtx</a></td></tr><tr><td style="text-align:left"></td><td style="text-align:left"><a href="https://unknown.yuzhouwan.com/posts/55663/#search-a-2d-matrix">search-a-2d-matrix</a></td></tr><tr><td style="text-align:left"></td><td style="text-align:left"><a href="https://unknown.yuzhouwan.com/posts/55663/#search-in-rotated-sorted-array-ii">search-in-rotated-sorted-array</a></td></tr><tr><td style="text-align:left"><a href="https://unknown.yuzhouwan.com/posts/55663/#Double Pointer">Double Pointer</a></td><td style="text-align:left"><a href="https://unknown.yuzhouwan.com/posts/55663/#trapping-rain-water">trapping-rain-water</a></td></tr><tr><td style="text-align:left"></td><td style="text-align:left"><a href="https://unknown.yuzhouwan.com/posts/55663/#sort-colors">sort-colors</a></td></tr><tr><td style="text-align:left"></td><td style="text-align:left"><a href="https://unknown.yuzhouwan.com/posts/55663/#minimum-window-substring">minimum-window-substring</a></td></tr><tr><td style="text-align:left"></td><td style="text-align:left"><a href="https://unknown.yuzhouwan.com/posts/55663/#remove-duplicates-from-sorted-array-ii">remove-duplicates-from-sorted-array-ii</a></td></tr><tr><td style="text-align:left"></td><td style="text-align:left"><a href="https://unknown.yuzhouwan.com/posts/55663/#merge-sorted-array">merge-sorted-array</a></td></tr><tr><td style="text-align:left"><a href="https://unknown.yuzhouwan.com/posts/55663/#Dynamic Programming">Dynamic Programming</a></td><td style="text-align:left"><a href="https://unknown.yuzhouwan.com/posts/55663/#wildcard-matching">wildcard-matching</a></td></tr><tr><td style="text-align:left"></td><td style="text-align:left"><a href="https://unknown.yuzhouwan.com/posts/55663/#maximum-subarray">maximum-subarray</a></td></tr><tr><td style="text-align:left"></td><td style="text-align:left"><a href="https://unknown.yuzhouwan.com/posts/55663/#jump-game">jump-game</a></td></tr><tr><td style="text-align:left"></td><td style="text-align:left"><a href="https://unknown.yuzhouwan.com/posts/55663/#unique-paths">unique-paths</a></td></tr><tr><td style="text-align:left"></td><td style="text-align:left"><a href="https://unknown.yuzhouwan.com/posts/55663/#unique-paths-ii">unique-paths-ii</a></td></tr><tr><td style="text-align:left"></td><td style="text-align:left"><a href="https://unknown.yuzhouwan.com/posts/55663/#minimum-path-sum">minimum-path-sum</a></td></tr><tr><td style="text-align:left"></td><td style="text-align:left"><a href="https://unknown.yuzhouwan.com/posts/55663/#climbing-stairs">climbing-stairs</a></td></tr><tr><td style="text-align:left"></td><td style="text-align:left"><a href="https://unknown.yuzhouwan.com/posts/55663/#edit-distance">edit-distance</a></td></tr><tr><td style="text-align:left"></td><td style="text-align:left"><a href="https://unknown.yuzhouwan.com/posts/55663/#decode-ways">decode-ways</a></td></tr><tr><td style="text-align:left"></td><td style="text-align:left"><a href="https://unknown.yuzhouwan.com/posts/55663/#interleaving-string">interleaving-string</a></td></tr><tr><td style="text-align:left"></td><td style="text-align:left"><a href="https://unknown.yuzhouwan.com/posts/55663/#split-array-with-equal-sum">split-array-with-equal-sum</a></td></tr><tr><td style="text-align:left"><a href="https://unknown.yuzhouwan.com/posts/55663/#Greedy Algorithm">Greedy Algorithm</a></td><td style="text-align:left"><a href="https://unknown.yuzhouwan.com/posts/55663/#jump-game-ii">jump-game-ii</a></td></tr><tr><td style="text-align:left"></td><td style="text-align:left"><a href="https://unknown.yuzhouwan.com/posts/55663/#maximum-subarray">maximum-subarray</a></td></tr><tr><td style="text-align:left"></td><td style="text-align:left"><a href="https://unknown.yuzhouwan.com/posts/55663/#merge-intervals">merge-intervals</a></td></tr><tr><td style="text-align:left"></td><td style="text-align:left"><a href="https://unknown.yuzhouwan.com/posts/55663/#insert-interval">insert-interval</a></td></tr><tr><td style="text-align:left"></td><td style="text-align:left"><a href="https://unknown.yuzhouwan.com/posts/55663/#queue-reconstruction-by-height">queue-reconstruction-by-height</a></td></tr><tr><td style="text-align:left"><a href="https://unknown.yuzhouwan.com/posts/55663/#String">String</a></td><td style="text-align:left"><a href="https://unknown.yuzhouwan.com/posts/55663/#valid-number">valid-number</a></td></tr><tr><td style="text-align:left"></td><td style="text-align:left"><a href="https://unknown.yuzhouwan.com/posts/55663/#text-justification">text-justification</a></td></tr><tr><td style="text-align:left"></td><td style="text-align:left"><a href="https://unknown.yuzhouwan.com/posts/55663/#simplify-path">simplify-path</a></td></tr><tr><td style="text-align:left"><a href="https://unknown.yuzhouwan.com/posts/55663/#Tree">Tree</a></td><td style="text-align:left"><a href="https://unknown.yuzhouwan.com/posts/55663/#binary-tree-inorder-traversal">binary-tree-inorder-traversal</a></td></tr><tr><td style="text-align:left"></td><td style="text-align:left"><a href="https://unknown.yuzhouwan.com/posts/55663/#unique-binary-search-trees-ii">unique-binary-search-trees-ii</a></td></tr><tr><td style="text-align:left"></td><td style="text-align:left"><a href="https://unknown.yuzhouwan.com/posts/55663/#unique-binary-search-trees">unique-binary-search-trees</a></td></tr><tr><td style="text-align:left"></td><td style="text-align:left"><a href="https://unknown.yuzhouwan.com/posts/55663/#validate-binary-search-tree">validate-binary-search-tree</a></td></tr><tr><td style="text-align:left"></td><td style="text-align:left"><a href="https://unknown.yuzhouwan.com/posts/55663/#recover-binary-search-tree">recover-binary-search-tree</a></td></tr><tr><td style="text-align:left"></td><td style="text-align:left"><a href="https://unknown.yuzhouwan.com/posts/55663/#same-tree">same-tree</a></td></tr><tr><td style="text-align:left"><a href="https://unknown.yuzhouwan.com/posts/55663/#sort">sort</a></td><td style="text-align:left"><a href="https://unknown.yuzhouwan.com/posts/55663/#largest-number">largest-number</a></td></tr><tr><td style="text-align:left"></td><td style="text-align:left"><a href="https://unknown.yuzhouwan.com/posts/55663/#kth-largest-element-in-an-array">kth-largest-element-in-an-array</a></td></tr><tr><td style="text-align:left"></td><td style="text-align:left"><a href="https://unknown.yuzhouwan.com/posts/55663/#sort-an-array">sort-an-array</a></td></tr><tr><td style="text-align:left"></td><td style="text-align:left"><a href="https://unknown.yuzhouwan.com/posts/55663/#contains-duplicate-iii">contains-duplicate-iii</a> — bucket</td></tr></tbody></table></div><!--more--><h1 id="Hash"><a href="#Hash" class="headerlink" title="Hash"></a>Hash</h1><h2 id="twoSum"><a href="#twoSum" class="headerlink" title="twoSum"></a>twoSum</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time : 2019/9/106:55 下午</span></span><br><span class="line"><span class="comment"># @Author: GraceKoo</span></span><br><span class="line"><span class="comment"># @File:  1_twoSum.py</span></span><br><span class="line"><span class="comment"># @Desc: HashMap{num1:loc1,num2:loc2......}</span></span><br><span class="line"><span class="keyword">import</span> timeit</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">twoSum</span><span class="params">(self, nums, target)</span>:</span></span><br><span class="line">        hashmap = {}</span><br><span class="line">        <span class="keyword">for</span> loc, num <span class="keyword">in</span> enumerate(nums):</span><br><span class="line">            <span class="keyword">if</span> hashmap.get(target - num) <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                <span class="keyword">return</span> [hashmap.get(target - num), loc]</span><br><span class="line">            hashmap[num] = loc</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">nums = [<span class="number">2</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">5</span>]</span><br><span class="line">so = Solution()</span><br><span class="line">start = timeit.default_timer()</span><br><span class="line">print(so.twoSum(nums, <span class="number">8</span>))</span><br><span class="line">end = timeit.default_timer()</span><br><span class="line">print(str((end - start) * <span class="number">1000</span>), <span class="string">"s"</span>)  <span class="comment"># 0.052050003432668746 s</span></span><br></pre></td></tr></tbody></table></figure><h2 id="valid-sudoku"><a href="#valid-sudoku" class="headerlink" title="valid-sudoku"></a>valid-sudoku</h2><p>解题思路：</p><ul><li>行中没有重复的数字。</li><li>列中没有重复的数字。</li><li><code>3 x 3</code> 子数独内没有重复的数字。<ul><li>可以使用 <code>box_index = (row // 3) * 3 + columns // 3</code>作为子数独的索引号</li></ul></li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time: 2020/2/3 11:18 下午</span></span><br><span class="line"><span class="comment"># @Author: GraceKoo</span></span><br><span class="line"><span class="comment"># @File: 36_valid-sudoku.py</span></span><br><span class="line"><span class="comment"># @Desc:https://leetcode-cn.com/problems/valid-sudoku/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isValidSudoku</span><span class="params">(self, board)</span> -&gt; bool:</span></span><br><span class="line">        rows = [{} <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">9</span>)]  <span class="comment"># rows记录每行的数据情况</span></span><br><span class="line">        columns = [{} <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">9</span>)]  <span class="comment"># rows记录每列的数据情况</span></span><br><span class="line">        boxes = [{} <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">9</span>)]  <span class="comment"># rows记录每个3*3子块的数据情况</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> row <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">9</span>):</span><br><span class="line">            <span class="keyword">for</span> column <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">9</span>):</span><br><span class="line">                number = board[row][column]</span><br><span class="line">                <span class="keyword">if</span> number != <span class="string">"."</span>:</span><br><span class="line">                    number = int(number)</span><br><span class="line">                    box_index = (row // <span class="number">3</span>) * <span class="number">3</span> + column // <span class="number">3</span>  <span class="comment"># 对应(0,1,2,3,4,5,6,7,8,9)个子单元</span></span><br><span class="line">                    rows[row][number] = rows[row].get(number, <span class="number">0</span>) + <span class="number">1</span></span><br><span class="line">                    columns[column][number] = columns[column].get(number, <span class="number">0</span>) + <span class="number">1</span></span><br><span class="line">                    boxes[box_index][number] = boxes[box_index].get(number, <span class="number">0</span>) + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> rows[row][number] &gt; <span class="number">1</span> <span class="keyword">or</span> columns[column][number] &gt; <span class="number">1</span> <span class="keyword">or</span> boxes[box_index][number] &gt; <span class="number">1</span>:</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">so = Solution()</span><br><span class="line">print(so.isValidSudoku([</span><br><span class="line">    [<span class="string">"8"</span>, <span class="string">"3"</span>, <span class="string">"."</span>, <span class="string">"."</span>, <span class="string">"7"</span>, <span class="string">"."</span>, <span class="string">"."</span>, <span class="string">"."</span>, <span class="string">"."</span>],</span><br><span class="line">    [<span class="string">"6"</span>, <span class="string">"."</span>, <span class="string">"."</span>, <span class="string">"1"</span>, <span class="string">"9"</span>, <span class="string">"5"</span>, <span class="string">"."</span>, <span class="string">"."</span>, <span class="string">"."</span>],</span><br><span class="line">    [<span class="string">"."</span>, <span class="string">"9"</span>, <span class="string">"8"</span>, <span class="string">"."</span>, <span class="string">"."</span>, <span class="string">"."</span>, <span class="string">"."</span>, <span class="string">"6"</span>, <span class="string">"."</span>],</span><br><span class="line">    [<span class="string">"8"</span>, <span class="string">"."</span>, <span class="string">"."</span>, <span class="string">"."</span>, <span class="string">"6"</span>, <span class="string">"."</span>, <span class="string">"."</span>, <span class="string">"."</span>, <span class="string">"3"</span>],</span><br><span class="line">    [<span class="string">"4"</span>, <span class="string">"."</span>, <span class="string">"."</span>, <span class="string">"8"</span>, <span class="string">"."</span>, <span class="string">"3"</span>, <span class="string">"."</span>, <span class="string">"."</span>, <span class="string">"1"</span>],</span><br><span class="line">    [<span class="string">"7"</span>, <span class="string">"."</span>, <span class="string">"."</span>, <span class="string">"."</span>, <span class="string">"2"</span>, <span class="string">"."</span>, <span class="string">"."</span>, <span class="string">"."</span>, <span class="string">"6"</span>],</span><br><span class="line">    [<span class="string">"."</span>, <span class="string">"6"</span>, <span class="string">"."</span>, <span class="string">"."</span>, <span class="string">"."</span>, <span class="string">"."</span>, <span class="string">"2"</span>, <span class="string">"8"</span>, <span class="string">"."</span>],</span><br><span class="line">    [<span class="string">"."</span>, <span class="string">"."</span>, <span class="string">"."</span>, <span class="string">"4"</span>, <span class="string">"1"</span>, <span class="string">"9"</span>, <span class="string">"."</span>, <span class="string">"."</span>, <span class="string">"5"</span>],</span><br><span class="line">    [<span class="string">"."</span>, <span class="string">"."</span>, <span class="string">"."</span>, <span class="string">"."</span>, <span class="string">"8"</span>, <span class="string">"."</span>, <span class="string">"."</span>, <span class="string">"7"</span>, <span class="string">"9"</span>]</span><br><span class="line">]))</span><br><span class="line">print(so.isValidSudoku([</span><br><span class="line">    [<span class="string">"5"</span>, <span class="string">"3"</span>, <span class="string">"."</span>, <span class="string">"."</span>, <span class="string">"7"</span>, <span class="string">"."</span>, <span class="string">"."</span>, <span class="string">"."</span>, <span class="string">"."</span>],</span><br><span class="line">    [<span class="string">"6"</span>, <span class="string">"."</span>, <span class="string">"."</span>, <span class="string">"1"</span>, <span class="string">"9"</span>, <span class="string">"5"</span>, <span class="string">"."</span>, <span class="string">"."</span>, <span class="string">"."</span>],</span><br><span class="line">    [<span class="string">"."</span>, <span class="string">"9"</span>, <span class="string">"8"</span>, <span class="string">"."</span>, <span class="string">"."</span>, <span class="string">"."</span>, <span class="string">"."</span>, <span class="string">"6"</span>, <span class="string">"."</span>],</span><br><span class="line">    [<span class="string">"8"</span>, <span class="string">"."</span>, <span class="string">"."</span>, <span class="string">"."</span>, <span class="string">"6"</span>, <span class="string">"."</span>, <span class="string">"."</span>, <span class="string">"."</span>, <span class="string">"3"</span>],</span><br><span class="line">    [<span class="string">"4"</span>, <span class="string">"."</span>, <span class="string">"."</span>, <span class="string">"8"</span>, <span class="string">"."</span>, <span class="string">"3"</span>, <span class="string">"."</span>, <span class="string">"."</span>, <span class="string">"1"</span>],</span><br><span class="line">    [<span class="string">"7"</span>, <span class="string">"."</span>, <span class="string">"."</span>, <span class="string">"."</span>, <span class="string">"2"</span>, <span class="string">"."</span>, <span class="string">"."</span>, <span class="string">"."</span>, <span class="string">"6"</span>],</span><br><span class="line">    [<span class="string">"."</span>, <span class="string">"6"</span>, <span class="string">"."</span>, <span class="string">"."</span>, <span class="string">"."</span>, <span class="string">"."</span>, <span class="string">"2"</span>, <span class="string">"8"</span>, <span class="string">"."</span>],</span><br><span class="line">    [<span class="string">"."</span>, <span class="string">"."</span>, <span class="string">"."</span>, <span class="string">"4"</span>, <span class="string">"1"</span>, <span class="string">"9"</span>, <span class="string">"."</span>, <span class="string">"."</span>, <span class="string">"5"</span>],</span><br><span class="line">    [<span class="string">"."</span>, <span class="string">"."</span>, <span class="string">"."</span>, <span class="string">"."</span>, <span class="string">"8"</span>, <span class="string">"."</span>, <span class="string">"."</span>, <span class="string">"7"</span>, <span class="string">"9"</span>]</span><br><span class="line">]</span><br><span class="line">))</span><br></pre></td></tr></tbody></table></figure><h2 id="first-missing-positive"><a href="#first-missing-positive" class="headerlink" title="first-missing-positive"></a>first-missing-positive</h2><p>解题思路：使用索引作为哈希键 以及 元素的符号作为哈希值 来实现是否存在的检测。</p><blockquote><p>例如，<code>nums[2]</code> 元素的负号意味着数字 <code>2</code> 出现在 <code>nums</code> 中。<code>nums[3]</code>元素的正号表示 <code>3</code> 没有出现在 <code>nums</code> 中。</p></blockquote><p>解题步骤：</p><ul><li>检查 1 是否存在于数组中。如果没有，则已经完成，1 即为答案。</li><li>如果 nums = [1]，答案即为 2 。</li><li>第一次遍历：将负数，零，和大于 n 的数替换为 1 。</li><li>第二次遍历：遍历数组。当读到数字 a 时，替换第 a 个元素的符号。注意重复元素：只能改变一次符号。由于没有下标 n ，使用下标 0 的元素保存是否存在数字 n。</li><li>第三次遍历：返回第一个正数元素的下标。</li><li>如果 nums[0] &gt; 0，则返回 n 。<br>如果之前的步骤中没有发现 nums 中有正数元素，则返回n + 1。</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time: 2020/2/11 8:36 下午</span></span><br><span class="line"><span class="comment"># @Author: GraceKoo</span></span><br><span class="line"><span class="comment"># @File: 41_first-missing-positive.py</span></span><br><span class="line"><span class="comment"># @Desc: https://leetcode-cn.com/problems/first-missing-positive/</span></span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> List</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">firstMissingPositive</span><span class="params">(self, nums: List[int])</span> -&gt; int:</span></span><br><span class="line">        len_nums = len(nums)</span><br><span class="line">        <span class="keyword">if</span> <span class="number">1</span> <span class="keyword">not</span> <span class="keyword">in</span> nums:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> len_nums == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">2</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 第一次遍历：将所有非法数字置为1</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len_nums):</span><br><span class="line">            <span class="keyword">if</span> nums[i] &lt;= <span class="number">0</span> <span class="keyword">or</span> nums[i] &gt;= len_nums:</span><br><span class="line">                nums[i] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 第二次遍历：更改对应位置的符号</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len_nums):</span><br><span class="line">            val = abs(nums[i])</span><br><span class="line">            nums[val] = -abs(nums[val])</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 第三次遍历：遍历数组符号</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, len_nums):</span><br><span class="line">            <span class="keyword">if</span> nums[i] &gt; <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">return</span> i</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 最后检查nums[0]</span></span><br><span class="line">        <span class="keyword">if</span> nums[<span class="number">0</span>] &gt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> len_nums</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> len_nums + <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">so = Solution()</span><br><span class="line">print(so.firstMissingPositive([<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">11</span>, <span class="number">12</span>]))</span><br></pre></td></tr></tbody></table></figure><h2 id="interview-28"><a href="#interview-28" class="headerlink" title="interview_28"></a>interview_28</h2><ol><li>Hash法：时间复杂度O(n)</li></ol><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time: 2020/6/28 19:45 </span></span><br><span class="line"><span class="comment"># @Author: GraceKoo</span></span><br><span class="line"><span class="comment"># @File: interview_28.py</span></span><br><span class="line"><span class="comment"># @Desc: https://leetcode-cn.com/problems/</span></span><br><span class="line"><span class="comment"># shu-zu-zhong-chu-xian-ci-shu-chao-guo-yi-ban-de-shu-zi-lcof/</span></span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> List</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">majorityElement</span><span class="params">(self, nums: List[int])</span> -&gt; int:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> nums:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        count_dict = dict()</span><br><span class="line">        len_nums = len(nums)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len_nums):</span><br><span class="line">            count_dict[nums[i]] = count_dict.setdefault(nums[i], <span class="number">0</span>) + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        result_count = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> key <span class="keyword">in</span> count_dict.keys():</span><br><span class="line">            <span class="keyword">if</span> count_dict[key] &gt; result_count:</span><br><span class="line">                result_count, result_key = count_dict[key], key</span><br><span class="line">        <span class="keyword">if</span> result_count &gt;= (len_nums // <span class="number">2</span>):</span><br><span class="line">            <span class="keyword">return</span> result_key</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">so = Solution()</span><br><span class="line">print(so.majorityElement([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">2</span>]))</span><br></pre></td></tr></tbody></table></figure><ol><li>摩尔投票法</li></ol><p><a href="https://leetcode-cn.com/problems/shu-zu-zhong-chu-xian-ci-shu-chao-guo-yi-ban-de-shu-zi-lcof/solution/mian-shi-ti-39-shu-zu-zhong-chu-xian-ci-shu-chao-3/" target="_blank" rel="noopener">解题思路</a></p><p><img data-src="/images/algorithm/interview_28.png" alt="vote"></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time: 2020/6/28 19:45 </span></span><br><span class="line"><span class="comment"># @Author: GraceKoo</span></span><br><span class="line"><span class="comment"># @File: interview_38.py</span></span><br><span class="line"><span class="comment"># @Desc: https://leetcode-cn.com/problems/</span></span><br><span class="line"><span class="comment"># shu-zu-zhong-chu-xian-ci-shu-chao-guo-yi-ban-de-shu-zi-lcof/</span></span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> List</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">majorityElement</span><span class="params">(self, nums: List[int])</span> -&gt; int:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> nums:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        votes = <span class="number">0</span></span><br><span class="line">        count = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> num <span class="keyword">in</span> nums:</span><br><span class="line">            <span class="keyword">if</span> votes == <span class="number">0</span>:</span><br><span class="line">                x = num</span><br><span class="line">            votes += <span class="number">1</span> <span class="keyword">if</span> num == x <span class="keyword">else</span> <span class="number">-1</span></span><br><span class="line">        <span class="comment"># &nbsp;验证x是否为众数</span></span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> nums:</span><br><span class="line">            <span class="keyword">if</span> _ == x:</span><br><span class="line">                count += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> x <span class="keyword">if</span> count &gt; len(nums) // <span class="number">2</span> <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">so = Solution()</span><br><span class="line">print(so.majorityElement([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">2</span>]))</span><br></pre></td></tr></tbody></table></figure><h1 id="LinkNode"><a href="#LinkNode" class="headerlink" title="LinkNode"></a>LinkNode</h1><h2 id="add-two-numbers"><a href="#add-two-numbers" class="headerlink" title="add_two_numbers"></a>add_two_numbers</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time : 2019/9/1111:11 下午</span></span><br><span class="line"><span class="comment"># @Author: GraceKoo</span></span><br><span class="line"><span class="comment"># @File:  2_add_two_numbers.py</span></span><br><span class="line"><span class="comment"># @Desc:</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListNode</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        self.val = x</span><br><span class="line">        self.next = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">addTwoNumbers</span><span class="params">(self, l1: ListNode, l2: ListNode)</span> -&gt; ListNode:</span></span><br><span class="line">        <span class="keyword">if</span> l1 <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">and</span> l2 <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        <span class="keyword">elif</span> l1 <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> l2</span><br><span class="line">        <span class="keyword">elif</span> l2 <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> l1</span><br><span class="line">        flag = <span class="number">0</span></span><br><span class="line">        tmp = ListNode(<span class="number">0</span>)</span><br><span class="line">        res = tmp</span><br><span class="line">        <span class="keyword">while</span> l1 <span class="keyword">or</span> l2:</span><br><span class="line">            tmp_sum = <span class="number">0</span></span><br><span class="line">            <span class="keyword">if</span> l1:</span><br><span class="line">                tmp_sum += l1.val</span><br><span class="line">                l1 = l1.next</span><br><span class="line">            <span class="keyword">if</span> l2:</span><br><span class="line">                tmp_sum += l2.val</span><br><span class="line">                l2 = l2.next</span><br><span class="line">            flag = (tmp_sum + flag) // <span class="number">10</span></span><br><span class="line">            tmp_sum = (tmp_sum + flag) % <span class="number">10</span></span><br><span class="line">            res.next = ListNode(tmp_sum)</span><br><span class="line">            res = res.next</span><br><span class="line">        <span class="keyword">if</span> flag:</span><br><span class="line">            res.mext = ListNode(<span class="number">1</span>)</span><br><span class="line">        res = tmp.next</span><br><span class="line">        <span class="keyword">del</span> tmp</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></tbody></table></figure><h2 id="merge-two-sorted-lists"><a href="#merge-two-sorted-lists" class="headerlink" title="merge-two-sorted-lists"></a>merge-two-sorted-lists</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time: 2020/1/1 9:04 下午</span></span><br><span class="line"><span class="comment"># @Author: GraceKoo</span></span><br><span class="line"><span class="comment"># @File: 21_merge-two-sorted-lists.py</span></span><br><span class="line"><span class="comment"># @Desc: https://leetcode-cn.com/problems/merge-two-sorted-lists/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListNode</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        self.val = x</span><br><span class="line">        self.next = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mergeTwoLists</span><span class="params">(self, l1: ListNode, l2: ListNode)</span> -&gt; ListNode:</span></span><br><span class="line">        head_pre = ListNode(<span class="number">-1</span>)</span><br><span class="line">        pre = head_pre</span><br><span class="line">        <span class="keyword">while</span> l1 <span class="keyword">or</span> l2:</span><br><span class="line">            <span class="keyword">if</span> l1.value &lt; l2.value:</span><br><span class="line">                pre.next = l1</span><br><span class="line">                l1 = l1.next</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                pre.next = l2</span><br><span class="line">                l2 = l2.next</span><br><span class="line">            <span class="comment"># pre指向当前计算节点的上一个节点，运算结束后需指向下一个</span></span><br><span class="line">            pre = pre.next</span><br><span class="line">        pre.next = l1 <span class="keyword">if</span> l1 <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">else</span> l2</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> head_pre.next</span><br></pre></td></tr></tbody></table></figure><h2 id="swap-nodes-in-pairs"><a href="#swap-nodes-in-pairs" class="headerlink" title="swap-nodes-in-pairs"></a>swap-nodes-in-pairs</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time: 2020/1/6 5:15 下午</span></span><br><span class="line"><span class="comment"># @Author: GraceKoo</span></span><br><span class="line"><span class="comment"># @File: 24_swap-nodes-in-pairs.py</span></span><br><span class="line"><span class="comment"># @Desc:https://leetcode-cn.com/problems/swap-nodes-in-pairs/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListNode</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        self.val = x</span><br><span class="line">        self.next = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">swapPairs</span><span class="params">(self, head: ListNode)</span> -&gt; ListNode:</span></span><br><span class="line">        head_pre = ListNode(<span class="number">-1</span>)</span><br><span class="line">        head_pre.next = head</span><br><span class="line">        tmp = head_pre</span><br><span class="line">        <span class="keyword">while</span> tmp.next <span class="keyword">and</span> tmp.next.next:</span><br><span class="line">            a, b = tmp.next, tmp.next.next</span><br><span class="line">            tmp.next, a.next = b, b.next</span><br><span class="line">            b.next = a</span><br><span class="line">            tmp = tmp.next.next</span><br><span class="line">        <span class="keyword">return</span> head_pre.next</span><br></pre></td></tr></tbody></table></figure><h2 id="reverse-nodes-in-k-group"><a href="#reverse-nodes-in-k-group" class="headerlink" title="reverse-nodes-in-k-group"></a>reverse-nodes-in-k-group</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time: 2020/1/8 10:03 下午</span></span><br><span class="line"><span class="comment"># @Author: GraceKoo</span></span><br><span class="line"><span class="comment"># @File: 25_reverse-nodes-in-k-group.py</span></span><br><span class="line"><span class="comment"># @Desc:https://leetcode-cn.com/problems/reverse-nodes-in-k-group/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListNode</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        self.val = x</span><br><span class="line">        self.next = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reverseKGroup</span><span class="params">(self, head: ListNode, k: int)</span> -&gt; ListNode:</span></span><br><span class="line">        tmp_head = ListNode(<span class="number">0</span>)</span><br><span class="line">        tmp_head.next = head</span><br><span class="line">        pre = tail = tmp_head</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            count = k</span><br><span class="line">            <span class="comment"># 将tail移动k个节点</span></span><br><span class="line">            <span class="keyword">while</span> count <span class="keyword">and</span> tail:</span><br><span class="line">                count -= <span class="number">1</span></span><br><span class="line">                tail = tail.next</span><br><span class="line">            <span class="comment"># 如果tail为空，则当前的这组节点数量小于k个，跳出，不进行反转</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> tail:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="comment"># 否则反转这k个节点</span></span><br><span class="line">            head = pre.next  <span class="comment"># head 用于记录当前这组翻转节点的第一个节点</span></span><br><span class="line">            <span class="keyword">while</span> pre.next != tail:</span><br><span class="line">                current_node = pre.next  <span class="comment"># current_node 指向当前正在准备移动的节点</span></span><br><span class="line">                pre.next = current_node.next</span><br><span class="line">                current_node.next = tail.next</span><br><span class="line">                tail.next = current_node</span><br><span class="line">                pre = pre.next</span><br><span class="line">            pre, tail = head  <span class="comment"># 指向上组移动的第一个节点</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> tmp_head.next</span><br></pre></td></tr></tbody></table></figure><h2 id="rotate-list"><a href="#rotate-list" class="headerlink" title="rotate-list"></a>rotate-list</h2><p>解题思路：</p><ol><li>先需旋转链表，假设旋转的步长k=2，首先循环链表得到链表的长度length_of_nodes</li></ol><pre class="mermaid">graph LRid2((1)) --&gt; id3((2))id3((2)) --&gt; id4((3))id4((3)) --&gt; id5((4))id5((4)) --&gt; id6((5))id6((5)) --&gt; id7((6))</pre><ol><li><p>得到倒数第二个节点的索引为length_of_nodes - k，即为新的头节点</p><p>新的尾节点的索引为length_of_nodes - k - 1</p><p>如果k&gt;n：</p><p>那么新的头节点的索引为length_of_nodes - k % length_of_nodes</p><p>新的尾节点的索引为length_of_nodes - k % length_of_nodes - 1</p></li></ol><pre class="mermaid">graph LRid2((1)) --&gt; id3((2))id3((2)) --&gt; id4((3))id4((3)) --&gt; id5((4))id5((4)) -.end.-&gt; id6((5))id6((5)) --&gt; id7((6))id7((6)) --&gt; id2((1))</pre><ol><li>串联成新的链表</li></ol><pre class="mermaid">graph LRid2((1)) --&gt; id3((2))id3((2)) --&gt; id4((3))id4((3)) --&gt; id5((4))id6((5)) --&gt; id7((6))id7((6)) --&gt; id2((1))</pre><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time: 2020/3/4 11:55</span></span><br><span class="line"><span class="comment"># @Author: GraceKoo</span></span><br><span class="line"><span class="comment"># @File: 61_rotate-list.py</span></span><br><span class="line"><span class="comment"># @Desc:https://leetcode-cn.com/problems/rotate-list/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListNode</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        self.val = x</span><br><span class="line">        self.next = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">rotateRight</span><span class="params">(self, head: ListNode, k: int)</span> -&gt; ListNode:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> head <span class="keyword">or</span> head.next:</span><br><span class="line">            <span class="keyword">return</span> head</span><br><span class="line">        length_of_nodes = <span class="number">1</span></span><br><span class="line">        old_tail = head</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 1.compute the length of nodes</span></span><br><span class="line">        <span class="keyword">while</span> old_tail.next:</span><br><span class="line">            length_of_nodes += <span class="number">1</span></span><br><span class="line">            old_tail = old_tail.next</span><br><span class="line">        old_tail.next = head</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 2.find the length_of_nodes - k % length_of_nodes -1 node,which is the last node</span></span><br><span class="line">        new_tail = head</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(length_of_nodes - k % length_of_nodes - <span class="number">1</span>):</span><br><span class="line">            new_tail = new_tail.next</span><br><span class="line">        new_head = new_tail.next</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> new_head</span><br></pre></td></tr></tbody></table></figure><h2 id="remove-duplicates-from-sorted-list-ii"><a href="#remove-duplicates-from-sorted-list-ii" class="headerlink" title="remove-duplicates-from-sorted-list-ii"></a>remove-duplicates-from-sorted-list-ii</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time: 2020/3/26 19:29 </span></span><br><span class="line"><span class="comment"># @Author: GraceKoo</span></span><br><span class="line"><span class="comment"># @File: 82_remove-duplicates-from-sorted-list-ii.py</span></span><br><span class="line"><span class="comment"># @Desc:https://leetcode-cn.com/problems/remove-duplicates-from-sorted-list-ii/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListNode</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        self.val = x</span><br><span class="line">        self.next = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">deleteDuplicates</span><span class="params">(self, head: ListNode)</span> -&gt; ListNode:</span></span><br><span class="line">        tmp_head = ListNode(<span class="string">"head"</span>)</span><br><span class="line">        tmp_head.next = head</span><br><span class="line">        pre, cur = <span class="literal">None</span>, tmp_head</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> cur:</span><br><span class="line">            pre = cur  <span class="comment"># pre指向不重复的节点， cur指向当前节点</span></span><br><span class="line">            cur = cur.next  <span class="comment"># cur指向pre的下一个节点</span></span><br><span class="line">            <span class="keyword">while</span> cur <span class="keyword">and</span> cur.next <span class="keyword">and</span> cur.next.val == cur.val:</span><br><span class="line">                value = cur.val</span><br><span class="line">                <span class="comment"># 找到不重复的节点</span></span><br><span class="line">                <span class="keyword">while</span> cur <span class="keyword">and</span> cur.val == value:</span><br><span class="line">                    cur = cur.next</span><br><span class="line">            pre.next = cur</span><br><span class="line">        <span class="keyword">return</span> tmp_head.next</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">first_node = ListNode(<span class="number">0</span>)</span><br><span class="line">first_node.next = ListNode(<span class="number">2</span>)</span><br><span class="line">first_node.next.next = ListNode(<span class="number">2</span>)</span><br><span class="line">print(first_node.val, first_node.next.val, first_node.next.next.val)</span><br><span class="line"></span><br><span class="line">so = Solution()</span><br><span class="line">last_node = so.deleteDuplicates(first_node)</span><br><span class="line"><span class="keyword">while</span> last_node:</span><br><span class="line">    print(last_node.val)</span><br><span class="line">    last_node = last_node.next</span><br></pre></td></tr></tbody></table></figure><h2 id="remove-duplicates-from-sorted-list"><a href="#remove-duplicates-from-sorted-list" class="headerlink" title="remove-duplicates-from-sorted-list"></a>remove-duplicates-from-sorted-list</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time: 2020/3/26 23:28 </span></span><br><span class="line"><span class="comment"># @Author: GraceKoo</span></span><br><span class="line"><span class="comment"># @File: 83_remove-duplicates-from-sorted-list.py</span></span><br><span class="line"><span class="comment"># @Desc:https://leetcode-cn.com/problems/remove-duplicates-from-sorted-list/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListNode</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        self.val = x</span><br><span class="line">        self.next = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">deleteDuplicates</span><span class="params">(self, head: ListNode)</span> -&gt; ListNode:</span></span><br><span class="line">        tmp = head</span><br><span class="line">        <span class="keyword">while</span> tmp <span class="keyword">and</span> tmp.next:</span><br><span class="line">            <span class="keyword">if</span> tmp.val == tmp.next.val:</span><br><span class="line">                tmp.next = tmp.next.next</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                tmp = tmp.next</span><br><span class="line">        <span class="keyword">return</span> head</span><br><span class="line"></span><br><span class="line">first_node = ListNode(<span class="number">0</span>)</span><br><span class="line">first_node.next = ListNode(<span class="number">2</span>)</span><br><span class="line">first_node.next.next = ListNode(<span class="number">2</span>)</span><br><span class="line">print(first_node.val, first_node.next.val, first_node.next.next.val)</span><br><span class="line">so = Solution()</span><br><span class="line">last_node = so.deleteDuplicates(first_node)</span><br><span class="line"><span class="keyword">while</span> last_node:</span><br><span class="line">    print(last_node.val)</span><br><span class="line">    last_node = last_node.next</span><br></pre></td></tr></tbody></table></figure><h2 id="partition-list"><a href="#partition-list" class="headerlink" title="partition-list"></a>partition-list</h2><p>解题思路：</p><ol><li><p>before，after分别指向链表中值小于x的节点</p></li><li><p>创建before，after的哑节点：before_node、after_node</p></li><li><p>遍历链表，最后进行合并</p></li></ol><blockquote><p>after.next = None<br>before.next = after_node.next</p></blockquote><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">partition</span><span class="params">(self, head: ListNode, x: int)</span> -&gt; ListNode:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> head:</span><br><span class="line">            <span class="keyword">return</span> head</span><br><span class="line">        <span class="comment"># before_node、after_node是哑节点</span></span><br><span class="line">        before = before_node = ListNode(<span class="number">0</span>)</span><br><span class="line">        after = after_node = ListNode(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">while</span> head:</span><br><span class="line">            <span class="keyword">if</span> head.val &gt; x:</span><br><span class="line">                after.next = head</span><br><span class="line">                after = after.next</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                before.next = head</span><br><span class="line">                before = before.next</span><br><span class="line">            head = head.next</span><br><span class="line">        after.next = <span class="literal">None</span></span><br><span class="line">        before.next = after_node.next</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> before_node.next</span><br></pre></td></tr></tbody></table></figure><h2 id="reverse-linked-list-ii"><a href="#reverse-linked-list-ii" class="headerlink" title="reverse-linked-list-ii"></a>reverse-linked-list-ii</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time: 2020/4/6 00:06 </span></span><br><span class="line"><span class="comment"># @Author: GraceKoo</span></span><br><span class="line"><span class="comment"># @File: 92_reverse-linked-list-ii.py</span></span><br><span class="line"><span class="comment"># @Desc: https://leetcode-cn.com/problems/reverse-linked-list-ii/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListNode</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        self.val = x</span><br><span class="line">        self.next = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reverseBetween</span><span class="params">(self, head, m, n)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type head: ListNode</span></span><br><span class="line"><span class="string">        :type m: int</span></span><br><span class="line"><span class="string">        :type n: int</span></span><br><span class="line"><span class="string">        :rtype: ListNode</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> m == n:</span><br><span class="line">            <span class="keyword">return</span> head</span><br><span class="line">        dummy = ListNode(<span class="number">-1</span>)</span><br><span class="line">        dummy.next = head</span><br><span class="line">        a, d = dummy, dummy</span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> range(m - <span class="number">1</span>):</span><br><span class="line">            a = a.next</span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> range(n):</span><br><span class="line">            d = d.next</span><br><span class="line">        b, c = a.next, d.next</span><br><span class="line">        <span class="comment"># pre, cur, next用于遍历子链表</span></span><br><span class="line">        pre = b</span><br><span class="line">        cur = pre.next</span><br><span class="line">        <span class="keyword">while</span> cur != c:</span><br><span class="line">            cur.next, pre, cur = pre, cur, cur.next</span><br><span class="line">            <span class="comment"># 以上写法等价于</span></span><br><span class="line">            <span class="comment"># next = cur.next</span></span><br><span class="line">            <span class="comment"># cur.next = pre</span></span><br><span class="line">            <span class="comment"># pre = cur</span></span><br><span class="line">            <span class="comment"># cur = next</span></span><br><span class="line">        <span class="comment">#  首尾相接</span></span><br><span class="line">        a.next = d</span><br><span class="line">        b.next = c</span><br><span class="line">        <span class="keyword">return</span> dummy.next</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">head = ListNode(<span class="number">1</span>)</span><br><span class="line">head.next = ListNode(<span class="number">2</span>)</span><br><span class="line">head.next.next = ListNode(<span class="number">3</span>)</span><br><span class="line">head.next.next.next = ListNode(<span class="number">4</span>)</span><br><span class="line">head_tmp = head</span><br><span class="line"><span class="keyword">while</span> head_tmp:</span><br><span class="line">    print(head_tmp.val)</span><br><span class="line">    head_tmp = head_tmp.next</span><br><span class="line">so = Solution()</span><br><span class="line">return_head = so.reverseBetween(head, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">return_head_tmp = return_head</span><br><span class="line"><span class="keyword">while</span> return_head_tmp:</span><br><span class="line">    print(return_head_tmp.val)</span><br><span class="line">    return_head_tmp = return_head_tmp.next</span><br></pre></td></tr></tbody></table></figure><h2 id="从头到尾打印链表"><a href="#从头到尾打印链表" class="headerlink" title="从头到尾打印链表"></a>从头到尾打印链表</h2><ul><li>解题思路：从头到尾打印，考虑使用栈结构，也可以进行递归，但是当数据量比较大时，<strong>可能出现栈溢出</strong>，所以直接使用栈更合适。</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time: 2020/5/9 23:22 </span></span><br><span class="line"><span class="comment"># @Author: GraceKoo</span></span><br><span class="line"><span class="comment"># @File: printListFromTailToHead.py</span></span><br><span class="line"><span class="comment"># @Desc:</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListNode</span>:</span></span><br><span class="line">    <span class="comment"># 链表的构造 初始化</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        self.val = x</span><br><span class="line">        self.next = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="comment"># 返回从尾部到头部的列表值序列，例如[1,2,3]</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">printListFromTailToHead</span><span class="params">(self, list_node: ListNode)</span>:</span></span><br><span class="line">        stack = []</span><br><span class="line">        <span class="keyword">while</span> list_node:</span><br><span class="line">            stack.append(list_node.val)</span><br><span class="line">            list_node = list_node.next</span><br><span class="line">        <span class="comment"># 将栈进行弹出</span></span><br><span class="line">        <span class="comment"># return stack[::-1]</span></span><br><span class="line">        <span class="keyword">while</span> stack:</span><br><span class="line">            print(stack.pop())</span><br></pre></td></tr></tbody></table></figure><h2 id="interview-35"><a href="#interview-35" class="headerlink" title="interview_35"></a>interview_35</h2><p><a href="https://leetcode-cn.com/problems/fu-za-lian-biao-de-fu-zhi-lcof/solution/lian-biao-de-shen-kao-bei-by-z1m/" target="_blank" rel="noopener">解题思路</a></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">“”“第一部分”“”</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(head)</span>:</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> head: <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">            <span class="keyword">if</span> head <span class="keyword">in</span> visited:</span><br><span class="line">                <span class="keyword">return</span> visited[head]</span><br><span class="line">            <span class="comment"># 创建新结点</span></span><br><span class="line">            copy = Node(head.val, <span class="literal">None</span>, <span class="literal">None</span>)</span><br><span class="line">            visited[head] = copy</span><br><span class="line">            copy.next = dfs(head.next)</span><br><span class="line">“”“第二部分”“”</span><br><span class="line">            copy.random = dfs(head.random)</span><br><span class="line">            <span class="keyword">return</span> copy</span><br></pre></td></tr></tbody></table></figure><ol><li>首先反复运行第一部分，copy.next = dfs(head.next) 会递归得越来越深，，当 碰到 head == None 时，开始运行第二部分，准备从尾结点回溯；</li><li>回溯时，先从尾结点开始回溯：调用dfs(head.ranom)时，由于结点都保存在了哈希表中，因此 return visited[head]，这时完成random指针，完成了最后一个结点，故return copy。再进行倒数第二个结点的回溯：调用dfs(head.random)，return visited[head]，return copy…….</li></ol><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time: 2020/6/19 10:28 </span></span><br><span class="line"><span class="comment"># @Author: GraceKoo</span></span><br><span class="line"><span class="comment"># @File: interview_35.py</span></span><br><span class="line"><span class="comment"># @Desc: https://leetcode-cn.com/problems/fu-za-lian-biao-de-fu-zhi-lcof/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Definition for a Node.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x: int, next: <span class="string">'Node'</span> = None, random: <span class="string">'Node'</span> = None)</span>:</span></span><br><span class="line">        self.val = int(x)</span><br><span class="line">        self.next = next</span><br><span class="line">        self.random = random</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">copyRandomList</span><span class="params">(self, head: <span class="string">'Node'</span>)</span> -&gt; 'Node':</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(head)</span>:</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> head:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">            <span class="keyword">if</span> head <span class="keyword">in</span> visited:</span><br><span class="line">                <span class="keyword">return</span> visited[head]</span><br><span class="line">            copy = Node(head.val, <span class="literal">None</span>, <span class="literal">None</span>)</span><br><span class="line">            visited[head] = copy</span><br><span class="line">            copy.next = dfs(head.next)</span><br><span class="line">            copy.random = dfs(head.random)</span><br><span class="line">            <span class="keyword">return</span> copy</span><br><span class="line">        visited = {}</span><br><span class="line">        <span class="keyword">return</span> dfs(head)</span><br></pre></td></tr></tbody></table></figure><h1 id="BackTrack"><a href="#BackTrack" class="headerlink" title="BackTrack"></a>BackTrack</h1><p>回溯思想的模板为：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">result = []</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">backtrack</span><span class="params">(路径, 选择列表)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> 满足结束条件:</span><br><span class="line">        result.add(路径)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">for</span> 选择 <span class="keyword">in</span> 选择列表:</span><br><span class="line">        做选择</span><br><span class="line">        backtrack(路径, 选择列表)</span><br><span class="line">        撤销选择</span><br></pre></td></tr></tbody></table></figure><h2 id="find-median-sorted-array"><a href="#find-median-sorted-array" class="headerlink" title="find_median_sorted_array"></a>find_median_sorted_array</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time: 2019/12/4 12:14 上午</span></span><br><span class="line"><span class="comment"># @Author: GraceKoo</span></span><br><span class="line"><span class="comment"># @File: 4_find_median_sorted_array.py</span></span><br><span class="line"><span class="comment"># @Desc:</span></span><br><span class="line"><span class="keyword">import</span> timeit</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findMedianSortedArrays</span><span class="params">(self, nums1, nums2)</span> -&gt; float:</span></span><br><span class="line">        m = len(nums1)</span><br><span class="line">        n = len(nums2)</span><br><span class="line">        k = (m + n) % <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> k == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> self.find_k(nums1, nums2, (m + n) // <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> (</span><br><span class="line">                self.find_k(nums1, nums2, (m + n) // <span class="number">2</span> - <span class="number">1</span>)</span><br><span class="line">                + self.find_k(nums1, nums2, (m + n) // <span class="number">2</span>)</span><br><span class="line">            ) / <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">find_k</span><span class="params">(self, nums1, nums2, k)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> nums1:</span><br><span class="line">            <span class="keyword">return</span> nums2[k]</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> nums2:</span><br><span class="line">            <span class="keyword">return</span> nums1[k]</span><br><span class="line">        <span class="comment"># print("len nums1:", len(nums1), "len nums2:", len(nums2))</span></span><br><span class="line">        i = len(nums1) // <span class="number">2</span></span><br><span class="line">        j = len(nums2) // <span class="number">2</span></span><br><span class="line">        <span class="comment"># print(i, j, k)</span></span><br><span class="line">        <span class="keyword">if</span> k &gt; i + j:</span><br><span class="line">            <span class="keyword">if</span> nums1[i] &gt; nums2[j]:</span><br><span class="line">                <span class="keyword">return</span> self.find_k(nums1, nums2[j + <span class="number">1</span> :], k - j - <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> self.find_k(nums1[i + <span class="number">1</span> :], nums2, k - i - <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> nums1[i] &gt; nums2[j]:</span><br><span class="line">                <span class="keyword">return</span> self.find_k(nums1[:i], nums2, k)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> self.find_k(nums1, nums2[:j], k)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    so = Solution()</span><br><span class="line">    nums1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">    nums2 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">    start = timeit.default_timer()</span><br><span class="line">    print(so.findMedianSortedArrays(nums1, nums2))</span><br><span class="line">    end = timeit.default_timer()</span><br><span class="line">    print(str((end - start) * <span class="number">1000</span>), <span class="string">"s"</span>)</span><br><span class="line">    nums1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">    nums2 = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">    print(so.findMedianSortedArrays(nums1, nums2))</span><br><span class="line">    nums1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">    nums2 = [<span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">    print(so.findMedianSortedArrays(nums1, nums2))</span><br><span class="line">    nums1 = [<span class="number">1</span>, <span class="number">4</span>, <span class="number">6</span>]</span><br><span class="line">    nums2 = [<span class="number">2</span>, <span class="number">5</span>]</span><br><span class="line">    print(so.findMedianSortedArrays(nums1, nums2))</span><br></pre></td></tr></tbody></table></figure><h2 id="sudoku-solver"><a href="#sudoku-solver" class="headerlink" title="sudoku-solver"></a>sudoku-solver</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time: 2020/2/5 9:44 上午</span></span><br><span class="line"><span class="comment"># @Author: GraceKoo</span></span><br><span class="line"><span class="comment"># @File: 37_sudoku-solver.py</span></span><br><span class="line"><span class="comment"># @Desc:https://leetcode-cn.com/problems/sudoku-solver/</span></span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">solveSudoku</span><span class="params">(self, board)</span> -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        rows_available = [set(range(<span class="number">1</span>, <span class="number">10</span>)) <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">9</span>)] <span class="comment"># 行剩余可用数字</span></span><br><span class="line">        columns_available = [set(range(<span class="number">1</span>, <span class="number">10</span>)) <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">9</span>)]  <span class="comment"># 列剩余可用数字</span></span><br><span class="line">        boxes_available = [set(range(<span class="number">1</span>, <span class="number">10</span>)) <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">9</span>)]  <span class="comment"># 块剩余可用数字</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 根据board数据统计每行每列可用的数字</span></span><br><span class="line">        empty = []</span><br><span class="line">        <span class="keyword">for</span> row <span class="keyword">in</span> range(<span class="number">9</span>):</span><br><span class="line">            <span class="keyword">for</span> column <span class="keyword">in</span> range(<span class="number">9</span>):</span><br><span class="line">                <span class="keyword">if</span> board[row][column] == <span class="string">"."</span>:</span><br><span class="line">                    empty.append((row, column))</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    num = int(board[row][column])</span><br><span class="line">                    rows_available[row].remove(num)</span><br><span class="line">                    columns_available[column].remove(num)</span><br><span class="line">                    boxes_available[(row // <span class="number">3</span>) * <span class="number">3</span> + column // <span class="number">3</span>].remove(num)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 回溯函数，如果当前添加的数字个数已经等于空格的个数，则证明已添加到最后一个空格，即找到答案</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">backtrack</span><span class="params">(interation = <span class="number">0</span>)</span>:</span></span><br><span class="line">            <span class="keyword">if</span> interation == len(empty):</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            i, j = empty[interation]  <span class="comment"># 依次取出待填入空格的坐标</span></span><br><span class="line">            <span class="keyword">for</span> value <span class="keyword">in</span> rows_available[i] &amp; columns_available[j] &amp; boxes_available[(i // <span class="number">3</span>) * <span class="number">3</span> + j // <span class="number">3</span>]:</span><br><span class="line">                rows_available[i].remove(value)</span><br><span class="line">                columns_available[j].remove(value)</span><br><span class="line">                boxes_available[(i // <span class="number">3</span>) * <span class="number">3</span> + j // <span class="number">3</span>].remove(value)</span><br><span class="line">                board[i][j] = value</span><br><span class="line">                <span class="keyword">if</span> backtrack(interation + <span class="number">1</span>):</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">                <span class="comment"># 如果没找到答案，则进行回溯</span></span><br><span class="line">                rows_available[i].add(value)</span><br><span class="line">                columns_available[j].add(value)</span><br><span class="line">                boxes_available[(i // <span class="number">3</span>) * <span class="number">3</span> + j // <span class="number">3</span>].add(value)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        backtrack()</span><br><span class="line">        <span class="keyword">return</span> board</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">so = Solution()</span><br><span class="line">print(so.solveSudoku([</span><br><span class="line">    [<span class="string">"5"</span>, <span class="string">"3"</span>, <span class="string">"."</span>, <span class="string">"."</span>, <span class="string">"7"</span>, <span class="string">"."</span>, <span class="string">"."</span>, <span class="string">"."</span>, <span class="string">"."</span>],</span><br><span class="line">    [<span class="string">"6"</span>, <span class="string">"."</span>, <span class="string">"."</span>, <span class="string">"1"</span>, <span class="string">"9"</span>, <span class="string">"5"</span>, <span class="string">"."</span>, <span class="string">"."</span>, <span class="string">"."</span>],</span><br><span class="line">    [<span class="string">"."</span>, <span class="string">"9"</span>, <span class="string">"8"</span>, <span class="string">"."</span>, <span class="string">"."</span>, <span class="string">"."</span>, <span class="string">"."</span>, <span class="string">"6"</span>, <span class="string">"."</span>],</span><br><span class="line">    [<span class="string">"8"</span>, <span class="string">"."</span>, <span class="string">"."</span>, <span class="string">"."</span>, <span class="string">"6"</span>, <span class="string">"."</span>, <span class="string">"."</span>, <span class="string">"."</span>, <span class="string">"3"</span>],</span><br><span class="line">    [<span class="string">"4"</span>, <span class="string">"."</span>, <span class="string">"."</span>, <span class="string">"8"</span>, <span class="string">"."</span>, <span class="string">"3"</span>, <span class="string">"."</span>, <span class="string">"."</span>, <span class="string">"1"</span>],</span><br><span class="line">    [<span class="string">"7"</span>, <span class="string">"."</span>, <span class="string">"."</span>, <span class="string">"."</span>, <span class="string">"2"</span>, <span class="string">"."</span>, <span class="string">"."</span>, <span class="string">"."</span>, <span class="string">"6"</span>],</span><br><span class="line">    [<span class="string">"."</span>, <span class="string">"6"</span>, <span class="string">"."</span>, <span class="string">"."</span>, <span class="string">"."</span>, <span class="string">"."</span>, <span class="string">"2"</span>, <span class="string">"8"</span>, <span class="string">"."</span>],</span><br><span class="line">    [<span class="string">"."</span>, <span class="string">"."</span>, <span class="string">"."</span>, <span class="string">"4"</span>, <span class="string">"1"</span>, <span class="string">"9"</span>, <span class="string">"."</span>, <span class="string">"."</span>, <span class="string">"5"</span>],</span><br><span class="line">    [<span class="string">"."</span>, <span class="string">"."</span>, <span class="string">"."</span>, <span class="string">"."</span>, <span class="string">"8"</span>, <span class="string">"."</span>, <span class="string">"."</span>, <span class="string">"7"</span>, <span class="string">"9"</span>]</span><br><span class="line">]</span><br><span class="line">))</span><br></pre></td></tr></tbody></table></figure><h2 id="combination-sum"><a href="#combination-sum" class="headerlink" title="combination-sum"></a>combination-sum</h2><p>解题思路：（注：<a href="https://leetcode-cn.com/problems/combination-sum/solution/hui-su-suan-fa-jian-zhi-python-dai-ma-java-dai-m-2/" target="_blank" rel="noopener">参考链接</a>）</p><ul><li>以 <code>target = 7</code> 为根结点，每一个分支做减法。减到 00 或者负数的时候，剪枝。其中，减到 0的时候添加结果。</li><li>为了能够去重：把候选数组排个序，即后面选取的数不能比前面选的数还要小。</li></ul><p><img data-src="/images/algorithm/leetcode-39.png" alt="leetcode-39"></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time: 2020/2/9 11:55 上午 </span></span><br><span class="line"><span class="comment"># @Author: GraceKoo</span></span><br><span class="line"><span class="comment"># @File: 39_combination-sum.py</span></span><br><span class="line"><span class="comment"># @Desc: https://leetcode-cn.com/problems/combination-sum/solution/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> List</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">combinationSum</span><span class="params">(self, candidates: List[int], target: int)</span> -&gt; List[List[int]]:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> candidates <span class="keyword">or</span> <span class="keyword">not</span> target:</span><br><span class="line">            <span class="keyword">return</span> []</span><br><span class="line">        candidates.sort()</span><br><span class="line">        output_list = []</span><br><span class="line">        path = []</span><br><span class="line">        begin = <span class="number">0</span></span><br><span class="line">        size = len(candidates)</span><br><span class="line">        self._dfs(candidates, begin, size, path, output_list, target)</span><br><span class="line">        <span class="keyword">return</span> output_list</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_dfs</span><span class="params">(self, candidates, begin, size, path, output_list, target)</span>:</span></span><br><span class="line">        <span class="comment"># 递归终止的条件</span></span><br><span class="line">        <span class="keyword">if</span> target == <span class="number">0</span>:</span><br><span class="line">            output_list.append(path[:])</span><br><span class="line">        <span class="keyword">for</span> index <span class="keyword">in</span> range(begin, size):</span><br><span class="line">            residue = target - candidates[index]</span><br><span class="line">            <span class="keyword">if</span> residue &lt; <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            path.append(candidates[index])</span><br><span class="line">            self._dfs(candidates, index, size, path, output_list, residue)</span><br><span class="line">            path.pop()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    candidates = [<span class="number">2</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">7</span>]</span><br><span class="line">    target = <span class="number">7</span></span><br><span class="line">    solution = Solution()</span><br><span class="line">    result = solution.combinationSum(candidates, target)</span><br><span class="line">    print(result)</span><br></pre></td></tr></tbody></table></figure><h2 id="permutations"><a href="#permutations" class="headerlink" title="permutations"></a>permutations</h2><p><img data-src="/images/algorithm/permutations.png" alt="permutations"></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time: 2020/1/13 6:40 下午</span></span><br><span class="line"><span class="comment"># @Author: GraceKoo</span></span><br><span class="line"><span class="comment"># @File: 46_permutations.py</span></span><br><span class="line"><span class="comment"># @Desc: https://leetcode-cn.com/problems/permutations/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">permute</span><span class="params">(self, nums)</span>:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">backtrack</span><span class="params">(nums, num)</span>:</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> nums:</span><br><span class="line">                output_list.append(num)</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(len(nums)):</span><br><span class="line">                backtrack(nums[:i] + nums[i + <span class="number">1</span> :], num + [nums[i]])</span><br><span class="line"></span><br><span class="line">        output_list = []</span><br><span class="line">        backtrack(nums, [])</span><br><span class="line">        <span class="keyword">return</span> output_list</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">so = Solution()</span><br><span class="line">print(so.permute([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]))</span><br></pre></td></tr></tbody></table></figure><h2 id="permutations-ii"><a href="#permutations-ii" class="headerlink" title="permutations-ii"></a>permutations-ii</h2><p>去除重复元素，两个要点</p><ul><li>排序</li><li>去重</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time: 2020/2/18 6:40 下午</span></span><br><span class="line"><span class="comment"># @Author: GraceKoo</span></span><br><span class="line"><span class="comment"># @File: 47_permutations-ii.py</span></span><br><span class="line"><span class="comment"># @Desc: https://leetcode-cn.com/problems/permutations/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">permuteUnique</span><span class="params">(self, nums)</span>:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">backtrack</span><span class="params">(nums, num)</span>:</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> nums:</span><br><span class="line">                output_list.append(num)</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(len(nums)):</span><br><span class="line">                <span class="keyword">if</span> i &gt; <span class="number">0</span> <span class="keyword">and</span> nums[i] == nums[i - <span class="number">1</span>]:  </span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                backtrack(nums[:i] + nums[i + <span class="number">1</span>:], num + [nums[i]])</span><br><span class="line"></span><br><span class="line">        nums.sort()  <span class="comment"># 数组先排序</span></span><br><span class="line">        output_list = []</span><br><span class="line">        backtrack(nums, [])</span><br><span class="line">        <span class="keyword">return</span> output_list</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">so = Solution()</span><br><span class="line">print(so.permuteUnique([<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>]))</span><br></pre></td></tr></tbody></table></figure><h2 id="interview-27"><a href="#interview-27" class="headerlink" title="interview_27"></a>interview_27</h2><p><img data-src="/images/algorithm/interview_27.png" alt="permutations"></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time: 2020/6/27 14:35 </span></span><br><span class="line"><span class="comment"># @Author: GraceKoo</span></span><br><span class="line"><span class="comment"># @File: interview_27.py</span></span><br><span class="line"><span class="comment"># @Desc: https://leetcode-cn.com/problems/</span></span><br><span class="line"><span class="comment"># zi-fu-chuan-de-pai-lie-lcof/</span></span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> List</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">permutation</span><span class="params">(self, s: str)</span> -&gt; List[str]:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> s:</span><br><span class="line">            <span class="keyword">return</span> []</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">backtrack</span><span class="params">(nums, tmp)</span>:</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> nums:</span><br><span class="line">                result.add(tmp)</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(len(nums)):</span><br><span class="line">                backtrack(nums[:i] + nums[i+<span class="number">1</span>:], tmp+nums[i])</span><br><span class="line"></span><br><span class="line">        result = set()</span><br><span class="line">        backtrack(s, <span class="string">""</span>)</span><br><span class="line">        <span class="keyword">return</span> list(result)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">so = Solution()</span><br><span class="line">print(so.permutation(<span class="string">"ryawrowv"</span>))</span><br></pre></td></tr></tbody></table></figure><h2 id="powx-n"><a href="#powx-n" class="headerlink" title="powx-n"></a>powx-n</h2><p>解题思路</p><ul><li>若n为偶数：$x^n = x^{\frac{n}{2}} \, \dot \, x^{\frac{n}{2}}$</li><li>若n为奇数：$x ^ n = x ^ {\frac{n}{2}} \, \dot \, x^ {\frac{n}{2}} \, \dot \, x$</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time: 2020/2/21 23:37</span></span><br><span class="line"><span class="comment"># @Author: GraceKoo</span></span><br><span class="line"><span class="comment"># @File: 50_powx-n.py</span></span><br><span class="line"><span class="comment"># @Desc:https://leetcode-cn.com/problems/powx-n/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">myPow</span><span class="params">(self, x: float, n: int)</span> -&gt; float:</span></span><br><span class="line">        <span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> n == <span class="number">-1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span> / x</span><br><span class="line">        half = self.myPow(x, n // <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">if</span> n % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> half * half</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> half * half * x</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">so = Solution()</span><br><span class="line">print(so.myPow(<span class="number">2.00000</span>, <span class="number">-10</span>))</span><br></pre></td></tr></tbody></table></figure><h2 id="n-queens"><a href="#n-queens" class="headerlink" title="n-queens"></a>n-queens</h2><p>一、因为：</p><blockquote><p>对于所有的主对角线有 <code>行号 + 列号 = 常数</code></p><p>对于所有的次对角线有 <code>行号 - 列号 = 常数</code></p></blockquote><p>所以，所有的主对象线元素可以用<code>2 * n  - 1</code>个元素来表示，比如<code>main_diagonals[0]</code>就可以表示待解queen_map中，第<code>queen_map[0][0]</code>个元素的<strong>所有</strong>主对角线元素。</p><p>二、解题思路 （注：<a href="https://leetcode-cn.com/problems/n-queens/solution/nhuang-hou-by-leetcode/" target="_blank" rel="noopener">参考链接</a>）</p><ul><li>从第一个 row = 0 开始.</li><li>循环列并且试图在每个 column 中放置皇后.<ul><li>如果方格 (row, column) 不在攻击范围内<ul><li>在 (row, column) 方格上放置皇后。</li><li>排除对应行，列和两个对角线的位置。</li><li>If 所有的行被考虑过，row == N<br>意味着我们找到了一个解</li><li>Else<br>继续考虑接下来的皇后放置 backtrack(row + 1).</li><li>回溯：将在 (row, column) 方格的将皇后移除。</li></ul></li></ul></li></ul><p><img data-src="/images/algorithm/leetcode-51.png" alt="leetcode-51"></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time: 2020/2/24 13:55</span></span><br><span class="line"><span class="comment"># @Author: GraceKoo</span></span><br><span class="line"><span class="comment"># @File: 51_n-queens.py</span></span><br><span class="line"><span class="comment"># @Desc:https://leetcode-cn.com/problems/n-queens/</span></span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> List</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">solveNQueens</span><span class="params">(self, n: int)</span> -&gt; List[List[str]]:</span></span><br><span class="line">        <span class="comment"># 判断当前位置是否可用，由当前列，主对角线，副对角线共同决定</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">could_place</span><span class="params">(row, col)</span>:</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">not</span> cols[col] + main_diagonals[row - col] + counter_diagonals[row + col]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 放置皇后</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">place_queen</span><span class="params">(row, col)</span>:</span></span><br><span class="line">            queens_position.add((row, col))</span><br><span class="line">            cols[col] = <span class="number">1</span></span><br><span class="line">            main_diagonals[row - col] = <span class="number">1</span></span><br><span class="line">            counter_diagonals[row + col] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 消除皇后</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">remove_queen</span><span class="params">(row, col)</span>:</span></span><br><span class="line">            queens_position.remove((row, col))</span><br><span class="line">            cols[col] = <span class="number">0</span></span><br><span class="line">            main_diagonals[row - col] = <span class="number">0</span></span><br><span class="line">            counter_diagonals[row + col] = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 增加解</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">add_solution</span><span class="params">()</span>:</span></span><br><span class="line">            solution = []</span><br><span class="line">            <span class="keyword">for</span> _, col <span class="keyword">in</span> sorted(queens_position):</span><br><span class="line">                solution.append(<span class="string">'.'</span> * col + <span class="string">'Q'</span> + <span class="string">'.'</span> * (n - col - <span class="number">1</span>))</span><br><span class="line">            output.append(solution)</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">backtrack</span><span class="params">(row=<span class="number">0</span>)</span>:</span></span><br><span class="line">            <span class="keyword">for</span> col <span class="keyword">in</span> range(n):</span><br><span class="line">                <span class="keyword">if</span> could_place(row, col):</span><br><span class="line">                    place_queen(row, col)</span><br><span class="line">                    <span class="keyword">if</span> row + <span class="number">1</span> == n:</span><br><span class="line">                        add_solution()</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        backtrack(row + <span class="number">1</span>)</span><br><span class="line">                    remove_queen(row, col)</span><br><span class="line">        cols = [<span class="number">0</span>] * n  <span class="comment"># 每列的Queen</span></span><br><span class="line">        main_diagonals = [<span class="number">0</span>] * (<span class="number">2</span> * n - <span class="number">1</span>)  <span class="comment"># 共需要7个元素可以表示全部的主对角线元素</span></span><br><span class="line">        counter_diagonals = [<span class="number">0</span>] * (<span class="number">2</span> * n - <span class="number">1</span>)  <span class="comment"># 共需要7个元素可以表示全部的副对角线元素</span></span><br><span class="line">        queens_position = set() <span class="comment"># 用于记录当前已经摆放的位置</span></span><br><span class="line">        output = []</span><br><span class="line">        backtrack()</span><br><span class="line">        <span class="keyword">return</span> output</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">so = Solution()</span><br><span class="line">print(so.solveNQueens(<span class="number">4</span>))</span><br></pre></td></tr></tbody></table></figure><h2 id="n-queens-ii"><a href="#n-queens-ii" class="headerlink" title="n-queens-ii"></a>n-queens-ii</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time: 2020/2/24 19:35</span></span><br><span class="line"><span class="comment"># @Author: GraceKoo</span></span><br><span class="line"><span class="comment"># @File: 52_n-queens-ii.py</span></span><br><span class="line"><span class="comment"># @Desc:https://leetcode-cn.com/problems/n-queens-ii/</span></span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> List</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">totalNQueens</span><span class="params">(self, n: int)</span> -&gt; int:</span></span><br><span class="line">        <span class="comment"># 判断当前位置是否可用，由当前列，主对角线，副对角线共同决定</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">could_place</span><span class="params">(row, col)</span>:</span></span><br><span class="line">            <span class="keyword">return</span> (</span><br><span class="line">                <span class="keyword">not</span> cols[col] + main_diagonals[row - col] + counter_diagonals[row + col]</span><br><span class="line">            )</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 放置皇后</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">place_queen</span><span class="params">(row, col)</span>:</span></span><br><span class="line">            cols[col] = <span class="number">1</span></span><br><span class="line">            main_diagonals[row - col] = <span class="number">1</span></span><br><span class="line">            counter_diagonals[row + col] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 消除皇后</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">remove_queen</span><span class="params">(row, col)</span>:</span></span><br><span class="line">            cols[col] = <span class="number">0</span></span><br><span class="line">            main_diagonals[row - col] = <span class="number">0</span></span><br><span class="line">            counter_diagonals[row + col] = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">backtrack</span><span class="params">(row=<span class="number">0</span>, output = <span class="number">0</span>)</span>:</span></span><br><span class="line">            <span class="keyword">for</span> col <span class="keyword">in</span> range(n):</span><br><span class="line">                <span class="keyword">if</span> could_place(row, col):</span><br><span class="line">                    place_queen(row, col)</span><br><span class="line">                    <span class="keyword">if</span> row + <span class="number">1</span> == n:</span><br><span class="line">                        output += <span class="number">1</span></span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        output = backtrack(row + <span class="number">1</span>, output)</span><br><span class="line">                    remove_queen(row, col)</span><br><span class="line">            <span class="keyword">return</span> output</span><br><span class="line"></span><br><span class="line">        cols = [<span class="number">0</span>] * n  <span class="comment"># 每列的Queen</span></span><br><span class="line">        main_diagonals = [<span class="number">0</span>] * (<span class="number">2</span> * n - <span class="number">1</span>)  <span class="comment"># 共需要7个元素可以表示全部的主对角线元素</span></span><br><span class="line">        counter_diagonals = [<span class="number">0</span>] * (<span class="number">2</span> * n - <span class="number">1</span>)  <span class="comment"># 共需要7个元素可以表示全部的副对角线元素</span></span><br><span class="line">        <span class="keyword">return</span> backtrack()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">so = Solution()</span><br><span class="line">print(so.totalNQueens(<span class="number">4</span>))</span><br></pre></td></tr></tbody></table></figure><h2 id="combinations"><a href="#combinations" class="headerlink" title="combinations"></a>combinations</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time: 2020/3/22 22:32</span></span><br><span class="line"><span class="comment"># @Author: GraceKoo</span></span><br><span class="line"><span class="comment"># @File: 77_combinations.py</span></span><br><span class="line"><span class="comment"># @Desc:https://leetcode-cn.com/problems/combinations/</span></span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> List</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">combine</span><span class="params">(self, n: int, k: int)</span> -&gt; List[List[int]]:</span></span><br><span class="line">        <span class="keyword">if</span> n &lt;= <span class="number">0</span> <span class="keyword">or</span> k &lt;= <span class="number">0</span> <span class="keyword">or</span> n &lt; k:</span><br><span class="line">            <span class="keyword">return</span> []</span><br><span class="line">        result = []</span><br><span class="line">        self.__dfs(<span class="number">1</span>, k, n, [], result)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__dfs</span><span class="params">(self, index, k, n, pre, result)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> len(pre) == k:</span><br><span class="line">            result.append(pre[:])</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(index, n + <span class="number">1</span>):</span><br><span class="line">            pre.append(i)</span><br><span class="line">            self.__dfs(i + <span class="number">1</span>, k, n, pre, result)</span><br><span class="line">            pre.pop()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">so = Solution()</span><br><span class="line">print(so.combine(<span class="number">4</span>, <span class="number">2</span>))</span><br></pre></td></tr></tbody></table></figure><h2 id="subsets"><a href="#subsets" class="headerlink" title="subsets"></a>subsets</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time: 2020/3/24 11:57</span></span><br><span class="line"><span class="comment"># @Author: GraceKoo</span></span><br><span class="line"><span class="comment"># @File: 78_subsets.py</span></span><br><span class="line"><span class="comment"># @Desc:https://leetcode-cn.com/problems/subsets/</span></span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> List</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">subsets</span><span class="params">(self, nums: List[int])</span> -&gt; List[List[int]]:</span></span><br><span class="line">        result = []</span><br><span class="line">        n = len(nums)</span><br><span class="line">        <span class="keyword">if</span> n &lt;= <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">backtrack</span><span class="params">(start, result_tmp)</span>:</span></span><br><span class="line">            result.append(result_tmp)</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(start, n):</span><br><span class="line">                backtrack(i + <span class="number">1</span>, result_tmp + [nums[i]])</span><br><span class="line"></span><br><span class="line">        backtrack(<span class="number">0</span>, [])</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">so = Solution()</span><br><span class="line">print(so.subsets([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]))</span><br></pre></td></tr></tbody></table></figure><h2 id="subsets-ii"><a href="#subsets-ii" class="headerlink" title="subsets-ii"></a>subsets-ii</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time: 2020/4/4 22:57</span></span><br><span class="line"><span class="comment"># @Author: GraceKoo</span></span><br><span class="line"><span class="comment"># @File: 90_subsets-ii.py</span></span><br><span class="line"><span class="comment"># @Desc: https://leetcode-cn.com/problems/subsets-ii/</span></span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> List</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">subsetsWithDup</span><span class="params">(self, nums: List[int])</span> -&gt; List[List[int]]:</span></span><br><span class="line">        n = len(nums)</span><br><span class="line">        nums.sort()</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">track_back</span><span class="params">(i, tmp)</span>:</span></span><br><span class="line">            res.append(tmp)</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(i, n):</span><br><span class="line">                <span class="keyword">if</span> j &gt; i <span class="keyword">and</span> nums[j] == nums[j - <span class="number">1</span>]:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                track_back(j + <span class="number">1</span>, tmp + [nums[j]])</span><br><span class="line"></span><br><span class="line">        res = []</span><br><span class="line">        track_back(<span class="number">0</span>, [])</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">so = Solution()</span><br><span class="line">print(so.subsetsWithDup([<span class="number">0</span>]))</span><br></pre></td></tr></tbody></table></figure><h2 id="word-search"><a href="#word-search" class="headerlink" title="word-search"></a>word-search</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time: 2020/3/24 21:06 </span></span><br><span class="line"><span class="comment"># @Author: GraceKoo</span></span><br><span class="line"><span class="comment"># @File: 79_word-search.py</span></span><br><span class="line"><span class="comment"># @Desc:https://leetcode-cn.com/problems/word-search/</span></span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> List</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    derections = [(<span class="number">0</span>, <span class="number">-1</span>), (<span class="number">-1</span>, <span class="number">0</span>), (<span class="number">0</span>, <span class="number">1</span>), (<span class="number">1</span>, <span class="number">0</span>)]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">exist</span><span class="params">(self, board: List[List[str]], word: str)</span> -&gt; bool:</span></span><br><span class="line">        rows = len(board)</span><br><span class="line">        cols = len(board[<span class="number">0</span>])</span><br><span class="line">        marked = [[<span class="literal">False</span> <span class="keyword">for</span> _ <span class="keyword">in</span> range(cols)] <span class="keyword">for</span> _ <span class="keyword">in</span> range(rows)]</span><br><span class="line">        <span class="keyword">for</span> row <span class="keyword">in</span> range(rows):</span><br><span class="line">            <span class="keyword">for</span> col <span class="keyword">in</span> range(cols):</span><br><span class="line">                <span class="keyword">if</span> self.__search_word(board, word, <span class="number">0</span>, row, col, marked, rows, cols):</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__search_word</span><span class="params">(self, board, word, index_word, row, col, marked, rows, cols)</span>:</span></span><br><span class="line">        <span class="comment"># 递归终止条件</span></span><br><span class="line">        <span class="keyword">if</span> len(word) - <span class="number">1</span> == index_word:</span><br><span class="line">            <span class="keyword">return</span> board[row][col] == word[index_word]</span><br><span class="line">        <span class="keyword">if</span> board[row][col] == word[index_word]:</span><br><span class="line">            marked[row][col] = <span class="literal">True</span></span><br><span class="line">            <span class="keyword">for</span> derection <span class="keyword">in</span> self.derections:</span><br><span class="line">                next_x, next_y = row + derection[<span class="number">0</span>], col + derection[<span class="number">1</span>]</span><br><span class="line">                <span class="keyword">if</span> <span class="number">0</span> &lt;= next_x &lt; rows <span class="keyword">and</span> <span class="number">0</span> &lt;= next_y &lt; cols <span class="keyword">and</span> <span class="keyword">not</span> marked[next_x][next_y] \</span><br><span class="line">                    <span class="keyword">and</span> self.__search_word(board, word,</span><br><span class="line">                                           index_word + <span class="number">1</span>,</span><br><span class="line">                                           next_x, next_y,</span><br><span class="line">                                           marked, rows, cols):</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            marked[row][col] = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">so = Solution()</span><br><span class="line">print(so.exist([</span><br><span class="line">    [<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>, <span class="string">'E'</span>],</span><br><span class="line">    [<span class="string">'S'</span>, <span class="string">'F'</span>, <span class="string">'C'</span>, <span class="string">'S'</span>],</span><br><span class="line">    [<span class="string">'A'</span>, <span class="string">'D'</span>, <span class="string">'E'</span>, <span class="string">'E'</span>]</span><br><span class="line">], <span class="string">"ABCCED"</span>))</span><br></pre></td></tr></tbody></table></figure><h2 id="restore-ip-addresses"><a href="#restore-ip-addresses" class="headerlink" title="restore-ip-addresses"></a>restore-ip-addresses</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time: 2020/4/7 23:22 </span></span><br><span class="line"><span class="comment"># @Author: GraceKoo</span></span><br><span class="line"><span class="comment"># @File: 93_restore-ip-addresses.py</span></span><br><span class="line"><span class="comment"># @Desc:https://leetcode-cn.com/problems/restore-ip-addresses/</span></span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> List</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">restoreIpAddresses</span><span class="params">(self, s: str)</span> -&gt; List[str]:</span></span><br><span class="line">        r = []</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">restore</span><span class="params">(count=<span class="number">0</span>, ip=<span class="string">''</span>, s=<span class="string">''</span>)</span>:</span></span><br><span class="line">            <span class="keyword">if</span> count == <span class="number">4</span>:</span><br><span class="line">                <span class="keyword">if</span> s == <span class="string">''</span>:</span><br><span class="line">                    r.append(ip[:<span class="number">-1</span>])</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            <span class="keyword">if</span> len(s) &gt; <span class="number">0</span>:</span><br><span class="line">                restore(count+<span class="number">1</span>, ip+s[<span class="number">0</span>]+<span class="string">'.'</span>, s[<span class="number">1</span>:])</span><br><span class="line">            <span class="keyword">if</span> len(s) &gt; <span class="number">1</span> <span class="keyword">and</span> s[<span class="number">0</span>] != <span class="string">'0'</span>:</span><br><span class="line">                restore(count+<span class="number">1</span>, ip+s[:<span class="number">2</span>]+<span class="string">'.'</span>, s[<span class="number">2</span>:])</span><br><span class="line">            <span class="keyword">if</span> len(s) &gt; <span class="number">2</span> <span class="keyword">and</span> s[<span class="number">0</span>] != <span class="string">'0'</span> <span class="keyword">and</span> int(s[<span class="number">0</span>:<span class="number">3</span>]) &lt; <span class="number">256</span>:</span><br><span class="line">                restore(count+<span class="number">1</span>, ip+s[:<span class="number">3</span>]+<span class="string">'.'</span>, s[<span class="number">3</span>:])</span><br><span class="line">        restore(<span class="number">0</span>, <span class="string">''</span>, s)</span><br><span class="line">        <span class="keyword">return</span> r</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">so = Solution()</span><br><span class="line">print(so.restoreIpAddresses(<span class="string">"25525511135"</span>))</span><br></pre></td></tr></tbody></table></figure><h2 id="scramble-string"><a href="#scramble-string" class="headerlink" title="scramble-string"></a>scramble-string</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time: 2020/4/9 23:07 </span></span><br><span class="line"><span class="comment"># @Author: GraceKoo</span></span><br><span class="line"><span class="comment"># @File: 87_scramble-string.py</span></span><br><span class="line"><span class="comment"># @Desc:https://leetcode-cn.com/problems/scramble-string/</span></span><br><span class="line"><span class="keyword">import</span> functools</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line"><span class="meta">    @functools.lru_cache(None)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isScramble</span><span class="params">(self, s1: str, s2: str)</span> -&gt; bool:</span></span><br><span class="line">        <span class="keyword">if</span> len(s1) != len(s2):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">if</span> s1 == s2:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">if</span> sorted(s1) != sorted(s2):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, len(s1)):</span><br><span class="line">            <span class="keyword">if</span> self.isScramble(s1[:i], s2[:i]) <span class="keyword">and</span> self.isScramble(s1[i:], s2[i:]):</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            <span class="keyword">if</span> self.isScramble(s1[:i], s2[-i:]) <span class="keyword">and</span> self.isScramble(s1[i:], s2[:-i]):</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">so = Solution()</span><br><span class="line">print(so.isScramble(<span class="string">"great"</span>, <span class="string">"rgtae"</span>))</span><br></pre></td></tr></tbody></table></figure><h2 id="different-ways-to-add-parentheses"><a href="#different-ways-to-add-parentheses" class="headerlink" title="different-ways-to-add-parentheses"></a>different-ways-to-add-parentheses</h2><p> 分治三步法：</p><ul><li>分解：按运算符分成左右两部分，分别求解</li><li>解决：实现一个递归函数，输入算式，返回算式解</li><li>合并：根据运算符合并左右两部分的解，得出最终解</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time: 2020/4/17 12:40</span></span><br><span class="line"><span class="comment"># @Author: GraceKoo</span></span><br><span class="line"><span class="comment"># @File: 241_different-ways-to-add-parentheses.py</span></span><br><span class="line"><span class="comment"># @Desc: https://leetcode-cn.com/problems/different-ways-to-add-parentheses/</span></span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> List</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">diffWaysToCompute</span><span class="params">(self, input: str)</span> -&gt; List[int]:</span></span><br><span class="line">        <span class="keyword">if</span> input.isdigit():</span><br><span class="line">            <span class="keyword">return</span> [int(input)]</span><br><span class="line">        res = []</span><br><span class="line">        <span class="keyword">for</span> index, value <span class="keyword">in</span> enumerate(input):</span><br><span class="line">            <span class="keyword">if</span> value <span class="keyword">in</span> [<span class="string">"+"</span>, <span class="string">"-"</span>, <span class="string">"*"</span>]:</span><br><span class="line">                left = self.diffWaysToCompute(input[:index])</span><br><span class="line">                right = self.diffWaysToCompute(input[index + <span class="number">1</span> :])</span><br><span class="line">                <span class="comment"># 合并结果</span></span><br><span class="line">                <span class="keyword">for</span> l <span class="keyword">in</span> left:</span><br><span class="line">                    <span class="keyword">for</span> r <span class="keyword">in</span> right:</span><br><span class="line">                        <span class="keyword">if</span> value == <span class="string">"+"</span>:</span><br><span class="line">                            res.append(l + r)</span><br><span class="line">                        <span class="keyword">elif</span> value == <span class="string">"-"</span>:</span><br><span class="line">                            res.append(l - r)</span><br><span class="line">                        <span class="keyword">elif</span> value == <span class="string">"*"</span>:</span><br><span class="line">                            res.append(l * r)</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">so = Solution()</span><br><span class="line">print(so.diffWaysToCompute(<span class="string">"2*3-4*5"</span>))</span><br></pre></td></tr></tbody></table></figure><h2 id="letter-case-permutation"><a href="#letter-case-permutation" class="headerlink" title="letter-case-permutation"></a>letter-case-permutation</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time: 2020/4/21 20:38</span></span><br><span class="line"><span class="comment"># @Author: GraceKoo</span></span><br><span class="line"><span class="comment"># @File: 784_letter-case-permutation.py</span></span><br><span class="line"><span class="comment"># @Desc: https://leetcode-cn.com/problems/letter-case-permutation/</span></span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> List</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">letterCasePermutation</span><span class="params">(self, S: str)</span> -&gt; List[str]:</span></span><br><span class="line">        result = []</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">helper</span><span class="params">(s, pre)</span>:</span></span><br><span class="line">            <span class="comment"># 递归退出条件</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> s:</span><br><span class="line">                result.append(<span class="string">""</span>.join(pre))</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            <span class="keyword">if</span> s[<span class="number">0</span>].isalpha():</span><br><span class="line">                helper(s[<span class="number">1</span>:], pre + [s[<span class="number">0</span>].upper()])</span><br><span class="line">                helper(s[<span class="number">1</span>:], pre + [s[<span class="number">0</span>].lower()])</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                helper(s[<span class="number">1</span>:], pre + [s[<span class="number">0</span>]])</span><br><span class="line"></span><br><span class="line">        helper(S, [])</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">so = Solution()</span><br><span class="line">print(so.letterCasePermutation(<span class="string">"a1b2"</span>))</span><br></pre></td></tr></tbody></table></figure><h2 id="palindrome-partitioning"><a href="#palindrome-partitioning" class="headerlink" title="palindrome-partitioning"></a>palindrome-partitioning</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time: 2020/4/23 00:22</span></span><br><span class="line"><span class="comment"># @Author: GraceKoo</span></span><br><span class="line"><span class="comment"># @File: 131_palindrome-partitioning.py</span></span><br><span class="line"><span class="comment"># @Desc: https://leetcode-cn.com/problems/palindrome-partitioning/</span></span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> List</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">partition</span><span class="params">(self, s: str)</span> -&gt; List[List[str]]:</span></span><br><span class="line">        result = []</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">backtrack</span><span class="params">(s, tmp)</span>:</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> s:</span><br><span class="line">                result.append(tmp)</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, len(s) + <span class="number">1</span>):</span><br><span class="line">                <span class="keyword">if</span> s[:i] == s[:i][::<span class="number">-1</span>]:</span><br><span class="line">                    backtrack(s[i:], tmp + [s[:i]])</span><br><span class="line"></span><br><span class="line">        backtrack(s, [])</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">so = Solution()</span><br><span class="line">print(so.partition(<span class="string">"aab"</span>))</span><br></pre></td></tr></tbody></table></figure><h2 id="fibonacci-number"><a href="#fibonacci-number" class="headerlink" title="fibonacci-number"></a>fibonacci-number</h2><p>方法一：递归（递归树如下）</p><p><img data-src="/images/algorithm/fibonacci-number.png" alt="fibonacci-number"></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time: 2020/5/14 12:38 </span></span><br><span class="line"><span class="comment"># @Author: GraceKoo</span></span><br><span class="line"><span class="comment"># @File: 509_fibonacci-number.py</span></span><br><span class="line"><span class="comment"># @Desc: https://leetcode-cn.com/problems/fibonacci-number/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fib</span><span class="params">(self, N: int)</span> -&gt; int:</span></span><br><span class="line">        <span class="keyword">if</span> N == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> N == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> self.fib(N<span class="number">-1</span>) + self.fib(N<span class="number">-2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">so = Solution()</span><br><span class="line">print(so.fib(<span class="number">5</span>))</span><br></pre></td></tr></tbody></table></figure><p>递归虽然有简洁的优点，但是递归是函数调用自身，而函数调用是有时间和空间消耗的，每一次函数调用，都需要在内存栈中分配空间以保存参数、返回地址及临时变量，而往栈里压入数据和弹出数据都需要时间。另外，递归中有可能很多计算都是重复的，从而也会对性能产生影响。</p><p>方法二：记忆化自底向上的方法</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time: 2020/5/14 12:38 </span></span><br><span class="line"><span class="comment"># @Author: GraceKoo</span></span><br><span class="line"><span class="comment"># @File: 509_fibonacci-number.py</span></span><br><span class="line"><span class="comment"># @Desc: https://leetcode-cn.com/problems/fibonacci-number/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fib</span><span class="params">(self, N: int)</span> -&gt; int:</span></span><br><span class="line">        <span class="keyword">if</span> N &lt;= <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> N</span><br><span class="line">        f_dict = {<span class="number">0</span>: <span class="number">0</span>, <span class="number">1</span>: <span class="number">1</span>}</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>, N):</span><br><span class="line">            f_dict[i] = f_dict[i - <span class="number">1</span>] + f_dict[i - <span class="number">2</span>]</span><br><span class="line">        <span class="keyword">return</span> f_dict[N - <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">so = Solution()</span><br><span class="line">print(so.fib(<span class="number">4</span>))</span><br></pre></td></tr></tbody></table></figure><h2 id="rectCover"><a href="#rectCover" class="headerlink" title="rectCover"></a>rectCover</h2><p>解题思路：</p><p>类似于青蛙跳台阶,当n=1时，只有一种横向排列的方式。</p><p>当n等于二时，2*2有两种选择，横向或者是竖向。</p><p>当n等于3的时候对于2*3来说,如果选择的是竖向排列，则剩下的就是2*2排列。</p><p>如果选择的是横向,则对于2*n剩下的则只有1*n的一种选择。</p><p>2*n的大矩形就相当于“跳台阶“问题中的台阶，大矩形的长度n相当于台阶的个数n；从左至右的去覆盖，把小矩形竖着放相当于跳一个台阶，把小矩阵横着放相当于跳两个台阶。故：当前n的覆盖种数 = 当前n-1的覆盖总数 + 当前n-2的覆盖总数。即：f (n) = f (n-1) + f (n-2)</p><p><img data-src="/images/algorithm/rectCover.png" alt="rectCover"></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time: 2020/5/27 12:48 </span></span><br><span class="line"><span class="comment"># @Author: GraceKoo</span></span><br><span class="line"><span class="comment"># @File: rectCover.py</span></span><br><span class="line"><span class="comment"># @Desc: https://www.nowcoder.com/practice/72a5a919508a4251859fb2cfb987a0e6?tpId=13&amp;tqId=11163&amp;tPage=1&amp;rp=1&amp;ru=/ta/</span></span><br><span class="line"><span class="comment"># coding-interviews&amp;qru=/ta/coding-interviews/question-ranking</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">rectCover</span><span class="params">(self, number)</span>:</span></span><br><span class="line">        <span class="comment"># write code here</span></span><br><span class="line">        <span class="keyword">if</span> number == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> number == <span class="number">2</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">2</span></span><br><span class="line">        <span class="keyword">return</span> self.rectCover(number<span class="number">-1</span>) + self.rectCover(number<span class="number">-2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">so = Solution()</span><br><span class="line">print(so.rectCover(<span class="number">3</span>))</span><br></pre></td></tr></tbody></table></figure><h1 id="2DMatric"><a href="#2DMatric" class="headerlink" title="2DMatric"></a>2DMatric</h1><h2 id="longest-palindrome"><a href="#longest-palindrome" class="headerlink" title="longest_palindrome"></a>longest_palindrome</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time: 2019/12/17 9:07 上午</span></span><br><span class="line"><span class="comment"># @Author: GraceKoo</span></span><br><span class="line"><span class="comment"># @File: 5_longest_palindrome.py</span></span><br><span class="line"><span class="comment"># @Desc:</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">longestPalindrome</span><span class="params">(self, s: str)</span> -&gt; str:</span></span><br><span class="line">        longest_str = <span class="string">""</span></span><br><span class="line">        longestLen = <span class="number">0</span></span><br><span class="line">        matrics = [[<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(s))] <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(s))]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">0</span>, len(s)):</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, j + <span class="number">1</span>):</span><br><span class="line">                <span class="keyword">if</span> j - i &lt;= <span class="number">1</span>:</span><br><span class="line">                    <span class="keyword">if</span> s[i] == s[j]:</span><br><span class="line">                        matrics[i][j] = <span class="number">1</span></span><br><span class="line">                        <span class="keyword">if</span> longestLen &lt; j - i + <span class="number">1</span>:</span><br><span class="line">                            longestLen = j - i + <span class="number">1</span></span><br><span class="line">                            longest_str = s[i : j + <span class="number">1</span>]</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">if</span> s[i] == s[j] <span class="keyword">and</span> matrics[i + <span class="number">1</span>][j - <span class="number">1</span>]:</span><br><span class="line">                        matrics[i][j] = <span class="number">1</span></span><br><span class="line">                        <span class="keyword">if</span> longestLen &lt; j - i + <span class="number">1</span>:</span><br><span class="line">                            longestLen = j - i + <span class="number">1</span></span><br><span class="line">                            longest_str = s[i : j + <span class="number">1</span>]</span><br><span class="line">        <span class="keyword">return</span> longest_str</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s = <span class="string">"abccba"</span></span><br><span class="line">so = Solution()</span><br><span class="line">print(so.longestPalindrome(s))</span><br></pre></td></tr></tbody></table></figure><h2 id="rotate-image"><a href="#rotate-image" class="headerlink" title="rotate-image"></a>rotate-image</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time: 2020/2/19 15:23</span></span><br><span class="line"><span class="comment"># @Author: GraceKoo</span></span><br><span class="line"><span class="comment"># @File: 48_rotate-image.py</span></span><br><span class="line"><span class="comment"># @Desc:https://leetcode-cn.com/problems/rotate-image/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">ero_matrics</span><span class="params">(self, matric)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> matric:</span><br><span class="line">            <span class="keyword">return</span> matric</span><br><span class="line">        <span class="comment"># 先转置</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(matric)):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(i, len(matric)):</span><br><span class="line">                tmp = matric[i][j]</span><br><span class="line">                matric[i][j] = matric[j][i]</span><br><span class="line">                matric[j][i] = tmp</span><br><span class="line">        <span class="comment"># 再反转每一行</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(matric)):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">0</span>, len(matric) // <span class="number">2</span>):</span><br><span class="line">                tmp = matric[i][j]</span><br><span class="line">                matric[i][j] = matric[i][len(matric) - j - <span class="number">1</span>]</span><br><span class="line">                matric[i][len(matric) - j - <span class="number">1</span>] = tmp</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> matric</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">so = Solution()</span><br><span class="line">print(so.ero_matrics([[<span class="number">4</span>, <span class="number">8</span>, <span class="number">12</span>, <span class="number">16</span>],</span><br><span class="line">                      [<span class="number">3</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">15</span>],</span><br><span class="line">                      [<span class="number">2</span>, <span class="number">6</span>, <span class="number">10</span>, <span class="number">14</span>],</span><br><span class="line">                      [<span class="number">1</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">13</span>]]))</span><br><span class="line">print(so.ero_matrics([</span><br><span class="line">                      [<span class="number">3</span>, <span class="number">6</span>, <span class="number">9</span>],</span><br><span class="line">                      [<span class="number">2</span>, <span class="number">5</span>, <span class="number">8</span>],</span><br><span class="line">                      [<span class="number">1</span>, <span class="number">4</span>, <span class="number">7</span>]]))</span><br></pre></td></tr></tbody></table></figure><h2 id="spiral-matrix"><a href="#spiral-matrix" class="headerlink" title="spiral-matrix"></a>spiral-matrix</h2><p>解题思路来源于leetcode官网：按层模拟（注：<a href="https://leetcode-cn.com/problems/spiral-matrix/solution/luo-xuan-ju-zhen-by-leetcode/" target="_blank" rel="noopener">参考链接</a>）</p><p><img data-src="/images/algorithm/leetcode-54.png" alt="leetcode-54"></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time: 2020/2/26 14:27</span></span><br><span class="line"><span class="comment"># @Author: GraceKoo</span></span><br><span class="line"><span class="comment"># @File: 54_spiral-matrix.py</span></span><br><span class="line"><span class="comment"># @Desc:https://leetcode-cn.com/problems/spiral-matrix/</span></span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> List</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">spiralOrder</span><span class="params">(self, matrix: List[List[int]])</span> -&gt; List[int]:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">spiral_matrix</span><span class="params">(r1, c1, r2, c2)</span>:</span></span><br><span class="line">            <span class="keyword">for</span> c <span class="keyword">in</span> range(c1, c2 + <span class="number">1</span>):</span><br><span class="line">                <span class="keyword">yield</span> r1, c</span><br><span class="line">            <span class="keyword">for</span> r <span class="keyword">in</span> range(r1 + <span class="number">1</span>, r2 + <span class="number">1</span>):</span><br><span class="line">                <span class="keyword">yield</span> r, c2</span><br><span class="line">            <span class="keyword">if</span> r1 &lt; r2 <span class="keyword">and</span> c1 &lt; c2:</span><br><span class="line">                <span class="keyword">for</span> c <span class="keyword">in</span> range(c2 - <span class="number">1</span>, c1, <span class="number">-1</span>):</span><br><span class="line">                    <span class="keyword">yield</span> r2, c</span><br><span class="line">                <span class="keyword">for</span> r <span class="keyword">in</span> range(r2, r1, <span class="number">-1</span>):</span><br><span class="line">                    <span class="keyword">yield</span> r, c1</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> matrix:</span><br><span class="line">            <span class="keyword">return</span> []</span><br><span class="line">        output = []</span><br><span class="line">        r1, r2 = <span class="number">0</span>, len(matrix) - <span class="number">1</span></span><br><span class="line">        c1, c2 = <span class="number">0</span>, len(matrix[<span class="number">0</span>]) - <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> r1 &lt;= r2 <span class="keyword">and</span> c1 &lt;= c2:</span><br><span class="line">            <span class="keyword">for</span> r, c <span class="keyword">in</span> spiral_matrix(r1, c1, r2, c2):</span><br><span class="line">                output.append(matrix[r][c])</span><br><span class="line">            r1 += <span class="number">1</span></span><br><span class="line">            r2 -= <span class="number">1</span></span><br><span class="line">            c1 += <span class="number">1</span></span><br><span class="line">            c2 -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> output</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">so = Solution()</span><br><span class="line">print(so.spiralOrder([</span><br><span class="line">    [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">    [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>],</span><br><span class="line">    [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line">]))</span><br></pre></td></tr></tbody></table></figure><h2 id="spiral-matrix-ii"><a href="#spiral-matrix-ii" class="headerlink" title="spiral-matrix-ii"></a>spiral-matrix-ii</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time: 2020/3/1 18:14</span></span><br><span class="line"><span class="comment"># @Author: GraceKoo</span></span><br><span class="line"><span class="comment"># @File: 59_spiral-matrix-ii.py</span></span><br><span class="line"><span class="comment"># @Desc:https://leetcode-cn.com/problems/spiral-matrix-ii/</span></span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> List</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">generateMatrix</span><span class="params">(self, n: int)</span> -&gt; List[List[int]]:</span></span><br><span class="line">        <span class="keyword">if</span> n &lt; <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> []</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">spiral_matrix</span><span class="params">(r1, c1, r2, c2)</span>:</span></span><br><span class="line">            <span class="keyword">for</span> c <span class="keyword">in</span> range(c1, c2 + <span class="number">1</span>):</span><br><span class="line">                <span class="keyword">yield</span> r1, c</span><br><span class="line">            <span class="keyword">for</span> r <span class="keyword">in</span> range(r1 + <span class="number">1</span>, r2 + <span class="number">1</span>):</span><br><span class="line">                <span class="keyword">yield</span> r, c2</span><br><span class="line">            <span class="keyword">if</span> r1 &lt; r2 <span class="keyword">and</span> c1 &lt; c2:</span><br><span class="line">                <span class="keyword">for</span> c <span class="keyword">in</span> range(c2 - <span class="number">1</span>, c1, <span class="number">-1</span>):</span><br><span class="line">                    <span class="keyword">yield</span> r2, c</span><br><span class="line">                <span class="keyword">for</span> r <span class="keyword">in</span> range(r2, r1, <span class="number">-1</span>):</span><br><span class="line">                    <span class="keyword">yield</span> r, c1</span><br><span class="line"></span><br><span class="line">        output_matrix = [[<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(n)] <span class="keyword">for</span> i <span class="keyword">in</span> range(n)]</span><br><span class="line">        r1, r2 = <span class="number">0</span>, len(output_matrix) - <span class="number">1</span></span><br><span class="line">        c1, c2 = <span class="number">0</span>, len(output_matrix[<span class="number">0</span>]) - <span class="number">1</span></span><br><span class="line">        number = <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> r1 &lt;= r2 <span class="keyword">and</span> c1 &lt;= c2:</span><br><span class="line">            <span class="keyword">for</span> r, c <span class="keyword">in</span> spiral_matrix(r1, c1, r2, c2):</span><br><span class="line">                output_matrix[r][c] = number</span><br><span class="line">                number += <span class="number">1</span></span><br><span class="line">            r1 += <span class="number">1</span></span><br><span class="line">            r2 -= <span class="number">1</span></span><br><span class="line">            c1 += <span class="number">1</span></span><br><span class="line">            c2 -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> output_matrix</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">so = Solution()</span><br><span class="line">print(so.generateMatrix(<span class="number">3</span>))</span><br></pre></td></tr></tbody></table></figure><h2 id="set-matrix-zeroes"><a href="#set-matrix-zeroes" class="headerlink" title="set-matrix-zeroes"></a>set-matrix-zeroes</h2><p>解题思路如下：</p><blockquote><p>matrics第一行与第一列用于存储对应行或列是否有0</p><p>flag用于存储第一行或者第一列是否存在0</p></blockquote><ul><li>首先遍历第一行与第一列是否存在0，若存在将flag置为0</li><li>再遍历其他行，若存在0，将相应第一行和第一列的元素置为0</li><li>再次遍历第一行与第一列，将0所在的行和列中的所有元素置为0</li><li>最后，若flag为0，则把第一行和第一列的所有元素置为0。否则直接退出</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time: 2020/3/17 12:08</span></span><br><span class="line"><span class="comment"># @Author: GraceKoo</span></span><br><span class="line"><span class="comment"># @File: 73_set-matrix-zeroes.py</span></span><br><span class="line"><span class="comment"># @Desc:https://leetcode-cn.com/problems/set-matrix-zeroes/</span></span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> List</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setZeroes</span><span class="params">(self, matrix: List[List[int]])</span> -&gt; List:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Do not return anything, modify matrix in-place instead.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        flag_col = <span class="literal">False</span></span><br><span class="line">        rows = len(matrix)</span><br><span class="line">        cols = len(matrix[<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">for</span> row <span class="keyword">in</span> range(rows):</span><br><span class="line">            <span class="keyword">if</span> matrix[row][<span class="number">0</span>] == <span class="number">0</span>:</span><br><span class="line">                flag_col = <span class="literal">True</span></span><br><span class="line">            <span class="keyword">for</span> col <span class="keyword">in</span> range(<span class="number">1</span>, cols):</span><br><span class="line">                <span class="keyword">if</span> matrix[row][col] == <span class="number">0</span>:</span><br><span class="line">                    matrix[row][<span class="number">0</span>] = matrix[<span class="number">0</span>][col] = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> row <span class="keyword">in</span> range(rows - <span class="number">1</span>, <span class="number">-1</span>, <span class="number">-1</span>):</span><br><span class="line">            <span class="keyword">for</span> col <span class="keyword">in</span> range(cols - <span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>):</span><br><span class="line">                <span class="keyword">if</span> matrix[row][<span class="number">0</span>] == <span class="number">0</span> <span class="keyword">or</span> matrix[<span class="number">0</span>][col] == <span class="number">0</span>:</span><br><span class="line">                    matrix[row][col] = <span class="number">0</span></span><br><span class="line">            <span class="keyword">if</span> flag_col:</span><br><span class="line">                matrix[row][<span class="number">0</span>] = <span class="number">0</span></span><br><span class="line">        <span class="keyword">return</span> matrix</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">so = Solution()</span><br><span class="line">print(so.setZeroes([</span><br><span class="line">    [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>],</span><br><span class="line">    [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">2</span>],</span><br><span class="line">    [<span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">5</span>]</span><br><span class="line">]))</span><br></pre></td></tr></tbody></table></figure><h2 id="interview-1"><a href="#interview-1" class="headerlink" title="interview_1"></a>interview_1</h2><p>如果从左上角开始找，“从上到下”和“从左到右”，遇到的数字都是逐渐增大的；</p><p>如果从右下角开始找，“从下到上”和“从右到左”，遇到的数字都是逐渐减小的；</p><p>所以，可以从左下或者右上开始搜索，以保证不走“回头路”</p><p><img data-src="/images/algorithm/er-wei-shu-zu-zhong-de-cha-zhao-lcof.png" alt="er-wei-shu-zu-zhong-de-cha-zhao-lcof"></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time: 2020/5/7 12:31 </span></span><br><span class="line"><span class="comment"># @Author: GraceKoo</span></span><br><span class="line"><span class="comment"># @File: interview.py</span></span><br><span class="line"><span class="comment"># @Desc: https://leetcode-cn.com/problems/er-wei-shu-zu-zhong-de-cha-zhao-lcof/</span></span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> List</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findNumberIn2DArray</span><span class="params">(self, matrix: List[List[int]], target: int)</span> -&gt; bool:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> matrix <span class="keyword">or</span> target <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">        rows = len(matrix)</span><br><span class="line">        cols = len(matrix[<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">if</span> rows == <span class="number">0</span> <span class="keyword">or</span> cols == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 从右上角开始搜索</span></span><br><span class="line">        x = <span class="number">0</span></span><br><span class="line">        y = cols - <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> x &lt; rows <span class="keyword">and</span> y &gt;= <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">if</span> matrix[x][y] == target:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            <span class="comment"># 从matrix[x][y]的左下角部分进行搜索</span></span><br><span class="line">            <span class="keyword">if</span> matrix[x][y] &gt; target:</span><br><span class="line">                y -= <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                x += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">so = Solution()</span><br><span class="line">print(so.findNumberIn2DArray([</span><br><span class="line">  [<span class="number">1</span>,   <span class="number">4</span>,  <span class="number">7</span>, <span class="number">11</span>, <span class="number">15</span>],</span><br><span class="line">  [<span class="number">2</span>,   <span class="number">5</span>,  <span class="number">8</span>, <span class="number">12</span>, <span class="number">19</span>],</span><br><span class="line">  [<span class="number">3</span>,   <span class="number">6</span>,  <span class="number">9</span>, <span class="number">16</span>, <span class="number">22</span>],</span><br><span class="line">  [<span class="number">10</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">17</span>, <span class="number">24</span>],</span><br><span class="line">  [<span class="number">18</span>, <span class="number">21</span>, <span class="number">23</span>, <span class="number">26</span>, <span class="number">30</span>]</span><br><span class="line">], <span class="number">21</span></span><br><span class="line">))</span><br></pre></td></tr></tbody></table></figure><h1 id="Regular-Expression"><a href="#Regular-Expression" class="headerlink" title="Regular Expression"></a>Regular Expression</h1><h2 id="string-to-integer-atoi"><a href="#string-to-integer-atoi" class="headerlink" title="string-to-integer-atoi"></a>string-to-integer-atoi</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time: 2019/12/20 1:20 下午</span></span><br><span class="line"><span class="comment"># @Author: GraceKoo</span></span><br><span class="line"><span class="comment"># @File: 8_string-to-integer-atoi.py</span></span><br><span class="line"><span class="comment"># @Desc: https://leetcode-cn.com/problems/string-to-integer-atoi/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">myAtoi</span><span class="params">(self, s: str)</span> -&gt; int:</span></span><br><span class="line">        s = s.strip()</span><br><span class="line">        <span class="keyword">if</span> len(s) &gt; <span class="number">0</span>:</span><br><span class="line">            pattern = <span class="string">r"[+-]?\d+"</span></span><br><span class="line">            number = re.match(pattern, s)</span><br><span class="line">            <span class="keyword">if</span> number:</span><br><span class="line">                number = int(number[<span class="number">0</span>])</span><br><span class="line">                <span class="keyword">if</span> number &lt; -pow(<span class="number">2</span>, <span class="number">31</span>):</span><br><span class="line">                    <span class="keyword">return</span> int(-pow(<span class="number">2</span>, <span class="number">31</span>))</span><br><span class="line">                <span class="keyword">elif</span> number &gt; pow(<span class="number">2</span>, <span class="number">31</span>) - <span class="number">1</span>:</span><br><span class="line">                    <span class="keyword">return</span> int(pow(<span class="number">2</span>, <span class="number">31</span>) - <span class="number">1</span>)</span><br><span class="line">                <span class="keyword">return</span> number</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">so = Solution()</span><br><span class="line">print(so.myAtoi(<span class="string">"+123"</span>))</span><br></pre></td></tr></tbody></table></figure><h2 id="regular-expression-matchin"><a href="#regular-expression-matchin" class="headerlink" title="regular-expression-matchin"></a>regular-expression-matchin</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time: 2019/12/21 7:46 下午</span></span><br><span class="line"><span class="comment"># @Author: GraceKoo</span></span><br><span class="line"><span class="comment"># @File: 10_regular-expression-matchin.py</span></span><br><span class="line"><span class="comment"># @Desc:https://leetcode-cn.com/problems/regular-expression-matching/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isMatch</span><span class="params">(self, s, p)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> p:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">not</span> s</span><br><span class="line">        match = s <span class="keyword">and</span> p[<span class="number">0</span>] <span class="keyword">in</span> [s[<span class="number">0</span>], <span class="string">"."</span>]  <span class="comment"># p[0] == s[0] or == "."</span></span><br><span class="line">        <span class="keyword">if</span> len(p) &gt; <span class="number">1</span> <span class="keyword">and</span> p[<span class="number">1</span>] == <span class="string">"*"</span>:  <span class="comment"># p[1] == "*"</span></span><br><span class="line">            <span class="keyword">return</span> self.isMatch(s, p[<span class="number">2</span>:]) <span class="keyword">or</span> (match <span class="keyword">and</span> self.isMatch(s[<span class="number">1</span>:], p))</span><br><span class="line">        <span class="keyword">return</span> match <span class="keyword">and</span> self.isMatch(s[<span class="number">1</span>:], p[<span class="number">1</span>:])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">so = Solution()</span><br><span class="line"><span class="keyword">assert</span> so.isMatch(<span class="string">"mississippi"</span>, <span class="string">"mis*is*ip*."</span>)</span><br></pre></td></tr></tbody></table></figure><h2 id="valid-number"><a href="#valid-number" class="headerlink" title="valid-number"></a>valid-number</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time: 2020/3/8 00:41</span></span><br><span class="line"><span class="comment"># @Author: GraceKoo</span></span><br><span class="line"><span class="comment"># @File: 65_valid-number.py</span></span><br><span class="line"><span class="comment"># @Desc:https://leetcode-cn.com/problems/valid-number/</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isNumber</span><span class="params">(self, s: str)</span> -&gt; bool:</span></span><br><span class="line">        <span class="comment"># return bool(re.match(r' *[+-]?([0-9]+(\.[0-9]*)?|\.[0-9]+)(e[+-]?[0-9]+)? *$', s))</span></span><br><span class="line">        s = s.strip()</span><br><span class="line">        <span class="comment"># 去除s两边的空白符</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> s:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="comment"># 去除"+"、"-"</span></span><br><span class="line">        <span class="keyword">if</span> s[<span class="number">0</span>] <span class="keyword">in</span> [<span class="string">"+"</span>, <span class="string">"-"</span>]:</span><br><span class="line">            s = s[<span class="number">1</span>:]</span><br><span class="line">        <span class="comment"># 判断是否含有e</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">"e"</span> <span class="keyword">in</span> s:</span><br><span class="line">            s_list = s.split(<span class="string">"e"</span>)</span><br><span class="line">            <span class="comment"># 说明有两个e</span></span><br><span class="line">            <span class="keyword">if</span> len(s_list) &gt; <span class="number">2</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            <span class="comment"># 去掉e前面的"."</span></span><br><span class="line">            s_list[<span class="number">0</span>] = s_list[<span class="number">0</span>].replace(<span class="string">"."</span>, <span class="string">""</span>, <span class="number">1</span>)</span><br><span class="line">            <span class="comment"># 去掉e后面的"+、"-"</span></span><br><span class="line">            <span class="keyword">if</span> len(s_list[<span class="number">1</span>]) &gt; <span class="number">0</span> <span class="keyword">and</span> s_list[<span class="number">1</span>][<span class="number">0</span>] <span class="keyword">in</span> [<span class="string">"+"</span>, <span class="string">"-"</span>]:</span><br><span class="line">                s_list[<span class="number">1</span>] = s_list[<span class="number">1</span>].replace(s_list[<span class="number">1</span>][<span class="number">0</span>], <span class="string">""</span>, <span class="number">1</span>)</span><br><span class="line">            <span class="comment"># 判断是否为数字</span></span><br><span class="line">            <span class="keyword">if</span> s_list[<span class="number">0</span>].isnumeric() <span class="keyword">and</span> s_list[<span class="number">1</span>].isnumeric():</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            s = s.replace(<span class="string">"."</span>, <span class="string">""</span>, <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">if</span> s.isnumeric():</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">so = Solution()</span><br><span class="line">print(so.isNumber(<span class="string">"53.5e93"</span>))</span><br></pre></td></tr></tbody></table></figure><h1 id="Stack"><a href="#Stack" class="headerlink" title="Stack"></a>Stack</h1><h2 id="valid-parentheses"><a href="#valid-parentheses" class="headerlink" title="valid-parentheses"></a>valid-parentheses</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time: 2019/12/26 11:53 下午</span></span><br><span class="line"><span class="comment"># @Author: GraceKoo</span></span><br><span class="line"><span class="comment"># @File: 20_valid-parentheses.py</span></span><br><span class="line"><span class="comment"># @Desc:</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isValid</span><span class="params">(self, s: str)</span> -&gt; bool:</span></span><br><span class="line">        stack = []</span><br><span class="line">        dic = {<span class="string">"{"</span>: <span class="string">"}"</span>, <span class="string">"["</span>: <span class="string">"]"</span>, <span class="string">"("</span>: <span class="string">")"</span>}</span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> s:</span><br><span class="line">            <span class="keyword">if</span> c <span class="keyword">in</span> dic:</span><br><span class="line">                stack.append(c)</span><br><span class="line">            <span class="keyword">elif</span> dic[stack.pop()] != c:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> len(stack) == <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">so = Solution()</span><br><span class="line">print(so.isValid(<span class="string">"()[]{}"</span>))</span><br></pre></td></tr></tbody></table></figure><h2 id="largest-rectangle-in-histogram"><a href="#largest-rectangle-in-histogram" class="headerlink" title="largest-rectangle-in-histogram"></a>largest-rectangle-in-histogram</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time: 2020/3/29 16:24 </span></span><br><span class="line"><span class="comment"># @Author: GraceKoo</span></span><br><span class="line"><span class="comment"># @File: 84_largest-rectangle-in-histogram.py</span></span><br><span class="line"><span class="comment"># @Desc:https://leetcode-cn.com/problems/largest-rectangle-in-histogram/</span></span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> List</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">largestRectangleArea</span><span class="params">(self, heights: List[int])</span> -&gt; int:</span></span><br><span class="line">        stack = []</span><br><span class="line">        res = <span class="number">0</span></span><br><span class="line">        heights = [<span class="number">0</span>] + heights + [<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(heights)):</span><br><span class="line">            <span class="keyword">while</span> stack <span class="keyword">and</span> heights[i] &lt; heights[stack[<span class="number">-1</span>]]:</span><br><span class="line">                tmp = stack.pop()</span><br><span class="line">                res = max(res, (i - stack[<span class="number">-1</span>] - <span class="number">1</span>) * heights[tmp])</span><br><span class="line">            stack.append(i)</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">so = Solution()</span><br><span class="line">print(so.largestRectangleArea([<span class="number">2</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">3</span>]))</span><br></pre></td></tr></tbody></table></figure><h2 id="maximal-rectangle"><a href="#maximal-rectangle" class="headerlink" title="maximal-rectangle"></a>maximal-rectangle</h2><p>注：<a href="https://leetcode-cn.com/problems/maximal-rectangle/solution/xiang-xi-tong-su-de-si-lu-fen-xi-duo-jie-fa-by-1-8/" target="_blank" rel="noopener">参考链接</a></p><p><img data-src="/images/algorithm/leetcode-85.png" alt="leetcode-85"></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time: 2020/3/30 22:22 </span></span><br><span class="line"><span class="comment"># @Author: GraceKoo</span></span><br><span class="line"><span class="comment"># @File: 85_maximal-rectangle.py</span></span><br><span class="line"><span class="comment"># @Desc:https://leetcode-cn.com/problems/maximal-rectangle/</span></span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> List</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maximalRectangle</span><span class="params">(self, matrix: List[List[str]])</span> -&gt; int:</span></span><br><span class="line">        max_area = <span class="number">0</span></span><br><span class="line">        dp = [<span class="number">0</span>] * len(matrix[<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">for</span> row <span class="keyword">in</span> range(<span class="number">0</span>, len(matrix)):</span><br><span class="line">            <span class="keyword">for</span> col <span class="keyword">in</span> range(<span class="number">0</span>, len(matrix[<span class="number">0</span>])):</span><br><span class="line">                dp[col] = dp[col] + <span class="number">1</span> <span class="keyword">if</span> matrix[row][col] == <span class="string">"1"</span> <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">            max_area = max(max_area, self.largestRectangleArea(dp))</span><br><span class="line">        <span class="keyword">return</span> max_area</span><br><span class="line"></span><br><span class="line">    <span class="comment"># from 84_largest-rectangle-in-histogram</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">largestRectangleArea</span><span class="params">(self, heights: List[int])</span> -&gt; int:</span></span><br><span class="line">        stack = []</span><br><span class="line">        res = <span class="number">0</span></span><br><span class="line">        heights = [<span class="number">0</span>] + heights + [<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(heights)):</span><br><span class="line">            <span class="keyword">while</span> stack <span class="keyword">and</span> heights[i] &lt; heights[stack[<span class="number">-1</span>]]:</span><br><span class="line">                tmp = stack.pop()</span><br><span class="line">                res = max(res, (i - stack[<span class="number">-1</span>] - <span class="number">1</span>) * heights[tmp])</span><br><span class="line">            stack.append(i)</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">so = Solution()</span><br><span class="line">print(so.maximalRectangle([</span><br><span class="line">    [<span class="string">"1"</span>, <span class="string">"0"</span>, <span class="string">"1"</span>, <span class="string">"0"</span>, <span class="string">"0"</span>],</span><br><span class="line">    [<span class="string">"1"</span>, <span class="string">"0"</span>, <span class="string">"1"</span>, <span class="string">"1"</span>, <span class="string">"1"</span>],</span><br><span class="line">    [<span class="string">"1"</span>, <span class="string">"1"</span>, <span class="string">"1"</span>, <span class="string">"1"</span>, <span class="string">"1"</span>],</span><br><span class="line">    [<span class="string">"1"</span>, <span class="string">"0"</span>, <span class="string">"0"</span>, <span class="string">"1"</span>, <span class="string">"0"</span>]</span><br><span class="line">]))</span><br></pre></td></tr></tbody></table></figure><h2 id="implement-queue-using-stacks"><a href="#implement-queue-using-stacks" class="headerlink" title="implement-queue-using-stacks"></a>implement-queue-using-stacks</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time: 2020/5/12 12:40 </span></span><br><span class="line"><span class="comment"># @Author: GraceKoo</span></span><br><span class="line"><span class="comment"># @File: 232_implement-queue-using-stacks.py</span></span><br><span class="line"><span class="comment"># @Desc: https://leetcode-cn.com/problems/implement-queue-using-stacks/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyQueue</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Initialize your data structure here.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self.stack1 = []</span><br><span class="line">        self.stack2 = []</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">push</span><span class="params">(self, x: int)</span> -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Push element x to the back of queue.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self.stack1.append(x)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pop</span><span class="params">(self)</span> -&gt; int:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Removes the element from in front of queue and returns that element.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> self.empty():</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">if</span> len(self.stack2) == <span class="number">0</span>:</span><br><span class="line">            <span class="comment"># 把stack1里面的元素全部pop至stack2</span></span><br><span class="line">            <span class="keyword">while</span> len(self.stack1) != <span class="number">0</span>:</span><br><span class="line">                self.stack2.append(self.stack1.pop())</span><br><span class="line">        <span class="keyword">return</span> self.stack2.pop()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">peek</span><span class="params">(self)</span> -&gt; int:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Get the front element.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> self.empty():</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">if</span> len(self.stack2) == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">while</span> len(self.stack1) != <span class="number">0</span>:</span><br><span class="line">                self.stack2.append(self.stack1.pop())</span><br><span class="line">        <span class="keyword">return</span> self.stack2[<span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">empty</span><span class="params">(self)</span> -&gt; bool:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Returns whether the queue is empty.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> len(self.stack1) == <span class="number">0</span> <span class="keyword">and</span> len(self.stack2) == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Your MyQueue object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"># obj = MyQueue()</span></span><br><span class="line"><span class="comment"># obj.push(x)</span></span><br><span class="line"><span class="comment"># param_2 = obj.pop()</span></span><br><span class="line"><span class="comment"># param_3 = obj.peek()</span></span><br><span class="line"><span class="comment"># param_4 = obj.empty()</span></span><br></pre></td></tr></tbody></table></figure><h2 id="interview-20"><a href="#interview-20" class="headerlink" title="interview_20"></a>interview_20</h2><p>解题思路：除了一个常规列表实现栈的操作外，再开一个<strong>辅助栈</strong>用于保存当前的最小信息：</p><ul><li>入栈操作：当辅助栈为空或者新元素小于等于辅助栈顶元素时，辅助栈入栈；否则无视</li><li>出栈操作：当常规栈中待出栈的元素等于辅助栈顶元素时，辅助栈出栈一个元素，代表当前的最小值出队或者次数减1</li><li>栈顶操作：仅需从常规栈顶取元素即可</li><li>最小值操作：因为辅助栈中维护的都是当前状态下的最小值，所以从辅助栈顶取元素即可</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time: 2020/6/7 21:36 </span></span><br><span class="line"><span class="comment"># @Author: GraceKoo</span></span><br><span class="line"><span class="comment"># @File: interview_20.py</span></span><br><span class="line"><span class="comment"># @Desc: https://leetcode-cn.com/problems/</span></span><br><span class="line"><span class="comment"># bao-han-minhan-shu-de-zhan-lcof/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MinStack</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        initialize your data structure here.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self.stack = []</span><br><span class="line">        self.mins = []</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">push</span><span class="params">(self, x: int)</span> -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        self.stack.append(x)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.mins <span class="keyword">or</span> x &lt;= self.mins[<span class="number">-1</span>]:</span><br><span class="line">            self.mins.append(x)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pop</span><span class="params">(self)</span> -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.stack:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        x = self.stack.pop()</span><br><span class="line">        <span class="keyword">if</span> self.mins <span class="keyword">and</span> self.mins[<span class="number">-1</span>] == x:</span><br><span class="line">            self.mins.pop()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">top</span><span class="params">(self)</span> -&gt; int:</span></span><br><span class="line">        <span class="keyword">return</span> self.stack <span class="keyword">and</span> self.stack[<span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">min</span><span class="params">(self)</span> -&gt; int:</span></span><br><span class="line">        <span class="keyword">return</span> self.mins <span class="keyword">and</span> self.mins[<span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Your MinStack object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"># obj = MinStack()</span></span><br><span class="line"><span class="comment"># obj.push(x)</span></span><br><span class="line"><span class="comment"># obj.pop()</span></span><br><span class="line"><span class="comment"># param_3 = obj.top()</span></span><br><span class="line"><span class="comment"># param_4 = obj.min()</span></span><br></pre></td></tr></tbody></table></figure><h2 id="interview-21"><a href="#interview-21" class="headerlink" title="interview_21"></a>interview_21</h2><p><a href="https://leetcode-cn.com/problems/zhan-de-ya-ru-dan-chu-xu-lie-lcof/solution/tan-xin-by-z1m/" target="_blank" rel="noopener">解题思路</a></p><p>我们使用一个<strong>辅助栈</strong> 来模拟该操作。将 pushed 数组中的每个数依次入栈，同时判断这个数是不是 popped 数组中下一个要 pop 的值，如果是就把它 pop 出来。最后检查栈是否为空。</p><p>算法</p><ul><li><p>初始化栈 stack，j = 0；</p></li><li><p>遍历 pushed 中的元素 x；</p><ul><li>当 j &lt; popped.size() 且栈顶元素等于 popped[j]：弹出栈顶元素；j += 1；</li></ul></li><li><p>如果栈为空，返回 True，否则返回 False。</p></li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> List</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">validateStackSequences</span><span class="params">(self, pushed: List[int], popped: List[int])</span> -&gt; bool:</span></span><br><span class="line">        i_pop = <span class="number">0</span></span><br><span class="line">        stack = []</span><br><span class="line">        <span class="keyword">for</span> value <span class="keyword">in</span> pushed:</span><br><span class="line">            stack.append(value)</span><br><span class="line">            <span class="keyword">while</span> stack <span class="keyword">and</span> popped[i_pop] == stack[<span class="number">-1</span>]:</span><br><span class="line">                stack.pop()</span><br><span class="line">                i_pop += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">not</span> stack</span><br><span class="line">      </span><br><span class="line"></span><br><span class="line">so = Solution()</span><br><span class="line">print(so.validateStackSequences(pushed=[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>], popped=[<span class="number">4</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]))</span><br></pre></td></tr></tbody></table></figure><h1 id="BinaryTree"><a href="#BinaryTree" class="headerlink" title="BinaryTree"></a>BinaryTree</h1><h2 id="generate-parentheses"><a href="#generate-parentheses" class="headerlink" title="generate-parentheses"></a>generate-parentheses</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time: 2020/1/2 12:06 下午</span></span><br><span class="line"><span class="comment"># @Author: GraceKoo</span></span><br><span class="line"><span class="comment"># @File: 22_generate-parentheses.py</span></span><br><span class="line"><span class="comment"># @Desc: https://leetcode-cn.com/problems/generate-parentheses/</span></span><br><span class="line"><span class="comment">#       (</span></span><br><span class="line"><span class="comment">#     (    )</span></span><br><span class="line"><span class="comment">#   )        (</span></span><br><span class="line"><span class="comment"># )            )</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">generateParenthesis</span><span class="params">(self, n: int)</span>:</span></span><br><span class="line">        output_li = []</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">find_Parenthesis</span><span class="params">(s=<span class="string">""</span>, left=<span class="number">0</span>, right=<span class="number">0</span>)</span>:</span></span><br><span class="line">            <span class="keyword">if</span> len(s) == <span class="number">2</span> * n:</span><br><span class="line">                output_li.append(s)</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            <span class="keyword">if</span> left &lt; n:</span><br><span class="line">                find_Parenthesis(s + <span class="string">"("</span>, left + <span class="number">1</span>, right)</span><br><span class="line">            <span class="keyword">if</span> right &lt; left:</span><br><span class="line">                find_Parenthesis(s + <span class="string">")"</span>, left, right + <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        find_Parenthesis()</span><br><span class="line">        <span class="keyword">return</span> output_li</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">so = Solution()</span><br><span class="line">print(so.generateParenthesis(<span class="number">2</span>))</span><br></pre></td></tr></tbody></table></figure><h2 id="interview-4"><a href="#interview-4" class="headerlink" title="interview_4"></a>interview_4</h2><p>解题思路:</p><ul><li>前序遍历的第一个节点为根节点</li><li>根据前序遍历确定的根节点，可以在中序遍历中确定其左右子树</li></ul><p><img data-src="/images/algorithm/rebuildbinarytree.png" alt="rebuildbinarytree"></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time: 2020/5/10 22:47 </span></span><br><span class="line"><span class="comment"># @Author: GraceKoo</span></span><br><span class="line"><span class="comment"># @File: interview_4.py</span></span><br><span class="line"><span class="comment"># @Desc: https://leetcode-cn.com/problems/zhong-jian-er-cha-shu-lcof/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        self.val = x</span><br><span class="line">        self.left = <span class="literal">None</span></span><br><span class="line">        self.right = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">buildTree</span><span class="params">(self, preorder, inorder)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> preorder:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        <span class="comment"># 前序遍历第一个肯定为根节点</span></span><br><span class="line">        root_value = preorder[<span class="number">0</span>]</span><br><span class="line">        root = TreeNode(root_value)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 根据中序遍历结果确定根节点的左右子树</span></span><br><span class="line">        root_index = inorder.index(root_value)</span><br><span class="line">        <span class="comment"># 在中序列表中的左右子树</span></span><br><span class="line">        left_in_inorder = inorder[:root_index]</span><br><span class="line">        right_in_inorder = inorder[root_index+<span class="number">1</span>:]</span><br><span class="line">        <span class="comment"># 在前序列表中的左右子树</span></span><br><span class="line">        left_in_preorder = preorder[<span class="number">1</span>:root_index+<span class="number">1</span>]  <span class="comment"># 左子树数量就是root_index的个数</span></span><br><span class="line">        right_in_preorder = preorder[root_index+<span class="number">1</span>:]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 递归创建子树</span></span><br><span class="line">        root.left = self.buildTree(left_in_preorder, left_in_inorder)</span><br><span class="line">        root.right = self.buildTree(right_in_preorder, right_in_inorder)</span><br><span class="line">        <span class="keyword">return</span> root</span><br></pre></td></tr></tbody></table></figure><h2 id="interview-57"><a href="#interview-57" class="headerlink" title="interview_57"></a>interview_57</h2><p>输入一个节点，分析该节点的下一个节点，一共有以下情况：</p><ol><li><p>二叉树为空，则返回空；</p></li><li><p>该节点右孩子存在，则设置一个指针从该节点的右孩子出发，一直沿着指向左子结点的指针找到的叶子节点即为下一个节点；</p></li><li><p>该节点是其父节点的左孩子，则返回父节点；否则继续向上遍历其父节点的父节点，重复之前的判断，返回结果。</p></li></ol><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time: 2020/5/11 19:47 </span></span><br><span class="line"><span class="comment"># @Author: GraceKoo</span></span><br><span class="line"><span class="comment"># @File: interview_57.py</span></span><br><span class="line"><span class="comment"># @Desc: https://www.nowcoder.com/questionTerminal/9023a0c988684a53960365b889ceaf5e</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TreeLinkNode</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        self.val = x</span><br><span class="line">        self.left = <span class="literal">None</span></span><br><span class="line">        self.right = <span class="literal">None</span></span><br><span class="line">        self.next = <span class="literal">None</span> <span class="comment"># 中序遍历序列的下一个节点</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">GetNext</span><span class="params">(self, pNode)</span>:</span></span><br><span class="line">        <span class="comment"># write code here</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> pNode:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        <span class="comment"># 如果当前节点有右节点，则下一个节点为其右节点的最左侧的节点</span></span><br><span class="line">        <span class="keyword">if</span> pNode.right:</span><br><span class="line">            pNode = pNode.right</span><br><span class="line">            <span class="keyword">while</span> pNode.left:</span><br><span class="line">                pNode = pNode.left</span><br><span class="line">            <span class="keyword">return</span> pNode</span><br><span class="line">        <span class="comment"># 如果当前节点没有右节点</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">while</span> pNode.next:</span><br><span class="line">                <span class="comment"># 如果当前节点位于左子树上</span></span><br><span class="line">                <span class="keyword">if</span> pNode.next.left == pNode: <span class="comment"># pNode.next为父节点</span></span><br><span class="line">                    <span class="keyword">return</span> pNode.next</span><br><span class="line">                <span class="comment"># 否则循环找，直到当前节点为其父节点的左子树</span></span><br><span class="line">                pNode = pNode.next</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br></pre></td></tr></tbody></table></figure><h2 id="longest-univalue-path"><a href="#longest-univalue-path" class="headerlink" title="longest-univalue-path"></a>longest-univalue-path</h2><p><a href="https://leetcode-cn.com/problems/longest-univalue-path/solution/zui-chang-tong-zhi-lu-jing-by-leetcode/" target="_blank" rel="noopener">参考链接</a></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time: 2020/5/19 23:48 </span></span><br><span class="line"><span class="comment"># @Author: GraceKoo</span></span><br><span class="line"><span class="comment"># @File: 687_longest-univalue-path.py</span></span><br><span class="line"><span class="comment"># @Desc: https://leetcode-cn.com/problems/longest-univalue-path/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        self.val = x</span><br><span class="line">        self.left = <span class="literal">None</span></span><br><span class="line">        self.right = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">longestUnivaluePath</span><span class="params">(self, root: TreeNode)</span> -&gt; int:</span></span><br><span class="line">        self.ans = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">arrow_length</span><span class="params">(node: TreeNode)</span>:</span></span><br><span class="line">            <span class="keyword">if</span> node <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">            left_length = arrow_length(node.left)</span><br><span class="line">            right_length = arrow_length(node.right)</span><br><span class="line">            left_arrow = right_arrow = <span class="number">0</span></span><br><span class="line">            <span class="keyword">if</span> node.left <span class="keyword">and</span> node.val == node.left.val:</span><br><span class="line">                left_arrow = left_length + <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> node.right <span class="keyword">and</span> node.val == node.right.val:</span><br><span class="line">                right_arrow = right_length + <span class="number">1</span></span><br><span class="line">            self.ans = max(self.ans, left_arrow+right_arrow)</span><br><span class="line">            <span class="keyword">return</span> max(left_arrow, right_arrow)</span><br><span class="line">        arrow_length(root)</span><br><span class="line">        <span class="keyword">return</span> self.ans</span><br></pre></td></tr></tbody></table></figure><h2 id="interview-17"><a href="#interview-17" class="headerlink" title="interview_17"></a>interview_17</h2><p><a href="https://leetcode-cn.com/problems/shu-de-zi-jie-gou-lcof/solution/mian-shi-ti-26-shu-de-zi-jie-gou-xian-xu-bian-li-p/" target="_blank" rel="noopener">解题思路</a></p><p>若树 BB 是树 AA 的子结构，则子结构的根节点可能为树 AA 的任意一个节点。因此，判断树 BB 是否是树 AA 的子结构，需完成以下两步工作：</p><ol><li>先序遍历树 AA 中的每个节点 A。（对应函数 isSubStructure(A, B)）</li><li>判断树 AA 中 以A为根节点的子树 是否包含树 BB 。（对应函数 recur(A, B)）</li></ol><ul><li>isSubStructure(A, B) 函数：</li></ul><p>特例处理： 当 树 AA 为空 或 树 BB 为空 时，直接返回 falsefalse ；<br>返回值： 若树 BB 是树 AA 的子结构，则必满足以下三种情况之一，因此用或 || 连接；<br>以 节点 AA 为根节点的子树 包含树 BB ，对应 recur(A, B)；<br>树 BB 是 树 AA 左子树 的子结构，对应 isSubStructure(A.left, B)；<br>树 BB 是 树 AA 右子树 的子结构，对应 isSubStructure(A.right, B)；</p><ul><li>recur(A, B) 函数：</li></ul><ol><li>终止条件：<br>当节点 BB 为空：说明树 BB 已匹配完成（越过叶子节点），因此返回 truetrue ；<br>当节点 AA 为空：说明已经越过树 AA 叶子节点，即匹配失败，返回 falsefalse ；<br>当节点 AA 和 BB 的值不同：说明匹配失败，返回 falsefalse ；</li><li>返回值：<br>判断 AA 和 BB 的左子节点是否相等，即 recur(A.left, B.left) ；<br>判断 AA 和 BB 的右子节点是否相等，即 recur(A.right, B.right) ；</li></ol><p><img data-src="/images/algorithm/interview_17.png" alt="interview_17"></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time: 2020/6/2 12:32 </span></span><br><span class="line"><span class="comment"># @Author: GraceKoo</span></span><br><span class="line"><span class="comment"># @File: interview_26.py</span></span><br><span class="line"><span class="comment"># @Desc: https://leetcode-cn.com/problems/shu-de-zi-jie-gou-lcof/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        self.val = x</span><br><span class="line">        self.left = <span class="literal">None</span></span><br><span class="line">        self.right = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isSubStructure</span><span class="params">(self, A: TreeNode, B: TreeNode)</span> -&gt; bool:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> A <span class="keyword">or</span> <span class="keyword">not</span> B:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> self.recure(A, B) <span class="keyword">or</span> self.isSubStructure(A.left, B) <span class="keyword">or</span> self.isSubStructure(A.right, B)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">recure</span><span class="params">(self, A: TreeNode, B: TreeNode)</span> -&gt; bool:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> B:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> A <span class="keyword">or</span> A.val != B.val:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> self.recure(A.left, B.left) <span class="keyword">and</span> self.recure(A.right, B.right)</span><br></pre></td></tr></tbody></table></figure><h2 id="invert-binary-tree"><a href="#invert-binary-tree" class="headerlink" title="invert-binary-tree"></a>invert-binary-tree</h2><ul><li>递归解法</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time: 2020/6/3 12:28 </span></span><br><span class="line"><span class="comment"># @Author: GraceKoo</span></span><br><span class="line"><span class="comment"># @File: 226_invert-binary-tree.py</span></span><br><span class="line"><span class="comment"># @Desc: https://leetcode-cn.com/problems/invert-binary-tree/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        self.val = x</span><br><span class="line">        self.left = <span class="literal">None</span></span><br><span class="line">        self.right = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">invertTree</span><span class="params">(self, root: TreeNode)</span> -&gt; TreeNode:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">            <span class="keyword">return</span> root</span><br><span class="line">        left = self.invertTree(root.left)</span><br><span class="line">        right = self.invertTree(root.right)</span><br><span class="line">        root.left = right</span><br><span class="line">        root.right = left</span><br><span class="line">        <span class="keyword">return</span> root</span><br></pre></td></tr></tbody></table></figure><ul><li>迭代解法</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time: 2020/6/3 12:28 </span></span><br><span class="line"><span class="comment"># @Author: GraceKoo</span></span><br><span class="line"><span class="comment"># @File: 226_invert-binary-tree.py</span></span><br><span class="line"><span class="comment"># @Desc: https://leetcode-cn.com/problems/invert-binary-tree/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        self.val = x</span><br><span class="line">        self.left = <span class="literal">None</span></span><br><span class="line">        self.right = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">invertTree</span><span class="params">(self, root: TreeNode)</span> -&gt; TreeNode:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">            <span class="keyword">return</span> root</span><br><span class="line">        queue = [root]</span><br><span class="line">        <span class="comment"># 广度优先搜索</span></span><br><span class="line">        <span class="keyword">while</span> queue:</span><br><span class="line">          temp_root = queue.pop()</span><br><span class="line">          temp_root.left, temp_root.right = temp_root.right, temp_root.left</span><br><span class="line">          <span class="comment"># 继续把子孩子入队</span></span><br><span class="line">          <span class="keyword">if</span> temp_root.left:</span><br><span class="line">            queue.append(temp_root.left)</span><br><span class="line">          <span class="keyword">if</span> temp_root.right:</span><br><span class="line">            queue.append(temp_root.right) </span><br><span class="line">        <span class="keyword">return</span> root</span><br></pre></td></tr></tbody></table></figure><h2 id="interview-22-i"><a href="#interview-22-i" class="headerlink" title="interview_22_i"></a>interview_22_i</h2><p>利用队列，广度优先遍历二叉树</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time: 2020/6/8 19:19 </span></span><br><span class="line"><span class="comment"># @Author: GraceKoo</span></span><br><span class="line"><span class="comment"># @File: interview_32_i.py</span></span><br><span class="line"><span class="comment"># @Desc: https://leetcode-cn.com/problems/cong-shang-dao-xia-da-yin-er-cha-shu-lcof/</span></span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> List</span><br><span class="line"><span class="keyword">import</span> collections</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        self.val = x</span><br><span class="line">        self.left = <span class="literal">None</span></span><br><span class="line">        self.right = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">levelOrder</span><span class="params">(self, root: TreeNode)</span> -&gt; List[int]:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">            <span class="keyword">return</span> []</span><br><span class="line">        res, deque = [], collections.deque()</span><br><span class="line">        deque.append(root)</span><br><span class="line">        <span class="keyword">while</span> deque:</span><br><span class="line">            node = deque.popleft()</span><br><span class="line">            res.append(node.val)</span><br><span class="line">            <span class="keyword">if</span> node.left:</span><br><span class="line">                deque.append(node.left)</span><br><span class="line">            <span class="keyword">if</span> node.right:</span><br><span class="line">                deque.append(node.right)</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></tbody></table></figure><h2 id="interview-22-ii"><a href="#interview-22-ii" class="headerlink" title="interview_22_ii"></a>interview_22_ii</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time: 2020/6/8 19:28 </span></span><br><span class="line"><span class="comment"># @Author: GraceKoo</span></span><br><span class="line"><span class="comment"># @File: interview_32_ii.py</span></span><br><span class="line"><span class="comment"># @Desc: https://leetcode-cn.com/problems/cong-shang-dao-xia-da-yin-er-cha-shu-ii-lcof/</span></span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> List</span><br><span class="line"><span class="keyword">import</span> collections</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        self.val = x</span><br><span class="line">        self.left = <span class="literal">None</span></span><br><span class="line">        self.right = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">levelOrder</span><span class="params">(self, root: TreeNode)</span> -&gt; List[List[int]]:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">            <span class="keyword">return</span> []</span><br><span class="line">        res, deque = [], collections.deque()</span><br><span class="line">        deque.append(root)</span><br><span class="line">        <span class="keyword">while</span> deque:</span><br><span class="line">            tem = []</span><br><span class="line">            <span class="keyword">for</span> _ <span class="keyword">in</span> range(len(deque)):</span><br><span class="line">                node = deque.popleft()</span><br><span class="line">                tem.append(node.val)</span><br><span class="line">                <span class="keyword">if</span> node.left:</span><br><span class="line">                    deque.append(node.left)</span><br><span class="line">                <span class="keyword">if</span> node.right:</span><br><span class="line">                    deque.append(node.right)</span><br><span class="line">            res.append(tem)</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></tbody></table></figure><h2 id="interview-22-iii"><a href="#interview-22-iii" class="headerlink" title="interview_22_iii"></a>interview_22_iii</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time: 2020/6/8 19:48 </span></span><br><span class="line"><span class="comment"># @Author: GraceKoo</span></span><br><span class="line"><span class="comment"># @File: interview_32_iii.py</span></span><br><span class="line"><span class="comment"># @Desc: https://leetcode-cn.com/problems/cong-shang-dao-xia-da-yin-er-cha-shu-iii-lcof/</span></span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> List</span><br><span class="line"><span class="keyword">import</span> collections</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        self.val = x</span><br><span class="line">        self.left = <span class="literal">None</span></span><br><span class="line">        self.right = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">levelOrder</span><span class="params">(self, root: TreeNode)</span> -&gt; List[List[int]]:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">            <span class="keyword">return</span> []</span><br><span class="line">        res, deque = [], collections.deque()</span><br><span class="line">        deque.append(root)</span><br><span class="line">        <span class="keyword">while</span> deque:</span><br><span class="line">            tem = []</span><br><span class="line">            <span class="keyword">for</span> _ <span class="keyword">in</span> range(len(deque)):</span><br><span class="line">                node = deque.popleft()</span><br><span class="line">                tem.append(node.val)</span><br><span class="line">                <span class="keyword">if</span> node.left:</span><br><span class="line">                    deque.append(node.left)</span><br><span class="line">                <span class="keyword">if</span> node.right:</span><br><span class="line">                    deque.append(node.right)</span><br><span class="line">            res.append(tem[::<span class="number">-1</span>] <span class="keyword">if</span> len(res) % <span class="number">2</span> <span class="keyword">else</span> tem)</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></tbody></table></figure><h2 id="interview-23"><a href="#interview-23" class="headerlink" title="interview_23"></a>interview_23</h2><p><a href="https://leetcode-cn.com/problems/er-cha-sou-suo-shu-de-hou-xu-bian-li-xu-lie-lcof/solution/mian-shi-ti-33-er-cha-sou-suo-shu-de-hou-xu-bian-6/" target="_blank" rel="noopener">解题思路</a></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time: 2020/6/15 22:18 </span></span><br><span class="line"><span class="comment"># @Author: GraceKoo</span></span><br><span class="line"><span class="comment"># @File: interview_33.py</span></span><br><span class="line"><span class="comment"># @Desc: https://leetcode-cn.com/problems/</span></span><br><span class="line"><span class="comment"># er-cha-sou-suo-shu-de-hou-xu-bian-li-xu-lie-lcof/</span></span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> List</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">verifyPostorder</span><span class="params">(self, postorder: List[int])</span> -&gt; bool:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> postorder:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">is_post_tree</span><span class="params">(i, j)</span>:</span></span><br><span class="line">            <span class="keyword">if</span> i &gt;= j:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            <span class="comment"># 找寻根结点的左子树，应该都小于根节点</span></span><br><span class="line">            p = i</span><br><span class="line">            <span class="keyword">while</span> postorder[p] &lt; postorder[j]:</span><br><span class="line">                p += <span class="number">1</span></span><br><span class="line">            <span class="comment"># 找寻根结点的右子树，应该都大于根节点</span></span><br><span class="line">            m = p</span><br><span class="line">            <span class="keyword">while</span> postorder[p] &gt; postorder[j]:</span><br><span class="line">                p += <span class="number">1</span></span><br><span class="line">            <span class="keyword">return</span> p == j <span class="keyword">and</span> is_post_tree(postorder[i:m<span class="number">-1</span>]) <span class="keyword">and</span> is_post_tree(postorder[m:j<span class="number">-1</span>])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> is_post_tree(<span class="number">0</span>, len(postorder)<span class="number">-1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">so = Solution()</span><br><span class="line">print(so.verifyPostorder([<span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">5</span>]))</span><br></pre></td></tr></tbody></table></figure><h2 id="interview-24"><a href="#interview-24" class="headerlink" title="interview_24"></a>interview_24</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time: 2020/6/15 23:03 </span></span><br><span class="line"><span class="comment"># @Author: GraceKoo</span></span><br><span class="line"><span class="comment"># @File: interview_34.py</span></span><br><span class="line"><span class="comment"># @Desc: https://leetcode-cn.com/problems/</span></span><br><span class="line"><span class="comment"># er-cha-shu-zhong-he-wei-mou-yi-zhi-de-lu-jing-lcof/solution/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> List</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        self.val = x</span><br><span class="line">        self.left = <span class="literal">None</span></span><br><span class="line">        self.right = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pathSum</span><span class="params">(self, root: TreeNode, sum: int)</span> -&gt; List[List[int]]:</span></span><br><span class="line">        res, path = [], []</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">recur</span><span class="params">(root, tar)</span>:</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            path.append(root.val)</span><br><span class="line">            tar -= root.val</span><br><span class="line">            <span class="keyword">if</span> tar == <span class="number">0</span> <span class="keyword">and</span> <span class="keyword">not</span> root.left <span class="keyword">and</span> <span class="keyword">not</span> root.right:</span><br><span class="line">                res.append(list(path))</span><br><span class="line">            recur(root.left, tar)</span><br><span class="line">            recur(root.right, tar)</span><br><span class="line">            path.pop()</span><br><span class="line">        recur(root, sum)</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></tbody></table></figure><h2 id="interview-26"><a href="#interview-26" class="headerlink" title="interview_26"></a>interview_26</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time: 2020/6/22 22:33 </span></span><br><span class="line"><span class="comment"># @Author: GraceKoo</span></span><br><span class="line"><span class="comment"># @File: interview_36.py</span></span><br><span class="line"><span class="comment"># @Desc: https://leetcode-cn.com/problems/</span></span><br><span class="line"><span class="comment"># er-cha-sou-suo-shu-yu-shuang-xiang-lian-biao-lcof/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string"># Definition for a Node.</span></span><br><span class="line"><span class="string">class Node:</span></span><br><span class="line"><span class="string">    def __init__(self, val, left=None, right=None):</span></span><br><span class="line"><span class="string">        self.val = val</span></span><br><span class="line"><span class="string">        self.left = left</span></span><br><span class="line"><span class="string">        self.right = right</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="comment"># 中序遍历</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">zhongxu</span><span class="params">(self, root)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">            <span class="keyword">return</span> []</span><br><span class="line">        <span class="keyword">return</span> self.zhongxu(root.left) + [root] + self.zhongxu(root.right)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将中序遍历结果进行连接</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">treeToDoublyList</span><span class="params">(self, root: <span class="string">'Node'</span>)</span> -&gt; 'Node':</span></span><br><span class="line">        list_result = self.zhongxu(root)</span><br><span class="line">        <span class="keyword">if</span> len(list_result) == <span class="number">0</span> <span class="keyword">or</span> len(list_result) == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> root</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(list_result) - <span class="number">1</span>):</span><br><span class="line">            list_result[i].right = list_result[i+<span class="number">1</span>]</span><br><span class="line">            list_result[i+<span class="number">1</span>].left = list_result[i]</span><br><span class="line">        <span class="keyword">return</span> list_result[<span class="number">0</span>]</span><br></pre></td></tr></tbody></table></figure><h1 id="Queue"><a href="#Queue" class="headerlink" title="Queue"></a>Queue</h1><h2 id="merge-k-sorted-lists"><a href="#merge-k-sorted-lists" class="headerlink" title="merge-k-sorted-lists"></a>merge-k-sorted-lists</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time: 2020/1/7 9:25 下午</span></span><br><span class="line"><span class="comment"># @Author: GraceKoo</span></span><br><span class="line"><span class="comment"># @File: 23_merge-k-sorted-lists.py</span></span><br><span class="line"><span class="comment"># @Desc:https://leetcode-cn.com/problems/merge-k-sorted-lists/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> queue <span class="keyword">import</span> PriorityQueue</span><br><span class="line"></span><br><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListNode</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        self.val = x</span><br><span class="line">        self.next = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mergeKLists</span><span class="params">(self, lists)</span> -&gt; ListNode:</span></span><br><span class="line">        <span class="comment"># 使用优先队列(堆排序)存储每个list中的第一个节点，由优先队列返回优先级最高（值最低的元素）</span></span><br><span class="line">        head_pre = p = ListNode(<span class="number">0</span>)</span><br><span class="line">        prior_queue = PriorityQueue()</span><br><span class="line">        <span class="keyword">for</span> list_node <span class="keyword">in</span> lists:</span><br><span class="line">            <span class="keyword">if</span> list_node:</span><br><span class="line">                prior_queue.put((list_node.val, list_node))</span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">not</span> prior_queue.empty():</span><br><span class="line">            node_val, node = prior_queue.get()</span><br><span class="line">            p.next = ListNode(node_val)</span><br><span class="line">            p = p.next</span><br><span class="line">            <span class="comment"># 将当前list的头指向list中的下一个节点</span></span><br><span class="line">            node = node.next</span><br><span class="line">            <span class="keyword">if</span> node:</span><br><span class="line">                prior_queue.put((node.val, node))</span><br><span class="line">        <span class="keyword">return</span> head_pre.next</span><br></pre></td></tr></tbody></table></figure><h1 id="Bit-Operation"><a href="#Bit-Operation" class="headerlink" title="Bit Operation"></a>Bit Operation</h1><h2 id="divide-two-integers"><a href="#divide-two-integers" class="headerlink" title="divide-two-integers"></a>divide-two-integers</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time: 2020/1/9 9:11 下午</span></span><br><span class="line"><span class="comment"># @Author: GraceKoo</span></span><br><span class="line"><span class="comment"># @File: 29_divide-two-integers.py</span></span><br><span class="line"><span class="comment"># @Desc:https://leetcode-cn.com/problems/divide-two-integers/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">divide</span><span class="params">(self, dividend: int, divisor: int)</span> -&gt; int:</span></span><br><span class="line">        flag = dividend &lt; <span class="number">0</span> ^ divisor &lt; <span class="number">0</span></span><br><span class="line">        dividend, divisor = abs(dividend), abs(divisor)</span><br><span class="line">        result = <span class="number">0</span></span><br><span class="line">        move_step = <span class="number">0</span></span><br><span class="line">        <span class="comment"># 移动除数直到比被除数大</span></span><br><span class="line">        <span class="keyword">while</span> divisor &lt;= dividend:</span><br><span class="line">            move_step += <span class="number">1</span></span><br><span class="line">            divisor &lt;&lt;= <span class="number">1</span></span><br><span class="line">        <span class="comment"># 移动move_step 次使得 len(divisor) &gt; len(dividend),则 move_step-1 次使得 len(divisor) &gt;  len(dividend)</span></span><br><span class="line">        <span class="keyword">while</span> move_step &gt; <span class="number">0</span>:</span><br><span class="line">            move_step -= <span class="number">1</span></span><br><span class="line">            <span class="comment"># 此时divisor比division大，应该向右移动一位</span></span><br><span class="line">            divisor &gt;&gt;= <span class="number">1</span></span><br><span class="line">            <span class="comment"># 判断是否除尽</span></span><br><span class="line">            <span class="keyword">if</span> dividend &gt;= divisor:</span><br><span class="line">                result += <span class="number">1</span> &lt;&lt; move_step</span><br><span class="line">                dividend -= divisor</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> flag:</span><br><span class="line">            result = -result</span><br><span class="line">        <span class="keyword">return</span> result <span class="keyword">if</span> -(<span class="number">1</span> &lt;&lt; <span class="number">31</span>) &lt;= result &lt;= (<span class="number">1</span> &lt;&lt; <span class="number">31</span>) - <span class="number">1</span> <span class="keyword">else</span> (<span class="number">1</span> &lt;&lt; <span class="number">31</span>) - <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">so = Solution()</span><br><span class="line">print(so.divide(<span class="number">-45</span>, <span class="number">2</span>))</span><br></pre></td></tr></tbody></table></figure><h2 id="gray-code"><a href="#gray-code" class="headerlink" title="gray-code"></a>gray-code</h2><p>解题思路：</p><ul><li>结果是当前head的移位结果 + 已有结果的倒序（注：<a href="https://leetcode-cn.com/problems/gray-code/solution/gray-code-jing-xiang-fan-she-fa-by-jyd/" target="_blank" rel="noopener">参考链接</a>）</li></ul><p><img data-src="/images/algorithm/leetcode-89.png" alt="leetcode-89"></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time: 2020/4/2 23:45</span></span><br><span class="line"><span class="comment"># @Author: GraceKoo</span></span><br><span class="line"><span class="comment"># @File: 89_gray-code.py</span></span><br><span class="line"><span class="comment"># @Desc:https://leetcode-cn.com/problems/gray-code/</span></span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> List</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">grayCode</span><span class="params">(self, n: int)</span> -&gt; List[int]:</span></span><br><span class="line">        res, head = [<span class="number">0</span>], <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(len(res) - <span class="number">1</span>, <span class="number">-1</span>, <span class="number">-1</span>):</span><br><span class="line">                res.append(head + res[j])</span><br><span class="line">            head &lt;&lt;= <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">so = Solution()</span><br><span class="line">print(so.grayCode(<span class="number">2</span>))</span><br></pre></td></tr></tbody></table></figure><h2 id="convert-a-number-to-hexadecimal"><a href="#convert-a-number-to-hexadecimal" class="headerlink" title="convert-a-number-to-hexadecimal"></a>convert-a-number-to-hexadecimal</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time: 2020/4/19 10:54</span></span><br><span class="line"><span class="comment"># @Author: GraceKoo</span></span><br><span class="line"><span class="comment"># @File: 405_convert-a-number-to-hexadecimal.py</span></span><br><span class="line"><span class="comment"># @Desc: https://leetcode-cn.com/problems/convert-a-number-to-hexadecimal/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">toHex</span><span class="params">(self, num: int)</span> -&gt; str:</span></span><br><span class="line">        num &amp;= <span class="number">0xFFFFFFFF</span></span><br><span class="line">        mask = <span class="number">0b1111</span></span><br><span class="line">        s = <span class="string">"0123456789abcdef"</span></span><br><span class="line">        result = <span class="string">""</span></span><br><span class="line">        <span class="keyword">while</span> num &gt; <span class="number">0</span>:</span><br><span class="line">            <span class="comment"># 从num低4位开始，每隔4位依次取结果，并对应到s的相应数字</span></span><br><span class="line">            result += s[num &amp; mask]</span><br><span class="line">            num &gt;&gt;= <span class="number">4</span>  <span class="comment"># num向右移动4位</span></span><br><span class="line">        <span class="keyword">return</span> result[::<span class="number">-1</span>] <span class="keyword">if</span> result <span class="keyword">else</span> <span class="string">"0"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">so = Solution()</span><br><span class="line">print(so.toHex(<span class="number">26</span>))</span><br></pre></td></tr></tbody></table></figure><h2 id="binary-watch"><a href="#binary-watch" class="headerlink" title="binary-watch"></a>binary-watch</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time: 2020/4/20 12:38</span></span><br><span class="line"><span class="comment"># @Author: GraceKoo</span></span><br><span class="line"><span class="comment"># @File: 401_binary-watch.py</span></span><br><span class="line"><span class="comment"># @Desc:https://leetcode-cn.com/problems/binary-watch/</span></span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> List</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">readBinaryWatch</span><span class="params">(self, num: int)</span> -&gt; List[str]:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">count_binary_1</span><span class="params">(i)</span>:</span></span><br><span class="line">            <span class="keyword">return</span> bin(i).count(<span class="string">"1"</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 1~59分钟转换成二进制里面分别有多少1</span></span><br><span class="line">        dict_binary = {i: count_binary_1(i) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">60</span>)}</span><br><span class="line">        res = []</span><br><span class="line">        <span class="keyword">for</span> h <span class="keyword">in</span> range(<span class="number">12</span>):</span><br><span class="line">            <span class="keyword">for</span> m <span class="keyword">in</span> range(<span class="number">60</span>):</span><br><span class="line">                <span class="comment"># hour 与 minutes 亮灯的两者之和与num相等</span></span><br><span class="line">                <span class="keyword">if</span> dict_binary[h] + dict_binary[m] == num:</span><br><span class="line">                    hour = str(h)</span><br><span class="line">                    m = str(m) <span class="keyword">if</span> m &gt; <span class="number">9</span> <span class="keyword">else</span> <span class="string">"0"</span> + str(m)</span><br><span class="line">                    res.append(hour + <span class="string">":"</span> + m)</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">so = Solution()</span><br><span class="line">print(so.readBinaryWatch(<span class="number">1</span>))</span><br></pre></td></tr></tbody></table></figure><h1 id="Binary-Search"><a href="#Binary-Search" class="headerlink" title="Binary Search"></a>Binary Search</h1><h2 id="find-first-and-last-position-of-element-in-sorted-array"><a href="#find-first-and-last-position-of-element-in-sorted-array" class="headerlink" title="find-first-and-last-position-of-element-in-sorted-array"></a>find-first-and-last-position-of-element-in-sorted-array</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time: 2020/2/2 11:18 上午 </span></span><br><span class="line"><span class="comment"># @Author: GraceKoo</span></span><br><span class="line"><span class="comment"># @File: 34_find-first-and-last-position-of-element-in-sorted-array.py</span></span><br><span class="line"><span class="comment"># @Desc: https://leetcode-cn.com/problems/find-first-and-last-position-of-element-in-sorted-array/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">find_left_right_index</span><span class="params">(self, nums, target, left_right_flag)</span>:</span></span><br><span class="line">        left, right = <span class="number">0</span>, len(nums)</span><br><span class="line">        <span class="keyword">while</span> left &lt; right:</span><br><span class="line">            mid = (left + right) // <span class="number">2</span></span><br><span class="line">            <span class="keyword">if</span> nums[mid] &gt; target <span class="keyword">or</span> (left_right_flag <span class="keyword">and</span> nums[mid] == target):</span><br><span class="line">                right = mid</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                left = mid + <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> left</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">searchRange</span><span class="params">(self, nums, target: int)</span>:</span></span><br><span class="line">        <span class="comment"># 找到左边界</span></span><br><span class="line">        left_index = self.find_left_right_index(nums, target, <span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">if</span> left_index == len(nums) <span class="keyword">or</span> nums[left_index] != target:</span><br><span class="line">            <span class="keyword">return</span> [<span class="number">-1</span>, <span class="number">-1</span>]</span><br><span class="line">        <span class="comment"># 找到右边界</span></span><br><span class="line">        <span class="keyword">return</span> [left_index, self.find_left_right_index(nums, target, <span class="literal">False</span>) - <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">so = Solution()</span><br><span class="line">print(so.searchRange([<span class="number">5</span>, <span class="number">7</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">8</span>, <span class="number">10</span>], <span class="number">8</span>))</span><br></pre></td></tr></tbody></table></figure><h2 id="sqrtx"><a href="#sqrtx" class="headerlink" title="sqrtx"></a>sqrtx</h2><p>当<code>x ≥ 2</code> 时，它的整数平方根一定小于 <code>x / 2</code>。由于结果一定是整数，此问题可以转换成在有序整数集中寻找一个特定值，因此可以使用二分查找。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time: 2020/3/11 11:57</span></span><br><span class="line"><span class="comment"># @Author: GraceKoo</span></span><br><span class="line"><span class="comment"># @File: 69_sqrtx.py</span></span><br><span class="line"><span class="comment"># @Desc:https://leetcode-cn.com/problems/sqrtx/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mySqrt</span><span class="params">(self, x: int)</span> -&gt; int:</span></span><br><span class="line">        <span class="keyword">if</span> x &lt; <span class="number">2</span>:</span><br><span class="line">            <span class="keyword">return</span> x</span><br><span class="line">        left = <span class="number">2</span></span><br><span class="line">        right = x // <span class="number">2</span></span><br><span class="line">        <span class="keyword">while</span> left &lt;= right:</span><br><span class="line">            middle = left + (right - left) // <span class="number">2</span></span><br><span class="line">            <span class="keyword">if</span> middle * middle &gt; x:</span><br><span class="line">                right = middle - <span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> middle * middle &lt; x:</span><br><span class="line">                left = middle + <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> middle</span><br><span class="line">        <span class="keyword">return</span> right</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">so = Solution()</span><br><span class="line">print(so.mySqrt(<span class="number">8</span>))</span><br></pre></td></tr></tbody></table></figure><h2 id="search-a-2d-matrix"><a href="#search-a-2d-matrix" class="headerlink" title="search-a-2d-matrix"></a>search-a-2d-matrix</h2><p>将整个matric当做一个列表，进行二分查找。其中对应的元素与其行列的索引为：</p><blockquote><p>middle = (left + right) // 2</p><p>row_index = middle // cols</p><p>col_index = middle % cols</p></blockquote><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time: 2020/3/17 19:59 </span></span><br><span class="line"><span class="comment"># @Author: GraceKoo</span></span><br><span class="line"><span class="comment"># @File: 74_search-a-2d-matrix.py</span></span><br><span class="line"><span class="comment"># @Desc:https://leetcode-cn.com/problems/search-a-2d-matrix/</span></span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> List</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">searchMatrix</span><span class="params">(self, matrix: List[List[int]], target: int)</span> -&gt; bool:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> matrix <span class="keyword">or</span> len(matrix) == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        rows = len(matrix)</span><br><span class="line">        cols = len(matrix[<span class="number">0</span>])</span><br><span class="line">        left = <span class="number">0</span></span><br><span class="line">        right = rows * cols - <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> left &lt;= right:</span><br><span class="line">            middle = (left + right) // <span class="number">2</span></span><br><span class="line">            row = middle // cols</span><br><span class="line">            col = middle % cols</span><br><span class="line">            <span class="keyword">if</span> matrix[row][col] == target:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            <span class="keyword">if</span> matrix[row][col] &gt; target:</span><br><span class="line">                right = middle - <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                left = middle + <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">so = Solution()</span><br><span class="line">print(so.searchMatrix([</span><br><span class="line">    [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>],</span><br><span class="line">    [<span class="number">10</span>, <span class="number">11</span>, <span class="number">16</span>, <span class="number">20</span>],</span><br><span class="line">    [<span class="number">23</span>, <span class="number">30</span>, <span class="number">34</span>, <span class="number">50</span>]</span><br><span class="line">], <span class="number">3</span>))</span><br></pre></td></tr></tbody></table></figure><h2 id="search-in-rotated-sorted-array"><a href="#search-in-rotated-sorted-array" class="headerlink" title="search-in-rotated-sorted-array"></a>search-in-rotated-sorted-array</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time: 2020/2/1 4:43 下午</span></span><br><span class="line"><span class="comment"># @Author: GraceKoo</span></span><br><span class="line"><span class="comment"># @File: 33_search-in-rotated-sorted-array.py</span></span><br><span class="line"><span class="comment"># @Desc: https://leetcode-cn.com/problems/search-in-rotated-sorted-array/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">search</span><span class="params">(self, nums, target: int)</span> -&gt; int:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> nums:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">        left, right = <span class="number">0</span>, len(nums) - <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> left &lt;= right:</span><br><span class="line">            mid = (left + right) // <span class="number">2</span></span><br><span class="line">            <span class="keyword">if</span> nums[mid] == target:</span><br><span class="line">                <span class="keyword">return</span> mid</span><br><span class="line">            <span class="comment"># 右半部分是有序的</span></span><br><span class="line">            <span class="keyword">if</span> nums[mid] &lt; nums[right]:</span><br><span class="line">                <span class="comment"># target在右半部分里</span></span><br><span class="line">                <span class="keyword">if</span> nums[mid] &lt; target &lt; nums[right]:</span><br><span class="line">                    left = mid + <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    right = mid - <span class="number">1</span></span><br><span class="line">            <span class="comment"># 左半部分是有序的</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment"># target在左半部分里</span></span><br><span class="line">                <span class="keyword">if</span> nums[left] &lt; target &lt; nums[mid]:</span><br><span class="line">                    right = mid - <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    left = mid + <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">so = Solution()</span><br><span class="line">print(so.search([<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>], <span class="number">0</span>))</span><br></pre></td></tr></tbody></table></figure><h2 id="find-minimum-in-rotated-sorted-array"><a href="#find-minimum-in-rotated-sorted-array" class="headerlink" title="find-minimum-in-rotated-sorted-array"></a>find-minimum-in-rotated-sorted-array</h2><p><a href="https://leetcode-cn.com/problems/find-minimum-in-rotated-sorted-array/solution/xun-zhao-xuan-zhuan-pai-lie-shu-zu-zhong-de-zui-xi/" target="_blank" rel="noopener">参考链接</a></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time: 2020/4/26 12:39</span></span><br><span class="line"><span class="comment"># @Author: GraceKoo</span></span><br><span class="line"><span class="comment"># @File: 153_find-minimum-in-rotated-sorted-array.py</span></span><br><span class="line"><span class="comment"># @Desc: https://leetcode-cn.com/problems/find-minimum-in-rotated-sorted-array/</span></span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> List</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findMin</span><span class="params">(self, nums: List[int])</span> -&gt; int:</span></span><br><span class="line">        len_nums = len(nums)</span><br><span class="line">        <span class="keyword">if</span> len_nums &lt;= <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> nums[<span class="number">0</span>]</span><br><span class="line">        left = <span class="number">0</span></span><br><span class="line">        right = len_nums - <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> left &lt;= right:</span><br><span class="line">            middle = (left + right) // <span class="number">2</span></span><br><span class="line">            <span class="comment"># 退出条件</span></span><br><span class="line">            <span class="keyword">if</span> nums[middle - <span class="number">1</span>] &gt; nums[middle]:</span><br><span class="line">                <span class="keyword">return</span> nums[middle]</span><br><span class="line">            <span class="keyword">if</span> nums[middle] &gt; nums[middle + <span class="number">1</span>]:</span><br><span class="line">                <span class="keyword">return</span> nums[middle + <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 左边为有序，寻找在右边的变化点</span></span><br><span class="line">            <span class="keyword">if</span> nums[middle] &gt; nums[left]:</span><br><span class="line">                left = middle + <span class="number">1</span></span><br><span class="line">            <span class="comment"># 右边为有序，寻找在左边的变化点</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                right = middle - <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">so = Solution()</span><br><span class="line">print(so.findMin([<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">2</span>]))</span><br></pre></td></tr></tbody></table></figure><h2 id="search-in-rotated-sorted-array-ii"><a href="#search-in-rotated-sorted-array-ii" class="headerlink" title="search-in-rotated-sorted-array-ii"></a>search-in-rotated-sorted-array-ii</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time: 2020/3/26 19:16 </span></span><br><span class="line"><span class="comment"># @Author: GraceKoo</span></span><br><span class="line"><span class="comment"># @File: 81_search-in-rotated-sorted-array-ii.py</span></span><br><span class="line"><span class="comment"># @Desc:https://leetcode-cn.com/problems/remove-duplicates-from-sorted-array-ii/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">search</span><span class="params">(self, nums, target: int)</span> -&gt; int:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> nums:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        left, right = <span class="number">0</span>, len(nums) - <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> left &lt;= right:</span><br><span class="line">            mid = (left + right) // <span class="number">2</span></span><br><span class="line">            <span class="keyword">if</span> nums[mid] == target:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            <span class="comment"># 右半部分是有序的</span></span><br><span class="line">            <span class="keyword">if</span> nums[mid] &lt; nums[right]:</span><br><span class="line">                <span class="comment"># target在右半部分里</span></span><br><span class="line">                <span class="keyword">if</span> nums[mid] &lt; target &lt; nums[right]:</span><br><span class="line">                    left = mid + <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    right = mid - <span class="number">1</span></span><br><span class="line">            <span class="comment"># 左半部分是有序的</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment"># target在左半部分里</span></span><br><span class="line">                <span class="keyword">if</span> nums[left] &lt; target &lt; nums[mid]:</span><br><span class="line">                    right = mid - <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    left = mid + <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">so = Solution()</span><br><span class="line">print(so.search([<span class="number">2</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>], <span class="number">3</span>))</span><br></pre></td></tr></tbody></table></figure><h2 id="min-value-in-rotated-array"><a href="#min-value-in-rotated-array" class="headerlink" title="min-value-in-rotated-array"></a>min-value-in-rotated-array</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time: 2020/5/25 12:37 </span></span><br><span class="line"><span class="comment"># @Author: GraceKoo</span></span><br><span class="line"><span class="comment"># @File: min-value-in-rotated-array.py</span></span><br><span class="line"><span class="comment"># @Desc: https://www.nowcoder.com/practice/9f3231a991af4f55b95579b44b7a01ba?tpId=13&amp;tqId=11159&amp;tPage=1&amp;rp=1&amp;ru=/ta/</span></span><br><span class="line"><span class="comment"># coding-interviews&amp;qru=/ta/coding-interviews/question-ranking</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">minNumberInRotateArray</span><span class="params">(self, rotateArray)</span>:</span></span><br><span class="line">        <span class="comment"># write code here</span></span><br><span class="line">        len_rotatearray = len(rotateArray)</span><br><span class="line">        <span class="keyword">if</span> len_rotatearray &lt;= <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> rotateArray</span><br><span class="line">        left = <span class="number">0</span></span><br><span class="line">        right = len_rotatearray - <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> left &lt; right:</span><br><span class="line">            middle = (left + right) // <span class="number">2</span></span><br><span class="line">            <span class="keyword">if</span> rotateArray[middle] &gt; rotateArray[right]:</span><br><span class="line">                left = middle + <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                right = middle</span><br><span class="line">        <span class="keyword">return</span> rotateArray[left]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">so = Solution()</span><br><span class="line">print(so.minNumberInRotateArray([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>]))</span><br><span class="line">print(so.minNumberInRotateArray([<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]))</span><br><span class="line">print(so.minNumberInRotateArray([<span class="number">6</span>, <span class="number">7</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]))</span><br></pre></td></tr></tbody></table></figure><h2 id="find-peak-element"><a href="#find-peak-element" class="headerlink" title="find-peak-element"></a>find-peak-element</h2><ul><li>时间复杂度 : O(log_2(n))。 每一步都将搜索空间减半。因此，总的搜索空间只需要 log_2(n)步。其中 n 为 num 数组的长度。</li><li>空间复杂度 : O(1)。 只使用了常数空间。</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time: 2020/4/27 12:46</span></span><br><span class="line"><span class="comment"># @Author: GraceKoo</span></span><br><span class="line"><span class="comment"># @File: 162_find-peak-element.py</span></span><br><span class="line"><span class="comment"># @Desc: https://leetcode-cn.com/problems/find-peak-element/</span></span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> List</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findPeakElement</span><span class="params">(self, nums: List[int])</span> -&gt; int:</span></span><br><span class="line">        left = <span class="number">0</span></span><br><span class="line">        right = len(nums) - <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> left &lt; right:</span><br><span class="line">            middle = (left + right) // <span class="number">2</span></span><br><span class="line">            <span class="comment"># 从middle左侧开始找峰值</span></span><br><span class="line">            <span class="keyword">if</span> nums[middle] &gt; nums[middle + <span class="number">1</span>]:</span><br><span class="line">                right = middle</span><br><span class="line">            <span class="comment"># 从middle右侧开始找峰值</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                left = middle + <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> left</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">so = Solution()</span><br><span class="line">print(so.findPeakElement([<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">4</span>]))</span><br></pre></td></tr></tbody></table></figure><h2 id="interview-50"><a href="#interview-50" class="headerlink" title="interview_50"></a>interview_50</h2><ul><li><p>题目：在一个长度为n+1的数组里的所有数字都在1~n的范围内，所以数组中至少有一个数字是重复的。请找出数组中任意一个重复的数字，但不能修改输入的数组。例如，如果输入长度为8的数组[2, 3, 5, 4, 3, 2, 6, 7]，那么对应的输出是重复的数字2或者3。</p></li><li><p>思考：如果只能使用 O(1)的额外空间，该怎么做呢？</p></li><li><p>解法<br>(分治，<strong>抽屉原理</strong>) O(nlogn)</p></li></ul><p><strong>抽屉原理：n+1 个苹果放在 n 个抽屉里，那么至少有一个抽屉中会放两个苹果。</strong></p><p>用在这个题目中就是，一共有 n+1 个数，每个数的取值范围是1到n，所以至少会有一个数出现两次。</p><p>然后我们采用分治的思想，将每个数的取值的区间[1, n]划分成[1, n/2]和[n/2+1, n]两个子区间，然后分别统计两个区间中数的个数。<br><strong>注意这里的区间是指数的取值范围，而不是数组下标。</strong></p><p>划分之后，左右两个区间里一定至少存在一个区间，区间中数的个数大于区间长度。</p><p>因此我们可以把问题划归到左右两个子区间中的一个，而且由于区间中数的个数大于区间长度，根据抽屉原理，在这个子区间中一定存在某个数出现了两次。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">duplicateInArray</span><span class="params">(nums)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    抽屉原理</span></span><br><span class="line"><span class="string">    :type nums: List[int]</span></span><br><span class="line"><span class="string">    :rtype int</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    left_value = <span class="number">1</span></span><br><span class="line">    right_value = len(nums) - <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> left_value &lt; right_value:</span><br><span class="line">        middle_value = int(left_value + (right_value - left_value) / <span class="number">2</span>)</span><br><span class="line">        count_left = <span class="number">0</span></span><br><span class="line">        count_right = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> value <span class="keyword">in</span> nums:</span><br><span class="line">            <span class="keyword">if</span> left_value &lt;= value &lt;= middle_value:</span><br><span class="line">                count_left += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                count_right += <span class="number">1</span></span><br><span class="line">        <span class="comment"># 左半段存在重复（左半段的个数大于左半段的长度），根据抽屉原理，在左半段进行查找</span></span><br><span class="line">        <span class="keyword">if</span> count_left &gt; middle_value - left_value + <span class="number">1</span>:</span><br><span class="line">            right_value = middle_value</span><br><span class="line">        <span class="comment"># 右半段存在重复，在右半段进行查找</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            left_value = middle_value + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> left_value</span><br></pre></td></tr></tbody></table></figure><h1 id="Double-Pointer"><a href="#Double-Pointer" class="headerlink" title="Double Pointer"></a>Double Pointer</h1><h2 id="trapping-rain-water"><a href="#trapping-rain-water" class="headerlink" title="trapping-rain-water"></a>trapping-rain-water</h2><p> 直接思路：</p><ul><li>对于每个元素而言，它对应的水的数量由其左右两边最大的高度决定，即：<ul><li>当前元素向左扫描得到最大的高度max_left_height</li><li>当前元素向右扫描得到最大的高度max_right_height</li><li>取min(max_left_height, max_right_height)，得到min_height</li><li>再将min_height 与当前元素的height相减，即为当前元素所能注得的水量</li></ul></li><li>时间复杂度： $O(n^2)$ ，因数组中的每个元素都需要向左向右扫描。</li></ul><p>本题采用双指针法：时间复杂度为 $O(n)$ ，空间复杂度为 $O(1)$ </p><p>思路如下：</p><ul><li><p>如果一端有更高的条形块（例如右端），积水的高度依赖于当前方向的高度（从左到右）。</p></li><li><p>当另一侧（左侧）的条形块高度较高时，积水的高度依赖于（从右到左）方向的高度。</p></li></ul><p>伪代码如下：</p><ul><li><p>初始化left指针为 0 并且right 指针为 size-1</p></li><li><p>While left &lt; right, do:</p><ul><li><p>If height[left] &lt; height[right]</p><ul><li><p>if height_left_max &lt;= height[left]: 更新height_left_max </p></li><li><p>else:</p></li></ul></li><li><p>result += height_left_max - height[left]</p></li><li><p>else:</p><ul><li><p>if height_right_max &lt;= height[right]: 更新height_right_max </p></li><li><p>else:</p><p>result += height_right_max - height[right]</p></li></ul></li></ul></li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time: 2020/2/14 09:11</span></span><br><span class="line"><span class="comment"># @Author: GraceKoo</span></span><br><span class="line"><span class="comment"># @File: 42_trapping-rain-water.py</span></span><br><span class="line"><span class="comment"># @Desc: https://leetcode-cn.com/problems/trapping-rain-water</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> List</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">trap</span><span class="params">(self, height: List[int])</span> -&gt; int:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> height:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        left, right = <span class="number">0</span>, len(height) - <span class="number">1</span></span><br><span class="line">        left_max, right_max = height[left], height[right]</span><br><span class="line">        result = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> left &lt; right:</span><br><span class="line">            <span class="comment"># 因为是从0，size-1开始比较的，每次比较相当于间接确定了height[left] &lt; height[left_max] &lt; height[right]</span></span><br><span class="line">            <span class="keyword">if</span> height[left] &lt; height[right]:</span><br><span class="line">                <span class="keyword">if</span> height[left] &gt;= left_max:</span><br><span class="line">                    left_max = height[left]</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    result += (left_max - height[left])</span><br><span class="line">                left += <span class="number">1</span></span><br><span class="line">            <span class="comment"># height[right] &lt; height[right_max] &lt; height[left]</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">if</span> height[right] &gt;= right_max:</span><br><span class="line">                    right_max = height[right]</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    result += (right_max - height[right])</span><br><span class="line">                right -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">so = Solution()</span><br><span class="line">print(so.trap([<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>]))</span><br></pre></td></tr></tbody></table></figure><h2 id="sort-colors"><a href="#sort-colors" class="headerlink" title="sort-colors"></a>sort-colors</h2><p>解题思路：</p><ul><li>left指向0、right指向2</li><li>当nums[current] = 0或2时，跟left、right指向的元素进行交换</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time: 2020/3/18 23:41</span></span><br><span class="line"><span class="comment"># @Author: GraceKoo</span></span><br><span class="line"><span class="comment"># @File: 75_sort-colors.py</span></span><br><span class="line"><span class="comment"># @Desc:https://leetcode-cn.com/problems/sort-colors</span></span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> List</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sortColors</span><span class="params">(self, nums: List[int])</span> -&gt; List:</span></span><br><span class="line">        <span class="keyword">if</span> len(nums) &lt;= <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> nums</span><br><span class="line">        left = <span class="number">0</span></span><br><span class="line">        right = len(nums) - <span class="number">1</span></span><br><span class="line">        current = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> left &lt;= right:</span><br><span class="line">            <span class="keyword">if</span> nums[current] == <span class="number">0</span>:</span><br><span class="line">                nums[left], nums[current] = nums[current], nums[left]</span><br><span class="line">                left += <span class="number">1</span></span><br><span class="line">                current += <span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> nums[current] == <span class="number">1</span>:</span><br><span class="line">                nums[right], nums[current] = nums[current], nums[right]</span><br><span class="line">                right -= <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                current += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> nums</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">so = Solution()</span><br><span class="line">print(so.sortColors([<span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>]))</span><br></pre></td></tr></tbody></table></figure><h2 id="minimum-window-substring"><a href="#minimum-window-substring" class="headerlink" title="minimum-window-substring"></a>minimum-window-substring</h2><p>解题思路：</p><p>滑动窗口的思想</p><blockquote><p>left指针仅在当前窗口满足条件之后才会移动：即当前窗口中满足要求，left会试着移动以此减少结果的长度</p><p>right 指针不停向右移动，找寻满足条件的窗口</p></blockquote><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time: 2020/3/21 22:48</span></span><br><span class="line"><span class="comment"># @Author: GraceKoo</span></span><br><span class="line"><span class="comment"># @File: 76_minimum-window-substring.py</span></span><br><span class="line"><span class="comment"># @Desc:https://leetcode-cn.com/problems/minimum-window-substring</span></span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Counter</span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution1</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">minWindow1</span><span class="params">(self, s: str, t: str)</span> -&gt; str:</span></span><br><span class="line">        left, right = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">        length_s = len(s)</span><br><span class="line">        result = s + s  <span class="comment"># 随便设定一个比s长的字符串，便于后续处理</span></span><br><span class="line">        t_dict = Counter(t)  <span class="comment"># t各个数字的出现的次数</span></span><br><span class="line">        count_dict = defaultdict(<span class="keyword">lambda</span>: <span class="number">0</span>)  <span class="comment"># 创建一个默认值为0的字典</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 判断当前字典与目标字典长度、存储的值是否相同</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">contains</span><span class="params">(t_dict, count_dict)</span>:</span></span><br><span class="line">            <span class="keyword">if</span> len(count_dict) &lt; len(t_dict):</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            <span class="keyword">for</span> key <span class="keyword">in</span> count_dict:</span><br><span class="line">                <span class="keyword">if</span> count_dict[key] &lt; t_dict[key] <span class="keyword">or</span> key <span class="keyword">not</span> <span class="keyword">in</span> t_dict:</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 触发right移动</span></span><br><span class="line">        <span class="keyword">for</span> right <span class="keyword">in</span> range(length_s):</span><br><span class="line">            <span class="keyword">if</span> s[right] <span class="keyword">in</span> t_dict:</span><br><span class="line">                count_dict[s[right]] += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">#  触发left移动: 当前存储的字典中与目标字典中长度、包含的值相同</span></span><br><span class="line">            <span class="keyword">while</span> left &lt; length_s <span class="keyword">and</span> contains(t_dict, count_dict):</span><br><span class="line">                <span class="comment"># 更新结果</span></span><br><span class="line">                <span class="keyword">if</span> right - left + <span class="number">1</span> &lt; len(result):</span><br><span class="line">                    result = s[left:right + <span class="number">1</span>]</span><br><span class="line">                <span class="keyword">if</span> s[left] <span class="keyword">in</span> t_dict:</span><br><span class="line">                    count_dict[s[left]] -= <span class="number">1</span></span><br><span class="line">                left += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span> <span class="keyword">if</span> result == s + s <span class="keyword">else</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">so = Solution1()</span><br><span class="line">print(so.minWindow1(<span class="string">"ADOBECODEBANC"</span>, <span class="string">"ABC"</span>))</span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time: 2020/3/22 22:32</span></span><br><span class="line"><span class="comment"># @Author: GraceKoo</span></span><br><span class="line"><span class="comment"># @File: 77_combinations.py</span></span><br><span class="line"><span class="comment"># @Desc:https://leetcode-cn.com/problems/combinations/</span></span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> List</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">combine</span><span class="params">(self, n: int, k: int)</span> -&gt; List[List[int]]:</span></span><br><span class="line">        <span class="keyword">if</span> n &lt;= <span class="number">0</span> <span class="keyword">or</span> k &lt;= <span class="number">0</span> <span class="keyword">or</span> n &lt; k:</span><br><span class="line">            <span class="keyword">return</span> []</span><br><span class="line">        result = []</span><br><span class="line">        self.__dfs(<span class="number">1</span>, k, n, [], result)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__dfs</span><span class="params">(self, index, k, n, pre, result)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> len(pre) == k:</span><br><span class="line">            result.append(pre[:])</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(index, n + <span class="number">1</span>):</span><br><span class="line">            pre.append(i)</span><br><span class="line">            self.__dfs(i + <span class="number">1</span>, k, n, pre, result)</span><br><span class="line">            pre.pop()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">so = Solution()</span><br><span class="line">print(so.combine(<span class="number">4</span>, <span class="number">2</span>))</span><br></pre></td></tr></tbody></table></figure><h2 id="remove-duplicates-from-sorted-array-ii"><a href="#remove-duplicates-from-sorted-array-ii" class="headerlink" title="remove-duplicates-from-sorted-array-ii"></a>remove-duplicates-from-sorted-array-ii</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time: 2020/3/26 14:00 </span></span><br><span class="line"><span class="comment"># @Author: GraceKoo</span></span><br><span class="line"><span class="comment"># @File: 80_remove-duplicates-from-sorted-array-ii.py</span></span><br><span class="line"><span class="comment"># @Desc:https://leetcode-cn.com/problems/remove-duplicates-from-sorted-array-ii/</span></span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> List</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">removeDuplicates</span><span class="params">(self, nums: List[int])</span> -&gt; int:</span></span><br><span class="line">        <span class="comment"># j指向需要覆盖的位置</span></span><br><span class="line">        j, count = <span class="number">1</span>, <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, len(nums)):</span><br><span class="line">            <span class="keyword">if</span> nums[i] == nums[i - <span class="number">1</span>]:</span><br><span class="line">                count += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                count = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> count &lt;= <span class="number">2</span>:</span><br><span class="line">                nums[j] = nums[i]</span><br><span class="line">                j += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> j</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">so = Solution()</span><br><span class="line">print(so.removeDuplicates([<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>]))</span><br></pre></td></tr></tbody></table></figure><h1 id="Dynamic-Programming"><a href="#Dynamic-Programming" class="headerlink" title="Dynamic Programming"></a>Dynamic Programming</h1><h2 id="wildcard-matching"><a href="#wildcard-matching" class="headerlink" title="wildcard-matching"></a>wildcard-matching</h2><p>解题思路：</p><ul><li><p>状态  dp[i][j]  : 表示 s 的前 i 个字符和 p 的前 j 个字符是否匹配 (true 的话表示匹配)</p></li><li><p>状态转移方程：</p><ul><li><p>当 s[i] == p[j]，或者 p[j] == ? 那么  dp[i][j] = dp[i - 1][j - 1] </p></li><li><p>当  p[j] == *  且  dp[i][j] = dp[i][j - 1]  ||  dp[i - 1][j]     </p></li></ul></li><li><p>初始化：</p><ul><li><p>dp[0][0]  表示什么都没有，其值为 true</p></li><li><p>第一行  dp[0][j] ，换句话说，s 为空，与 p 匹配，所以只要 p 开始为 * 才为 true</p></li><li><p>第一列 dp[i][0] ，当然全部为 false</p></li></ul></li><li><p>例如 </p><p><code>s = "abcd"</code> <code>p ="ab*"</code> ，其状态矩阵如下：</p></li></ul><div class="table-container"><table><thead><tr><th>true</th><th>false</th><th>false</th><th>false</th></tr></thead><tbody><tr><td>false</td><td>true</td><td>false</td><td>false</td></tr><tr><td>false</td><td>false</td><td>true</td><td>true</td></tr><tr><td>false</td><td>false</td><td>false</td><td>true</td></tr><tr><td>false</td><td>false</td><td>false</td><td>true</td></tr></tbody></table></div><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time: 2020/2/16 09:45</span></span><br><span class="line"><span class="comment"># @Author: GraceKoo</span></span><br><span class="line"><span class="comment"># @File: 44_wildcard-matching.py</span></span><br><span class="line"><span class="comment"># @Desc:https://leetcode-cn.com/problems/wildcard-matching/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isMatch</span><span class="params">(self, s: str, p: str)</span> -&gt; bool:</span></span><br><span class="line">        s_len = len(s)</span><br><span class="line">        p_len = len(p)</span><br><span class="line">        dp = [[<span class="literal">False</span>] * (p_len + <span class="number">1</span>) <span class="keyword">for</span> i <span class="keyword">in</span> range(s_len + <span class="number">1</span>)]</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="literal">True</span></span><br><span class="line">        <span class="comment"># 初始化，如果s为空，且p的第一个字符为"*"，则置为True</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, p_len + <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> p[i<span class="number">-1</span>] == <span class="string">"*"</span>:</span><br><span class="line">                dp[<span class="number">0</span>][i] = dp[<span class="number">0</span>][i<span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, s_len + <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>, p_len + <span class="number">1</span>):</span><br><span class="line">                <span class="keyword">if</span> s[i<span class="number">-1</span>] == p[j<span class="number">-1</span>] <span class="keyword">or</span> p[j<span class="number">-1</span>] == <span class="string">"?"</span>:</span><br><span class="line">                    dp[i][j] = dp[i<span class="number">-1</span>][j<span class="number">-1</span>]</span><br><span class="line">                <span class="keyword">elif</span> p[j - <span class="number">1</span>] == <span class="string">"*"</span>:</span><br><span class="line">                    dp[i][j] = dp[i<span class="number">-1</span>][j] <span class="keyword">or</span> dp[i][j<span class="number">-1</span>]</span><br><span class="line">        <span class="keyword">return</span> dp[<span class="number">-1</span>][<span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">so = Solution()</span><br><span class="line">print(so.isMatch(<span class="string">"adceb"</span>, <span class="string">"*a*b"</span>))</span><br></pre></td></tr></tbody></table></figure><h2 id="maximum-subarray"><a href="#maximum-subarray" class="headerlink" title="maximum-subarray"></a>maximum-subarray</h2><ul><li>解法1:贪心算法</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time: 2020/2/25 09:52</span></span><br><span class="line"><span class="comment"># @Author: GraceKoo</span></span><br><span class="line"><span class="comment"># @File: 53_maximum-subarray.py</span></span><br><span class="line"><span class="comment"># @Desc:https://leetcode-cn.com/problems/maximum-subarray/</span></span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> List</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maxSubArray_GA</span><span class="params">(self, nums: List[int])</span> -&gt; int:</span></span><br><span class="line">        len_nums = len(nums)</span><br><span class="line">        current_sum = max_sum = nums[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, len_nums):</span><br><span class="line">          <span class="comment"># 寻找局部最优解</span></span><br><span class="line">            current_sum = max(nums[i], current_sum + nums[i])</span><br><span class="line">            max_sum = max(max_sum, current_sum)</span><br><span class="line">        <span class="keyword">return</span> max_sum</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">so = Solution()</span><br><span class="line">print(so.maxSubArray([<span class="number">-2</span>, <span class="number">1</span>, <span class="number">-3</span>, <span class="number">4</span>, <span class="number">-1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">-5</span>, <span class="number">4</span>]))</span><br></pre></td></tr></tbody></table></figure><ul><li>解法2:动态规划</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">maxSubArray_DP</span><span class="params">(self, nums: List[int])</span> -&gt; int:</span></span><br><span class="line">    len_nums = len(nums)</span><br><span class="line">    max_sum = nums[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, len_nums):</span><br><span class="line">        <span class="keyword">if</span> nums[i<span class="number">-1</span>] &gt; <span class="number">0</span>:</span><br><span class="line">            nums[i] += nums[i<span class="number">-1</span>]</span><br><span class="line">        max_sum = max(max_sum, nums[i])</span><br><span class="line">    <span class="keyword">return</span> max_sum</span><br></pre></td></tr></tbody></table></figure><h2 id="jump-game"><a href="#jump-game" class="headerlink" title="jump-game"></a>jump-game</h2><p>解题思路：</p><p>从右向左迭代，对于每个节点我们检查是否存在一步跳跃可以到达 GOOD 的位置（currPosition + nums[currPosition] &gt;= leftmostGoodIndex）。如果可以到达，当前位置也标记为 GOOD ，同时，这个位置将成为新的最左边的 GOOD 位置，一直重复到数组的开头，如果第一个坐标标记为 GOOD 意味着可以从第一个位置跳到最后的位置。</p><div class="table-container"><table><thead><tr><th>Index</th><th>0</th><th>1</th><th>2</th><th>3</th><th>4</th></tr></thead><tbody><tr><td>Nums</td><td>2</td><td>0</td><td>1</td><td>1</td><td>4</td></tr><tr><td>Good/Bad</td><td></td><td></td><td></td><td></td><td>*Good</td></tr><tr><td></td><td></td><td></td><td></td><td>*Good</td><td>Good</td></tr><tr><td></td><td></td><td></td><td>*Good</td><td>Good</td><td>Good</td></tr><tr><td></td><td></td><td>False(1+0 &lt; 2)</td><td></td><td></td><td></td></tr><tr><td></td><td>*Good(0+2 &gt;= 2)</td><td></td><td></td><td></td></tr></tbody></table></div><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time: 2020/2/27 12:08 </span></span><br><span class="line"><span class="comment"># @Author: GraceKoo</span></span><br><span class="line"><span class="comment"># @File: 55_jump-game.py</span></span><br><span class="line"><span class="comment"># @Desc:https://leetcode-cn.com/problems/jump-game/</span></span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> List</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">canJump</span><span class="params">(self, nums: List[int])</span> -&gt; bool:</span></span><br><span class="line">        last_true_index = nums[<span class="number">-1</span>]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(nums) - <span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>):</span><br><span class="line">            <span class="keyword">if</span> i + nums[i] &gt;= last_true_index:</span><br><span class="line">                last_true_index = nums[i]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">so = Solution()</span><br><span class="line">print(so.canJump([<span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">4</span>]))</span><br></pre></td></tr></tbody></table></figure><h2 id="unique-paths"><a href="#unique-paths" class="headerlink" title="unique-paths"></a>unique-paths</h2><p>解题思路：</p><ul><li><p>假设<code>dp[row][col]</code>代表到格子<code>[i][j]</code>的路径个数，其中第一行<code>dp[0][j]</code>与第一列<code>dp[i][0]</code>都为1。</p></li><li><p>那么每个格子的路径个数取决于它左边格子的路径个数+它上边格子的路径个数。</p><p>即<code>dp[i][j]=dp[i][j-1]+dp[i-1][j]</code></p></li><li><p>为了节省空间，利用两个数组pre与cur来代表上一行与当前行。初始化都为1。</p></li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time: 2020/3/5 20:13</span></span><br><span class="line"><span class="comment"># @Author: GraceKoo</span></span><br><span class="line"><span class="comment"># @File: 62_unique-paths.py</span></span><br><span class="line"><span class="comment"># @Desc:https://leetcode-cn.com/problems/unique-paths/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">uniquePaths</span><span class="params">(self, m: int, n: int)</span> -&gt; int:</span></span><br><span class="line">        pre = [<span class="number">1</span>] * n</span><br><span class="line">        cur = [<span class="number">1</span>] * n</span><br><span class="line">        <span class="keyword">for</span> row <span class="keyword">in</span> range(<span class="number">1</span>, m):</span><br><span class="line">            <span class="keyword">for</span> col <span class="keyword">in</span> range(<span class="number">1</span>, n):</span><br><span class="line">                cur[col] = cur[col<span class="number">-1</span>] + pre[col]</span><br><span class="line">            pre = cur</span><br><span class="line">        <span class="keyword">return</span> pre[<span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">so = Solution()</span><br><span class="line">print(so.uniquePaths(<span class="number">7</span>, <span class="number">3</span>))</span><br></pre></td></tr></tbody></table></figure><h2 id="unique-paths-ii"><a href="#unique-paths-ii" class="headerlink" title="unique-paths-ii"></a>unique-paths-ii</h2><p>解题思路：</p><ul><li>与上一题思路类似，让obstacleGrid存储到达各个单元的路径。</li><li>首先进行边界初始化，边界上的元素，只有自身为0（代表本身无障碍）且上一个单元值为1（已初始化，此时的1代表无障碍，有1条路可以通行）时，自身的值才被置为1（代表有路径可走）。</li><li>根据相邻单元的路径情况，进行自身路径的计算即可。</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time: 2020/3/5 21:51</span></span><br><span class="line"><span class="comment"># @Author: GraceKoo</span></span><br><span class="line"><span class="comment"># @File: 63_unique-paths-ii.py</span></span><br><span class="line"><span class="comment"># @Desc:https://leetcode-cn.com/problems/unique-paths-ii/</span></span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> List</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">uniquePathsWithObstacles</span><span class="params">(self, obstacleGrid: List[List[int]])</span> -&gt; int:</span></span><br><span class="line">        row = len(obstacleGrid)</span><br><span class="line">        col = len(obstacleGrid[<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">if</span> obstacleGrid[<span class="number">0</span>][<span class="number">0</span>] == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        obstacleGrid[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span></span><br><span class="line">        <span class="comment"># 1.边界初始化</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, col):</span><br><span class="line">            obstacleGrid[<span class="number">0</span>][i] = int(obstacleGrid[<span class="number">0</span>][i<span class="number">-1</span>] == <span class="number">1</span> <span class="keyword">and</span> obstacleGrid[<span class="number">0</span>][i] == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>, row):</span><br><span class="line">            obstacleGrid[j][<span class="number">0</span>] = int(obstacleGrid[j<span class="number">-1</span>][<span class="number">0</span>] == <span class="number">1</span> <span class="keyword">and</span> obstacleGrid[j][<span class="number">0</span>] == <span class="number">0</span>)</span><br><span class="line">        print(obstacleGrid)</span><br><span class="line"><span class="comment"># 2.计算路径</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, row):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>, col):</span><br><span class="line">                <span class="keyword">if</span> obstacleGrid[i][j] == <span class="number">1</span>:</span><br><span class="line">                    obstacleGrid[i][j] = <span class="number">0</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    obstacleGrid[i][j] = obstacleGrid[i<span class="number">-1</span>][j] + obstacleGrid[i][j<span class="number">-1</span>]</span><br><span class="line">        <span class="keyword">return</span> obstacleGrid[<span class="number">-1</span>][<span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">so = Solution()</span><br><span class="line">print(so.uniquePathsWithObstacles([</span><br><span class="line">    [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">    [<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>],</span><br><span class="line">    [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line">]))</span><br></pre></td></tr></tbody></table></figure><h2 id="minimum-path-sum"><a href="#minimum-path-sum" class="headerlink" title="minimum-path-sum"></a>minimum-path-sum</h2><p>解题思路：</p><ol><li>将Grid二维数组自身进行修改，使其存储当前元素到最右下角元素的路径值</li><li>从数组右下角元素开始遍历</li><li>最后一行的元素，路径等于自身加右侧的权值</li><li>除最后一行，其他行的最后一列，路径等于同列的下一行的权值加自身值</li><li>其他元素的路径，等于自身加上右侧权值与下侧路径的较小值</li></ol><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time: 2020/3/8 00:12</span></span><br><span class="line"><span class="comment"># @Author: GraceKoo</span></span><br><span class="line"><span class="comment"># @File: 64_minimum-path-sum.py</span></span><br><span class="line"><span class="comment"># @Desc:https://leetcode-cn.com/problems/minimum-path-sum/</span></span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> List</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">minPathSum</span><span class="params">(self, grid: List[List[int]])</span> -&gt; int:</span></span><br><span class="line">        row_len = len(grid)</span><br><span class="line">        col_len = len(grid[<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">for</span> row <span class="keyword">in</span> range(row_len<span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>):</span><br><span class="line">            <span class="keyword">for</span> col <span class="keyword">in</span> range(col_len<span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>):</span><br><span class="line">                <span class="comment"># 1.最后一行的元素，路径等于自身加右侧的权值</span></span><br><span class="line">                <span class="keyword">if</span> row == row_len<span class="number">-1</span> <span class="keyword">and</span> col != col_len<span class="number">-1</span>:</span><br><span class="line">                    grid[row][col] += grid[row][col+<span class="number">1</span>]</span><br><span class="line">                <span class="comment"># 2. 除最后一行，其他行的最后一列，路径等于同列的下一行的权值加自身值</span></span><br><span class="line">                <span class="keyword">elif</span> row != row_len<span class="number">-1</span> <span class="keyword">and</span> col == col_len<span class="number">-1</span>:</span><br><span class="line">                    grid[row][col] += grid[row+<span class="number">1</span>][col]</span><br><span class="line">                <span class="comment"># 3. 其他元素的路径，等于自身加上右侧权值与下侧路径的较小值</span></span><br><span class="line">                <span class="keyword">elif</span> row != row_len<span class="number">-1</span> <span class="keyword">and</span> col != col_len<span class="number">-1</span>:</span><br><span class="line">                    grid[row][col] += min(grid[row+<span class="number">1</span>][col], grid[row][col+<span class="number">1</span>])</span><br><span class="line">        <span class="keyword">return</span> grid[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">so = Solution()</span><br><span class="line">print(so.minPathSum([</span><br><span class="line">    [<span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>],</span><br><span class="line">    [<span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>],</span><br><span class="line">    [<span class="number">4</span>, <span class="number">2</span>, <span class="number">1</span>]</span><br><span class="line">]))</span><br><span class="line"></span><br><span class="line"><span class="comment"># output</span></span><br><span class="line"><span class="number">7</span></span><br></pre></td></tr></tbody></table></figure><h2 id="climbing-stairs"><a href="#climbing-stairs" class="headerlink" title="climbing-stairs"></a>climbing-stairs</h2><p><code>dp</code>用于存储到达每个台阶的方法总数。</p><p>则到达第n阶，有<code>dp[i-1]+dp[i-2]</code>种方法。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time: 2020/3/11 12:09</span></span><br><span class="line"><span class="comment"># @Author: GraceKoo</span></span><br><span class="line"><span class="comment"># @File: 70_climbing-stairs.py</span></span><br><span class="line"><span class="comment"># @Desc:https://leetcode-cn.com/problems/climbing-stairs/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">climbStairs</span><span class="params">(self, n: int)</span> -&gt; int:</span></span><br><span class="line">        dp = [i <span class="keyword">for</span> i <span class="keyword">in</span> range(n)]</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">1</span></span><br><span class="line">        dp[<span class="number">1</span>] = <span class="number">2</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>, n):</span><br><span class="line">            dp[i] = dp[i<span class="number">-1</span>] + dp[i<span class="number">-2</span>]</span><br><span class="line">        <span class="keyword">return</span> dp[<span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">so = Solution()</span><br><span class="line">print(so.climbStairs(<span class="number">3</span>))</span><br></pre></td></tr></tbody></table></figure><h2 id="climbing-stairsII"><a href="#climbing-stairsII" class="headerlink" title="climbing-stairsII"></a>climbing-stairsII</h2><p>f(n)=f(n-1)+f(n-2)+……f(1)<br>f(n-1)=f(n-2)+……f(1)<br>得f(n)=2f(n-1)</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time: 2020/5/26 12:35 </span></span><br><span class="line"><span class="comment"># @Author: GraceKoo</span></span><br><span class="line"><span class="comment"># @File: jumpFloorII.py</span></span><br><span class="line"><span class="comment"># @Desc: https://www.nowcoder.com/practice/22243d016f6b47f2a6928b4313c85387?tpId=13&amp;tqId=11162&amp;tPage=1&amp;rp=1&amp;ru=/ta/</span></span><br><span class="line"><span class="comment"># coding-interviews&amp;qru=/ta/coding-interviews/question-ranking</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">jumpFloorII</span><span class="params">(self, number)</span>:</span></span><br><span class="line">        <span class="comment"># write code here</span></span><br><span class="line">        <span class="keyword">if</span> number &lt;= <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> number</span><br><span class="line">        n = <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>, number+<span class="number">1</span>):</span><br><span class="line">            n = <span class="number">2</span> * n</span><br><span class="line">        <span class="keyword">return</span> n</span><br></pre></td></tr></tbody></table></figure><h2 id="edit-distance"><a href="#edit-distance" class="headerlink" title="edit-distance"></a>edit-distance</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time: 2020/3/16 12:03 </span></span><br><span class="line"><span class="comment"># @Author: GraceKoo</span></span><br><span class="line"><span class="comment"># @File: 72_edit-distance.py</span></span><br><span class="line"><span class="comment"># @Desc:https://leetcode-cn.com/problems/edit-distance/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">minDistance</span><span class="params">(self, word1: str, word2: str)</span> -&gt; int:</span></span><br><span class="line">        n1 = len(word1)</span><br><span class="line">        n2 = len(word2)</span><br><span class="line">        dp = [[<span class="number">0</span>] * (n2+<span class="number">1</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> range(n1+<span class="number">1</span>)]</span><br><span class="line">        <span class="comment"># 第一行，进行初始化</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, n2 + <span class="number">1</span>):</span><br><span class="line">            dp[<span class="number">0</span>][i] = dp[<span class="number">0</span>][i - <span class="number">1</span>] + <span class="number">1</span></span><br><span class="line">        <span class="comment"># 第一列，进行初始化</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>, n1 + <span class="number">1</span>):</span><br><span class="line">            dp[j][<span class="number">0</span>] = dp[j - <span class="number">1</span>][<span class="number">0</span>] + <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, n1 + <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>, n2 + <span class="number">1</span>):</span><br><span class="line">                <span class="keyword">if</span> word1[i<span class="number">-1</span>] == word2[j<span class="number">-1</span>]:</span><br><span class="line">                    dp[i][j] = dp[i - <span class="number">1</span>][j - <span class="number">1</span>]</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    dp[i][j] = min(dp[i - <span class="number">1</span>][j - <span class="number">1</span>], dp[i - <span class="number">1</span>][j], dp[i][j - <span class="number">1</span>]) + <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> dp[<span class="number">-1</span>][<span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">so = Solution()</span><br><span class="line">print(so.minDistance(word1=<span class="string">"horse"</span>, word2=<span class="string">"ros"</span>))</span><br></pre></td></tr></tbody></table></figure><h2 id="decode-ways"><a href="#decode-ways" class="headerlink" title="decode-ways"></a>decode-ways</h2><p><a href="https://leetcode-cn.com/problems/decode-ways/solution/dong-tai-gui-hua-cong-jian-dan-de-pa-lou-ti-wen-ti/" target="_blank" rel="noopener">解题思路</a></p><p>dp[i+1]：代表s[0:i]的译码方式总数。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time: 2020/4/5 22:40</span></span><br><span class="line"><span class="comment"># @Author: GraceKoo</span></span><br><span class="line"><span class="comment"># @File: 91_decode-ways.py</span></span><br><span class="line"><span class="comment"># @Desc: https://leetcode-cn.com/problems/decode-ways/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">numDecodings</span><span class="params">(self, s: str)</span> -&gt; int:</span></span><br><span class="line">        <span class="keyword">if</span> s[<span class="number">0</span>] == <span class="string">"0"</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        dp = [<span class="number">1</span>, <span class="number">0</span>]</span><br><span class="line">        dp[<span class="number">1</span>] = <span class="number">1</span> <span class="keyword">if</span> s[<span class="number">0</span>] != <span class="number">0</span> <span class="keyword">else</span> <span class="number">0</span>  <span class="comment"># dp[i] -&gt; s[i-1]</span></span><br><span class="line">        n = len(s)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, n):</span><br><span class="line">            dp.append(<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">if</span> s[i] != <span class="string">"0"</span>:</span><br><span class="line">                dp[i+<span class="number">1</span>] += dp[i]</span><br><span class="line">            <span class="keyword">if</span> <span class="string">"10"</span> &lt;= s[i<span class="number">-1</span>:i+<span class="number">1</span>] &lt;= <span class="string">"26"</span>:</span><br><span class="line">                dp[i+<span class="number">1</span>] += dp[i<span class="number">-2</span>]</span><br><span class="line">        <span class="comment"># print(dp)</span></span><br><span class="line">        <span class="keyword">return</span> dp[<span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">so = Solution()</span><br><span class="line">print(so.numDecodings(<span class="string">"226"</span>))</span><br></pre></td></tr></tbody></table></figure><h2 id="interleaving-string"><a href="#interleaving-string" class="headerlink" title="interleaving-string"></a>interleaving-string</h2><p><code>dp[i][j]</code>代表s1[:i]与s2[:j]能否构成s3[:i+j]</p><p><a href="https://leetcode-cn.com/problems/interleaving-string/solution/dong-tai-gui-hua-zhu-xing-jie-shi-python3-by-zhu-3/" target="_blank" rel="noopener">参考链接</a></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time: 2020/4/12 21:47 </span></span><br><span class="line"><span class="comment"># @Author: GraceKoo</span></span><br><span class="line"><span class="comment"># @File: 97_interleaving-string.py</span></span><br><span class="line"><span class="comment"># @Desc: https://leetcode-cn.com/problems/interleaving-string/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isInterleave</span><span class="params">(self, s1: str, s2: str, s3: str)</span> -&gt; bool:</span></span><br><span class="line">        len_s1 = len(s1)</span><br><span class="line">        len_s2 = len(s2)</span><br><span class="line">        len_s3 = len(s3)</span><br><span class="line">        <span class="keyword">if</span> len_s1 + len_s2 != len_s3:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        dp = [[<span class="literal">False</span> <span class="keyword">for</span> _ <span class="keyword">in</span> range(len_s2+<span class="number">1</span>)] <span class="keyword">for</span> _ <span class="keyword">in</span> range(len_s1+<span class="number">1</span>)]</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="literal">True</span></span><br><span class="line">        <span class="comment"># 初始化第一行</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>, len_s2+<span class="number">1</span>):</span><br><span class="line">            dp[<span class="number">0</span>][j] = <span class="literal">True</span> <span class="keyword">if</span> s3[j<span class="number">-1</span>] == s2[j<span class="number">-1</span>] <span class="keyword">else</span> <span class="literal">False</span></span><br><span class="line">        <span class="comment"># 初始化第一列</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, len_s1+<span class="number">1</span>):</span><br><span class="line">            dp[i][<span class="number">0</span>] = <span class="literal">True</span> <span class="keyword">if</span> s3[i<span class="number">-1</span>] == s1[i<span class="number">-1</span>] <span class="keyword">else</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, len_s1+<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>, len_s2+<span class="number">1</span>):</span><br><span class="line">                <span class="keyword">if</span> dp[i<span class="number">-1</span>][j] <span class="keyword">and</span> s1[i<span class="number">-1</span>] == s3[i+j<span class="number">-1</span>]:</span><br><span class="line">                    dp[i][j] = <span class="literal">True</span></span><br><span class="line">                <span class="keyword">if</span> dp[i][j<span class="number">-1</span>] <span class="keyword">and</span> s2[j<span class="number">-1</span>] == s3[i+j<span class="number">-1</span>]:</span><br><span class="line">                    dp[i][j] = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> dp[<span class="number">-1</span>][<span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">so = Solution()</span><br><span class="line">print(so.isInterleave(s1=<span class="string">"aabcc"</span>, s2=<span class="string">"dbbca"</span>, s3=<span class="string">"aadbbcbcac"</span>))</span><br></pre></td></tr></tbody></table></figure><h2 id="split-array-with-equal-sum"><a href="#split-array-with-equal-sum" class="headerlink" title="split-array-with-equal-sum"></a>split-array-with-equal-sum</h2><p><a href="https://leetcode-cn.com/problems/split-array-with-equal-sum/solution/jiang-shu-zu-fen-ge-cheng-he-xiang-deng-de-zi-shu-/" target="_blank" rel="noopener">参考链接</a></p><p>这道题确定i,j,k的取值范围是关键。</p><p>通过j去约定i和k的范围，可以减少复杂度。</p><p><img data-src="/images/algorithm/split-array-with-equal-sum.png" alt="split-array-with-equal-sum"></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time: 2020/5/13 12:33 </span></span><br><span class="line"><span class="comment"># @Author: GraceKoo</span></span><br><span class="line"><span class="comment"># @File: 548_split-array-with-equal-sum.py</span></span><br><span class="line"><span class="comment"># @Desc: https://leetcode-cn.com/problems/split-array-with-equal-sum/</span></span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> List</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">splitArray</span><span class="params">(self, nums: List[int])</span> -&gt; bool:</span></span><br><span class="line">        len_nums = len(nums)</span><br><span class="line">        <span class="keyword">if</span> len_nums &lt; <span class="number">7</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        sum_list = list()</span><br><span class="line">        sum_list.append(nums[<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, len_nums):</span><br><span class="line">            sum_list.append(sum_list[i - <span class="number">1</span>] + nums[i])</span><br><span class="line">        <span class="comment"># 用中间的j去约定i与k的范围</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">3</span>, len_nums - <span class="number">3</span>):</span><br><span class="line">            sum_set = set()</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, j - <span class="number">1</span>):</span><br><span class="line">                <span class="keyword">if</span> sum_list[i - <span class="number">1</span>] == sum_list[j - <span class="number">1</span>] - sum_list[i]:</span><br><span class="line">                    sum_set.add(sum_list[i - <span class="number">1</span>])</span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> range(j + <span class="number">2</span>, len_nums - <span class="number">1</span>):</span><br><span class="line">                <span class="keyword">if</span> sum_list[<span class="number">-1</span>] - sum_list[k] == sum_list[k - <span class="number">1</span>] - sum_list[j] \</span><br><span class="line">                        <span class="keyword">and</span> (sum_list[k - <span class="number">1</span>] - sum_list[j]) <span class="keyword">in</span> sum_set:</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">so = Solution()</span><br><span class="line">print(so.splitArray([<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>]))</span><br></pre></td></tr></tbody></table></figure><h2 id="interview-33"><a href="#interview-33" class="headerlink" title="interview_33"></a>interview_33</h2><p><strong>解题思路</strong></p><p>首先1是丑数, 那么1乘以2,3,5得到的乘积也肯定是丑数(根据丑数的定义可知), 也就是说每一个已知的丑数, 乘上2,3,5之后都会得到3个更大的丑数(可能有重复)</p><p>由于题目要求丑数的顺序是从小到大排序, 那么我们就把已知的丑数先写出来, 每个丑数占一行, 而和2,3,5的乘积的丑数就作为列, 放到同一行上, 如下所示</p><p>1 2 3 5 // 这一行里, 2,3,5分别是1的三个乘积<br>2 4 6 10 // 同理, 4,6,10是2的三个乘积<br>3 6 9 15 // ….<br>4 8 12 20</p><p>观察一下上面的矩阵可以轻松发现, 每一个数组都是从左往右递增, 从上往下递增, 我们可以设置三个指针, 分别指向第0行的1,2,3列(行列数从0开始算)<br>之后只要把三个指针所在位置的元素做个对比, 取最小的那个元素, 就是下一个丑数了. 接着三个指针必须往下移动, 直到指向的元素都大于已知丑数才可以停下来, 再继续比较。</p><p>把丑数放入丑数数组中, 继续计算下一个丑数, 直到算出第N个丑数出来即可。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time: 2020/7/3 10:21 </span></span><br><span class="line"><span class="comment"># @Author: GraceKoo</span></span><br><span class="line"><span class="comment"># @File: interview_33.py</span></span><br><span class="line"><span class="comment"># @Desc: https://leetcode-cn.com/problems/chou-shu-lcof/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">nthUglyNumber</span><span class="params">(self, n: int)</span> -&gt; int:</span></span><br><span class="line">        dp, a, b, c = [<span class="number">1</span>] * n, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, n):</span><br><span class="line">            n2, n3, n5 = dp[a]*<span class="number">2</span>, dp[b]*<span class="number">3</span>, dp[c]*<span class="number">5</span></span><br><span class="line">            <span class="comment"># 从这三种倍数中选择一个最小的</span></span><br><span class="line">            dp[i] = min(n2, n3, n5)</span><br><span class="line">            <span class="keyword">if</span> dp[i] == n2:</span><br><span class="line">                a += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> dp[i] == n3:</span><br><span class="line">                b += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> dp[i] == n5:</span><br><span class="line">                c += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> dp[<span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">so = Solution()</span><br><span class="line">print(so.nthUglyNumber(<span class="number">10</span>))</span><br></pre></td></tr></tbody></table></figure><h1 id="Greedy-Algorithm"><a href="#Greedy-Algorithm" class="headerlink" title="Greedy Algorithm"></a>Greedy Algorithm</h1><h2 id="jump-game-ii"><a href="#jump-game-ii" class="headerlink" title="jump-game-ii"></a>jump-game-ii</h2><p>本题使用贪心算法求解，寻找<strong>局部最优解</strong>。</p><ul><li>即在可跳范围内选择能跳的最远的位置</li><li>当前位置在“2”，可跳位置为“3”，“1”，其中可跳的最远的位置为“3”，则选择“3”</li><li>当前位置在“3”，可跳位置为“1”、“1”、“4”，其中可跳的最远的位置为“4”，则选择“4”</li><li>跳跃结束，step为2</li></ul><div class="table-container"><table><thead><tr><th>步数</th><th></th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td>Step1</td><td>2（当前位置）</td><td>*3</td><td>*1</td><td>1</td><td>4</td></tr><tr><td>Step1</td><td>2</td><td>3（当前位置）</td><td>*1</td><td>*1</td><td>*4</td></tr></tbody></table></div><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time: 2020/2/17 09:45</span></span><br><span class="line"><span class="comment"># @Author: GraceKoo</span></span><br><span class="line"><span class="comment"># @File: 45_jump-game-ii.py</span></span><br><span class="line"><span class="comment"># @Desc: https://leetcode-cn.com/problems/jump-game-ii/</span></span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> List</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">jump</span><span class="params">(self, nums: List[int])</span> -&gt; int:</span></span><br><span class="line">        max_position = <span class="number">0</span>  <span class="comment"># 记录局部可跳跃的最大值</span></span><br><span class="line">        end = <span class="number">0</span>  <span class="comment"># 记录每次跳跃的最大值的下标</span></span><br><span class="line">        step = <span class="number">0</span>  <span class="comment"># 记录跳跃的步数</span></span><br><span class="line">        <span class="keyword">if</span> len(nums) &lt; <span class="number">2</span>:</span><br><span class="line">            <span class="keyword">return</span> step</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(nums)<span class="number">-1</span>):</span><br><span class="line">            <span class="comment"># 寻找局部最优解</span></span><br><span class="line">            max_position = max(max_position, nums[i] + i)</span><br><span class="line">            <span class="keyword">if</span> i == end:</span><br><span class="line">                end = max_position</span><br><span class="line">                step += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> step</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">so = Solution()</span><br><span class="line">print(so.jump([<span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">4</span>]))</span><br></pre></td></tr></tbody></table></figure><h2 id="maximum-subarray-1"><a href="#maximum-subarray-1" class="headerlink" title="maximum-subarray"></a>maximum-subarray</h2><ul><li>解法1:贪心算法</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time: 2020/2/25 09:52</span></span><br><span class="line"><span class="comment"># @Author: GraceKoo</span></span><br><span class="line"><span class="comment"># @File: 53_maximum-subarray.py</span></span><br><span class="line"><span class="comment"># @Desc:https://leetcode-cn.com/problems/maximum-subarray/</span></span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> List</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maxSubArray_GA</span><span class="params">(self, nums: List[int])</span> -&gt; int:</span></span><br><span class="line">        len_nums = len(nums)</span><br><span class="line">        current_sum = max_sum = nums[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, len_nums):</span><br><span class="line">          <span class="comment"># 寻找局部最优解</span></span><br><span class="line">            current_sum = max(nums[i], current_sum + nums[i])</span><br><span class="line">            max_sum = max(max_sum, current_sum)</span><br><span class="line">        <span class="keyword">return</span> max_sum</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">so = Solution()</span><br><span class="line">print(so.maxSubArray([<span class="number">-2</span>, <span class="number">1</span>, <span class="number">-3</span>, <span class="number">4</span>, <span class="number">-1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">-5</span>, <span class="number">4</span>]))</span><br></pre></td></tr></tbody></table></figure><ul><li>解法2:动态规划</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">maxSubArray_DP</span><span class="params">(self, nums: List[int])</span> -&gt; int:</span></span><br><span class="line">    len_nums = len(nums)</span><br><span class="line">    max_sum = nums[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, len_nums):</span><br><span class="line">        <span class="keyword">if</span> nums[i<span class="number">-1</span>] &gt; <span class="number">0</span>:</span><br><span class="line">            nums[i] += nums[i<span class="number">-1</span>]</span><br><span class="line">        max_sum = max(max_sum, nums[i])</span><br><span class="line">    <span class="keyword">return</span> max_sum</span><br></pre></td></tr></tbody></table></figure><h2 id="interview-30"><a href="#interview-30" class="headerlink" title="interview_30"></a>interview_30</h2><p>此题同<a href="https://unknown.yuzhouwan.com/posts/55663/#maximum_subarray">maximum_subarray</a></p><p><img data-src="/images/algorithm/interview_30.png" alt="interview_30"></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time: 2020/6/30 14:52 </span></span><br><span class="line"><span class="comment"># @Author: GraceKoo</span></span><br><span class="line"><span class="comment"># @File: interview_30.py</span></span><br><span class="line"><span class="comment"># @Desc: https://www.nowcoder.com/practice/6a296eb82cf844ca8539b57c23e6e9bf?tpId=13&amp;rp=1&amp;ru=%2Fta%2Fcoding-interviews&amp;</span></span><br><span class="line"><span class="comment"># qru=%2Fta%2Fcoding-interviews%2Fquestion-ranking</span></span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> List</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maxSubArray</span><span class="params">(self, nums: List[int])</span> -&gt; int:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> nums:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        max_number = nums[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, len(nums)):</span><br><span class="line">            nums[i] += max(nums[i<span class="number">-1</span>], <span class="number">0</span>)</span><br><span class="line">            max_number = max(max_number, nums[i])</span><br><span class="line">        <span class="keyword">return</span> max_number</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">so = Solution()</span><br><span class="line">print(so.maxSubArray([<span class="number">-2</span>, <span class="number">1</span>, <span class="number">-3</span>, <span class="number">4</span>, <span class="number">-1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">-5</span>, <span class="number">4</span>]))</span><br></pre></td></tr></tbody></table></figure><h2 id="merge-intervals"><a href="#merge-intervals" class="headerlink" title="merge-intervals"></a>merge-intervals</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time: 2020/2/28 11:49</span></span><br><span class="line"><span class="comment"># @Author: GraceKoo</span></span><br><span class="line"><span class="comment"># @File: 56_merge-intervals.py</span></span><br><span class="line"><span class="comment"># @Desc:https://leetcode-cn.com/problems/merge-intervals/</span></span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> List</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">merge</span><span class="params">(self, intervals: List[List[int]])</span> -&gt; List[List[int]]:</span></span><br><span class="line">        seq = sorted(intervals)  <span class="comment"># 先按照seq[0]排序，若seq[0]一样，则按照seq[1]排序</span></span><br><span class="line">        i = <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> i &lt; len(seq):</span><br><span class="line">            <span class="keyword">if</span> seq[i<span class="number">-1</span>][<span class="number">0</span>] &lt;= seq[i][<span class="number">0</span>] &lt;= seq[i<span class="number">-1</span>][<span class="number">1</span>]:</span><br><span class="line">                <span class="keyword">if</span> seq[i][<span class="number">1</span>] &gt; seq[i<span class="number">-1</span>][<span class="number">1</span>]:</span><br><span class="line">                    seq[i<span class="number">-1</span>][<span class="number">1</span>] = seq[i][<span class="number">1</span>]</span><br><span class="line">                seq.remove(seq[i])</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> seq</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">so = Solution()</span><br><span class="line">print(so.merge([[<span class="number">1</span>, <span class="number">3</span>], [<span class="number">1</span>, <span class="number">6</span>], [<span class="number">1</span>, <span class="number">80</span>], [<span class="number">15</span>, <span class="number">7</span>]]))</span><br></pre></td></tr></tbody></table></figure><h2 id="insert-interval"><a href="#insert-interval" class="headerlink" title="insert-interval"></a>insert-interval</h2><p><a href="https://leetcode-cn.com/problems/insert-interval/solution/cha-ru-qu-jian-by-leetcode/" target="_blank" rel="noopener">参考链接</a></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time: 2020/2/29 11:45</span></span><br><span class="line"><span class="comment"># @Author: GraceKoo</span></span><br><span class="line"><span class="comment"># @File: 57_insert-interval.py</span></span><br><span class="line"><span class="comment"># @Desc:https://leetcode-cn.com/problems/insert-interval/</span></span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> List</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insert</span><span class="params">(self, intervals: <span class="string">'List[Interval]'</span>, newInterval: <span class="string">'Interval'</span>)</span> -&gt; 'List[Interval]':</span></span><br><span class="line">        start, end = newInterval</span><br><span class="line">        current, n = <span class="number">0</span>, len(intervals)</span><br><span class="line">        output = []</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 将newInterval之前的序列直接添加到output中</span></span><br><span class="line">        <span class="keyword">while</span> current &lt; n <span class="keyword">and</span> intervals[current][<span class="number">0</span>] &lt; start:</span><br><span class="line">            output.append(intervals[current])</span><br><span class="line">            current += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 添加newInterval到output中</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> output <span class="keyword">and</span> output[<span class="number">-1</span>][<span class="number">1</span>] &lt; start:</span><br><span class="line">            output.append(newInterval)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            output[<span class="number">-1</span>][<span class="number">1</span>] = max(end, output[<span class="number">-1</span>][<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 添加剩余的interval</span></span><br><span class="line">        <span class="keyword">while</span> current &lt; n:</span><br><span class="line">            <span class="keyword">if</span> output[<span class="number">-1</span>][<span class="number">1</span>] &lt; intervals[current][<span class="number">0</span>]:</span><br><span class="line">                output.append(intervals[current])</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                output[<span class="number">-1</span>][<span class="number">1</span>] = max(intervals[current][<span class="number">1</span>], output[<span class="number">-1</span>][<span class="number">1</span>])</span><br><span class="line">            current += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> output</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">so = Solution()</span><br><span class="line">print(so.insert([[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">5</span>], [<span class="number">6</span>, <span class="number">7</span>], [<span class="number">8</span>, <span class="number">10</span>], [<span class="number">12</span>, <span class="number">16</span>]], [<span class="number">4</span>, <span class="number">8</span>]))</span><br></pre></td></tr></tbody></table></figure><h2 id="queue-reconstruction-by-height"><a href="#queue-reconstruction-by-height" class="headerlink" title="queue-reconstruction-by-height"></a>queue-reconstruction-by-height</h2><p>这道题的关键思想是官网所说的：<strong>“因为个子矮的人相对于个子高的人是 “看不见” 的，所以可以先安排个子高的人。”</strong></p><p>即，先按照身高对每个人进行排序，然后再根据个子矮的人所对应的索引，插入到个子高的人中，因为个子矮的人相对于个子高的人是 <strong>“看不见”</strong> 的，所以插入过程中并不会影响前面已经排好序的个子高的人。</p><p>过程如下：具体<a href="https://leetcode-cn.com/problems/queue-reconstruction-by-height/solution/gen-ju-shen-gao-zhong-jian-dui-lie-by-leetcode/" target="_blank" rel="noopener">解题思路</a>见官网。</p><ul><li>排序：<ul><li>按高度降序排列。</li><li>在同一高度的人中，按 <code>k</code> 值的升序排列。</li></ul></li><li>逐个地把它们放在输出队列中，索引等于它们的 <code>k</code> 值。</li><li>返回输出队列</li></ul><p><img data-src="/images/algorithm/queue-reconstruction-by-height.png" alt="queue-reconstruction-by-height"></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time: 2020/5/14 19:37 </span></span><br><span class="line"><span class="comment"># @Author: GraceKoo</span></span><br><span class="line"><span class="comment"># @File: 406_queue-reconstruction-by-height.py</span></span><br><span class="line"><span class="comment"># @Desc: https://leetcode-cn.com/problems/queue-reconstruction-by-height/</span></span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> List</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reconstructQueue</span><span class="params">(self, people: List[List[int]])</span> -&gt; List[List[int]]:</span></span><br><span class="line">        <span class="comment"># 按照x[0]的逆序（所以为-x[0]），x[1]的正序进行排序</span></span><br><span class="line">        people.sort(key=<span class="keyword">lambda</span> x: (-x[<span class="number">0</span>], x[<span class="number">1</span>]), reverse=<span class="literal">False</span>)</span><br><span class="line">        out_put_people = []</span><br><span class="line">        <span class="comment"># 根据索引，依次做插入操作</span></span><br><span class="line">        <span class="keyword">for</span> person <span class="keyword">in</span> people:</span><br><span class="line">            out_put_people.insert(person[<span class="number">1</span>], person)</span><br><span class="line">        <span class="keyword">return</span> out_put_people</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">so = Solution()</span><br><span class="line">print(so.reconstructQueue([[<span class="number">7</span>, <span class="number">0</span>], [<span class="number">4</span>, <span class="number">4</span>], [<span class="number">7</span>, <span class="number">1</span>], [<span class="number">5</span>, <span class="number">2</span>], [<span class="number">6</span>, <span class="number">1</span>], [<span class="number">5</span>, <span class="number">0</span>]]))</span><br><span class="line"><span class="comment"># out_put : [[5, 0], [7, 0], [5, 2], [6, 1], [4, 4], [7, 1]]</span></span><br></pre></td></tr></tbody></table></figure><h2 id="remove-duplicate-letters"><a href="#remove-duplicate-letters" class="headerlink" title="remove-duplicate-letters"></a>remove-duplicate-letters</h2><p><a href="https://leetcode-cn.com/problems/remove-duplicate-letters/solution/zhan-by-liweiwei1419/" target="_blank" rel="noopener">参考链接</a></p><p><img data-src="/images/algorithm/remove-duplicate-letters.png" alt="remove-duplicate-letters"></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time: 2020/5/17 23:06 </span></span><br><span class="line"><span class="comment"># @Author: GraceKoo</span></span><br><span class="line"><span class="comment"># @File: 316_remove-duplicate-letters.py</span></span><br><span class="line"><span class="comment"># @Desc: https://leetcode-cn.com/problems/remove-duplicate-letters/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">removeDuplicateLetters</span><span class="params">(self, s: str)</span> -&gt; str:</span></span><br><span class="line">        <span class="keyword">if</span> s == <span class="string">""</span>:</span><br><span class="line">            <span class="keyword">return</span> s</span><br><span class="line">        stack = []</span><br><span class="line">        value_in_stack = set()</span><br><span class="line">        last_occurance = {k:i <span class="keyword">for</span> i, k <span class="keyword">in</span> enumerate(s)}</span><br><span class="line">        <span class="keyword">for</span> i, c <span class="keyword">in</span> enumerate(s):</span><br><span class="line">            <span class="keyword">if</span> c <span class="keyword">not</span> <span class="keyword">in</span> value_in_stack:</span><br><span class="line">                <span class="comment"># stack[-1] &gt; c:如果栈顶元素的字典序大于当前的c</span></span><br><span class="line">                <span class="comment"># last_occurance[stack[-1]] &gt; i：且栈顶元素还会在后续s中出现</span></span><br><span class="line">                <span class="comment"># 则将栈顶元素弹出，并压入当前元素</span></span><br><span class="line">                <span class="keyword">while</span> stack <span class="keyword">and</span> stack[<span class="number">-1</span>] &gt; c <span class="keyword">and</span> last_occurance[stack[<span class="number">-1</span>]] &gt; i:</span><br><span class="line">                    value_in_stack.discard(stack.pop())</span><br><span class="line">                stack.append(c)</span><br><span class="line">                value_in_stack.add(c)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span>.join(stack)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">so = Solution()</span><br><span class="line">print(so.removeDuplicateLetters(<span class="string">"cbacdcbc"</span>))</span><br></pre></td></tr></tbody></table></figure><h1 id="String"><a href="#String" class="headerlink" title="String"></a>String</h1><p>在合并两个数组或者字符串时，如果从前往后复制每个数字（或者字符）需要重复移动数字（或字符）多次，则可以考虑从后往前复制，就能减少移动的次数。</p><h2 id="valid-number-1"><a href="#valid-number-1" class="headerlink" title="valid-number"></a>valid-number</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time: 2020/3/8 00:41</span></span><br><span class="line"><span class="comment"># @Author: GraceKoo</span></span><br><span class="line"><span class="comment"># @File: 65_valid-number.py</span></span><br><span class="line"><span class="comment"># @Desc:https://leetcode-cn.com/problems/valid-number/</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isNumber</span><span class="params">(self, s: str)</span> -&gt; bool:</span></span><br><span class="line">        <span class="comment"># return bool(re.match(r' *[+-]?([0-9]+(\.[0-9]*)?|\.[0-9]+)(e[+-]?[0-9]+)? *$', s))</span></span><br><span class="line">        s = s.strip()</span><br><span class="line">        <span class="comment"># 去除s两边的空白符</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> s:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="comment"># 去除"+"、"-"</span></span><br><span class="line">        <span class="keyword">if</span> s[<span class="number">0</span>] <span class="keyword">in</span> [<span class="string">"+"</span>, <span class="string">"-"</span>]:</span><br><span class="line">            s = s[<span class="number">1</span>:]</span><br><span class="line">        <span class="comment"># 判断是否含有e</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">"e"</span> <span class="keyword">in</span> s:</span><br><span class="line">            s_list = s.split(<span class="string">"e"</span>)</span><br><span class="line">            <span class="comment"># 说明有两个e</span></span><br><span class="line">            <span class="keyword">if</span> len(s_list) &gt; <span class="number">2</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            <span class="comment"># 去掉e前面的"."</span></span><br><span class="line">            s_list[<span class="number">0</span>] = s_list[<span class="number">0</span>].replace(<span class="string">"."</span>, <span class="string">""</span>, <span class="number">1</span>)</span><br><span class="line">            <span class="comment"># 去掉e后面的"+、"-"</span></span><br><span class="line">            <span class="keyword">if</span> len(s_list[<span class="number">1</span>]) &gt; <span class="number">0</span> <span class="keyword">and</span> s_list[<span class="number">1</span>][<span class="number">0</span>] <span class="keyword">in</span> [<span class="string">"+"</span>, <span class="string">"-"</span>]:</span><br><span class="line">                s_list[<span class="number">1</span>] = s_list[<span class="number">1</span>].replace(s_list[<span class="number">1</span>][<span class="number">0</span>], <span class="string">""</span>, <span class="number">1</span>)</span><br><span class="line">            <span class="comment"># 判断是否为数字</span></span><br><span class="line">            <span class="keyword">if</span> s_list[<span class="number">0</span>].isnumeric() <span class="keyword">and</span> s_list[<span class="number">1</span>].isnumeric():</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            s = s.replace(<span class="string">"."</span>, <span class="string">""</span>, <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">if</span> s.isnumeric():</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">so = Solution()</span><br><span class="line">print(so.isNumber(<span class="string">"53.5e93"</span>))</span><br></pre></td></tr></tbody></table></figure><h2 id="text-justification"><a href="#text-justification" class="headerlink" title="text-justification"></a>text-justification</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time: 2020/3/9 19:20</span></span><br><span class="line"><span class="comment"># @Author: GraceKoo</span></span><br><span class="line"><span class="comment"># @File: 68_text-justification.py</span></span><br><span class="line"><span class="comment"># @Desc:https://leetcode-cn.com/problems/text-justification/</span></span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> List</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fullJustify</span><span class="params">(self, words: List[str], maxWidth: int)</span> -&gt; List[str]:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> words:</span><br><span class="line">            <span class="keyword">return</span> []</span><br><span class="line">        result = []</span><br><span class="line">        current_chars_number = <span class="number">0</span>  <span class="comment"># 当前行存储的字符个数(不包括空格)</span></span><br><span class="line">        current_words_number = <span class="number">0</span>  <span class="comment"># 当前行存储的单词个数，用于统计</span></span><br><span class="line">        word_list = []  <span class="comment"># 当前行的单词列表</span></span><br><span class="line">        <span class="keyword">for</span> index, value <span class="keyword">in</span> enumerate(words):</span><br><span class="line">            current_word_length = len(value)</span><br><span class="line">            <span class="comment"># 当前字符数量大于最大限制</span></span><br><span class="line">            <span class="keyword">if</span> current_chars_number + current_word_length + current_words_number &gt; maxWidth:</span><br><span class="line">                <span class="keyword">if</span> current_words_number == <span class="number">1</span>:</span><br><span class="line">                    result.append(word_list[<span class="number">0</span>] + <span class="string">" "</span> * (maxWidth - current_chars_number))</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    blank_space_number = maxWidth - current_chars_number  <span class="comment"># 当前的空格数量</span></span><br><span class="line">                    <span class="keyword">if</span> blank_space_number % (current_words_number - <span class="number">1</span>) == <span class="number">0</span>:  <span class="comment"># 空格可以平均分配</span></span><br><span class="line">                        result.append((<span class="string">" "</span>* (blank_space_number // (current_words_number - <span class="number">1</span>))).join(word_list))</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        <span class="comment"># 空格不能平均分配</span></span><br><span class="line">                        more_blankspace = blank_space_number % (current_words_number - <span class="number">1</span>)  <span class="comment"># 多余的空格</span></span><br><span class="line">                        stand_blankspace = blank_space_number // (current_words_number - <span class="number">1</span>)  <span class="comment"># 标准的最少空格</span></span><br><span class="line">                        res = word_list[<span class="number">0</span>]</span><br><span class="line">                        <span class="keyword">for</span> i <span class="keyword">in</span> range(more_blankspace):</span><br><span class="line">                            res += <span class="string">" "</span> * (stand_blankspace+<span class="number">1</span>) + word_list[i+<span class="number">1</span>]</span><br><span class="line">                        <span class="keyword">for</span> i <span class="keyword">in</span> range(more_blankspace+<span class="number">1</span>, len(word_list)):</span><br><span class="line">                            res += <span class="string">" "</span> * stand_blankspace + word_list[i]</span><br><span class="line">                        result.append(res)</span><br><span class="line">                current_chars_number = current_word_length</span><br><span class="line">                current_words_number = <span class="number">1</span></span><br><span class="line">                word_list = [value]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                current_chars_number += current_word_length</span><br><span class="line">                current_words_number += <span class="number">1</span></span><br><span class="line">                word_list.append(value)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">so = Solution()</span><br><span class="line">print(so.fullJustify([<span class="string">"This"</span>, <span class="string">"is"</span>, <span class="string">"an"</span>, <span class="string">"example"</span>, <span class="string">"of"</span>, <span class="string">"text"</span>, <span class="string">"justification."</span>], <span class="number">16</span>))</span><br></pre></td></tr></tbody></table></figure><h2 id="simplify-path"><a href="#simplify-path" class="headerlink" title="simplify-path"></a>simplify-path</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time: 2020/3/12 12:01</span></span><br><span class="line"><span class="comment"># @Author: GraceKoo</span></span><br><span class="line"><span class="comment"># @File: 71_simplify-path.py</span></span><br><span class="line"><span class="comment"># @Desc:https://leetcode-cn.com/problems/simplify-path/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">simplifyPath</span><span class="params">(self, path: str)</span> -&gt; str:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> path:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">""</span></span><br><span class="line">        result_list = []</span><br><span class="line">        path = path.split(<span class="string">"/"</span>)</span><br><span class="line">        <span class="keyword">for</span> value <span class="keyword">in</span> path:</span><br><span class="line">            <span class="keyword">if</span> value == <span class="string">".."</span>:</span><br><span class="line">                <span class="keyword">if</span> result_list:</span><br><span class="line">                    result_list.pop()</span><br><span class="line">            <span class="keyword">elif</span> value <span class="keyword">and</span> value != <span class="string">"."</span>:</span><br><span class="line">                result_list.append(value)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"/"</span> + <span class="string">"/"</span>.join(result_list)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">so = Solution()</span><br><span class="line">print(so.simplifyPath(<span class="string">"/a/./b/../../c/"</span>))</span><br></pre></td></tr></tbody></table></figure><h2 id="Interview-2"><a href="#Interview-2" class="headerlink" title="Interview_2"></a>Interview_2</h2><ul><li>方法一：时间复杂度<code>O(n)</code>,空间复杂度<code>O(1)</code></li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time: 2020/5/8 22:38 </span></span><br><span class="line"><span class="comment"># @Author: GraceKoo</span></span><br><span class="line"><span class="comment"># @File: interview_2.py</span></span><br><span class="line"><span class="comment"># @Desc: https://leetcode-cn.com/problems/ti-huan-kong-ge-lcof/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">replaceSpace</span><span class="params">(self, s: str)</span> -&gt; str:</span></span><br><span class="line">        <span class="keyword">return</span> s.replace(<span class="string">" "</span>, <span class="string">"%20"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">so = Solution()</span><br><span class="line">print(so.replaceSpace(<span class="string">"We are happy."</span>))</span><br></pre></td></tr></tbody></table></figure><ul><li>方法二:时间复杂度<code>O(n)</code>,空间复杂度<code>O(n)</code></li></ul><p>这里用list而不是str直接处理的原因是。str是不可变数据类型，也就是说每在一个str后面加了一个字符，都是新的str。这样导致空间开销太大。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time: 2020/5/8 22:38 </span></span><br><span class="line"><span class="comment"># @Author: GraceKoo</span></span><br><span class="line"><span class="comment"># @File: interview_2.py</span></span><br><span class="line"><span class="comment"># @Desc: https://leetcode-cn.com/problems/ti-huan-kong-ge-lcof/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">replaceSpace</span><span class="params">(self, s: str)</span> -&gt; str:</span></span><br><span class="line">        s_list = list()</span><br><span class="line">        <span class="keyword">for</span> s_value <span class="keyword">in</span> s:</span><br><span class="line">            <span class="keyword">if</span> s_value == <span class="string">" "</span>:</span><br><span class="line">                s_list.append(<span class="string">"%20"</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                s_list.append(s_value)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span>.join(s_list)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">so = Solution()</span><br><span class="line">print(so.replaceSpace(<span class="string">"We are happy."</span>))</span><br></pre></td></tr></tbody></table></figure><h1 id="Tree"><a href="#Tree" class="headerlink" title="Tree"></a>Tree</h1><p><img data-src="/images/algorithm/binary-tree.png" alt="binary-tree"></p><h2 id="binary-tree-inorder-traversal"><a href="#binary-tree-inorder-traversal" class="headerlink" title="binary-tree-inorder-traversal"></a>binary-tree-inorder-traversal</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time: 2020/4/12 22:43</span></span><br><span class="line"><span class="comment"># @Author: GraceKoo</span></span><br><span class="line"><span class="comment"># @File: 94_binary-tree-inorder-traversal.py</span></span><br><span class="line"><span class="comment"># @Desc: https://leetcode-cn.com/problems/binary-tree-inorder-traversal/</span></span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> List</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        self.val = x</span><br><span class="line">        self.left = <span class="literal">None</span></span><br><span class="line">        self.right = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inorderTraversal</span><span class="params">(self, root: TreeNode)</span> -&gt; List[int]:</span></span><br><span class="line">        res = []</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">backtrack</span><span class="params">(root)</span>:</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            backtrack(root.left)</span><br><span class="line">            res.append(root.val)</span><br><span class="line">            backtrack(root.right)</span><br><span class="line">        backtrack(root)</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">root = TreeNode(<span class="number">1</span>)</span><br><span class="line">root.left = TreeNode(<span class="number">2</span>)</span><br><span class="line">root.right = TreeNode(<span class="number">3</span>)</span><br><span class="line">so = Solution()</span><br><span class="line">print(so.inorderTraversal(root))</span><br></pre></td></tr></tbody></table></figure><h2 id="unique-binary-search-trees-ii"><a href="#unique-binary-search-trees-ii" class="headerlink" title="unique-binary-search-trees-ii"></a>unique-binary-search-trees-ii</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time: 2020/4/14 12:28 </span></span><br><span class="line"><span class="comment"># @Author: GraceKoo</span></span><br><span class="line"><span class="comment"># @File: 95_unique-binary-search-trees-ii.py</span></span><br><span class="line"><span class="comment"># @Desc:https://leetcode-cn.com/problems/unique-binary-search-trees-ii/</span></span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> List</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        self.val = x</span><br><span class="line">        self.left = <span class="literal">None</span></span><br><span class="line">        self.right = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">generateTrees</span><span class="params">(self, n: int)</span> -&gt; List[TreeNode]:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">generate_tree</span><span class="params">(start, end)</span>:</span></span><br><span class="line">            <span class="keyword">if</span> start &gt; end:</span><br><span class="line">                <span class="keyword">return</span> [<span class="literal">None</span>, ]</span><br><span class="line">            all_trees = []</span><br><span class="line"></span><br><span class="line">            <span class="comment"># pick a root</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(start, end+<span class="number">1</span>):</span><br><span class="line">                left_tree = generate_tree(start, i)</span><br><span class="line">                right_tree = generate_tree(i+<span class="number">1</span>, end)</span><br><span class="line">                <span class="keyword">for</span> left <span class="keyword">in</span> left_tree:</span><br><span class="line">                    <span class="keyword">for</span> right <span class="keyword">in</span> right_tree:</span><br><span class="line">                        current_tree = TreeNode(i)</span><br><span class="line">                        current_tree.left = TreeNode(left)</span><br><span class="line">                        current_tree.right = TreeNode(right)</span><br><span class="line">                        all_trees.append(current_tree)</span><br><span class="line">            <span class="keyword">return</span> all_trees</span><br><span class="line">        <span class="keyword">return</span> generate_tree(<span class="number">1</span>, n) <span class="keyword">if</span> n <span class="keyword">else</span> []</span><br></pre></td></tr></tbody></table></figure><h2 id="unique-binary-search-trees"><a href="#unique-binary-search-trees" class="headerlink" title="unique-binary-search-trees"></a>unique-binary-search-trees</h2><p>假设n个节点存在</p><p>令G(n)的从1到n可以形成二叉排序树个数</p><p>令f(i)为以i为根的二叉搜索树的个数</p><p>即有: <code>G(n) = f(1) + f(2) + f(3) + f(4) + ... + f(n)</code></p><p>n为根节点，当i为根节点时，其左子树节点个数为<code>[1,2,3,...,i-1]</code>，右子树节点个数为<code>[i+1,i+2,...n]</code>，所以当i为根节点时，其左子树节点个数为i-1个，右子树节点为n-i，即<code>f(i) = G(i-1)*G(n-i)</code></p><p>上面两式可得:G(n) = <code>G(0)*G(n-1) + G(1)*(n-2) +...+ G(n-1)*G(0)</code></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time: 2020/4/13 18:49 </span></span><br><span class="line"><span class="comment"># @Author: GraceKoo</span></span><br><span class="line"><span class="comment"># @File: 96_unique-binary-search-trees.py</span></span><br><span class="line"><span class="comment"># @Desc: https://leetcode-cn.com/problems/unique-binary-search-trees/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">numTrees</span><span class="params">(self, n: int)</span> -&gt; int:</span></span><br><span class="line">        <span class="keyword">if</span> n &lt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        dp = [<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> range(n+<span class="number">1</span>)]</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">1</span></span><br><span class="line">        dp[<span class="number">1</span>] = <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>, n+<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(i):</span><br><span class="line">                dp[i] += dp[j] * dp[i - j - <span class="number">1</span>]</span><br><span class="line">        <span class="keyword">return</span> dp[<span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">so = Solution()</span><br><span class="line">print(so.numTrees(<span class="number">3</span>))</span><br></pre></td></tr></tbody></table></figure><h2 id="validate-binary-search-tree"><a href="#validate-binary-search-tree" class="headerlink" title="validate-binary-search-tree"></a>validate-binary-search-tree</h2><p>需要在遍历树的同时保留结点的上界与下界，在比较时不仅比较子结点的值，也要与上下界比较。这样才能保证节点的所有左子树都小于结点值，右子树都大于结点值。</p><p><a href="https://leetcode-cn.com/problems/validate-binary-search-tree/solution/yan-zheng-er-cha-sou-suo-shu-by-leetcode/" target="_blank" rel="noopener">参考链接</a></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time: 2020/4/14 22:59 </span></span><br><span class="line"><span class="comment"># @Author: GraceKoo</span></span><br><span class="line"><span class="comment"># @File: 98_validate-binary-search-tree.py</span></span><br><span class="line"><span class="comment"># @Desc: https://leetcode-cn.com/problems/validate-binary-search-tree/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        self.val = x</span><br><span class="line">        self.left = <span class="literal">None</span></span><br><span class="line">        self.right = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isValidBST</span><span class="params">(self, root: TreeNode)</span> -&gt; bool:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        stack = [(root, float(<span class="string">'-inf'</span>), float(<span class="string">'inf'</span>)), ]</span><br><span class="line">        <span class="comment"># 深度优先遍历</span></span><br><span class="line">        <span class="keyword">while</span> stack:</span><br><span class="line">            root, lower, upper = stack.pop()</span><br><span class="line">            <span class="comment"># 防止append一个空子树</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            val = root.val</span><br><span class="line">            <span class="keyword">if</span> val &lt;= lower <span class="keyword">or</span> val &gt;= upper:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            stack.append((root.right, val, upper)) <span class="comment"># 右子树的所有值都要大于根节点</span></span><br><span class="line">            stack.append((root.left, lower, val))  <span class="comment"># 左子树的所有值都要小于根节点</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></tbody></table></figure><h2 id="recover-binary-search-tree"><a href="#recover-binary-search-tree" class="headerlink" title="recover-binary-search-tree"></a>recover-binary-search-tree</h2><p><a href="https://leetcode-cn.com/problems/recover-binary-search-tree/solution/zhong-xu-bian-li-by-powcai/" target="_blank" rel="noopener">参考链接</a></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time: 2020/4/16 22:36</span></span><br><span class="line"><span class="comment"># @Author: GraceKoo</span></span><br><span class="line"><span class="comment"># @File: 99_recover-binary-search-tree.py</span></span><br><span class="line"><span class="comment"># @Desc: https://leetcode-cn.com/problems/recover-binary-search-tree/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        self.val = x</span><br><span class="line">        self.left = <span class="literal">None</span></span><br><span class="line">        self.right = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.pre_node = TreeNode(float(<span class="string">"-inf"</span>))</span><br><span class="line">        self.second_node = <span class="literal">None</span></span><br><span class="line">        self.first_node = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">recoverTree</span><span class="params">(self, root: TreeNode)</span> -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Do not return anything, modify root in-place instead.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="comment"># 中序遍历：找到第一个大于左子树的节点赋值为first_node，第一个小于右子树的节点赋值为second_node</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">in_order</span><span class="params">(root)</span>:</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            in_order(root.left)</span><br><span class="line">            <span class="keyword">if</span> self.first_node <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">and</span> self.pre_node.val &gt;= root.val:</span><br><span class="line">                self.first_node = self.pre_node</span><br><span class="line">            <span class="keyword">if</span> self.first_node <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">and</span> self.pre_node.val &gt;= root.val:</span><br><span class="line">                self.second_node = root</span><br><span class="line">            self.pre_node = root</span><br><span class="line">            in_order(root.right)</span><br><span class="line">        in_order(root)</span><br><span class="line">        self.first_node.val, self.second_node.val = self.second_node.val, self.first_node.val</span><br></pre></td></tr></tbody></table></figure><h2 id="same-tree"><a href="#same-tree" class="headerlink" title="same-tree"></a>same-tree</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time: 2020/4/16 12:29</span></span><br><span class="line"><span class="comment"># @Author: GraceKoo</span></span><br><span class="line"><span class="comment"># @File: 100_same-tree.py</span></span><br><span class="line"><span class="comment"># @Desc: https://leetcode-cn.com/problems/same-tree/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        self.val = x</span><br><span class="line">        self.left = <span class="literal">None</span></span><br><span class="line">        self.right = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isSameTree</span><span class="params">(self, p: TreeNode, q: TreeNode)</span> -&gt; bool:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> p <span class="keyword">and</span> <span class="keyword">not</span> q:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> p <span class="keyword">or</span> <span class="keyword">not</span> q:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">if</span> p.val != q.val:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> self.isSameTree(p.left, q.left) <span class="keyword">and</span> self.isSameTree(p.right, q.right)</span><br></pre></td></tr></tbody></table></figure><h1 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h1><h2 id="introduction"><a href="#introduction" class="headerlink" title="introduction"></a>introduction</h2><div class="table-container"><table><thead><tr><th>排序算法</th><th>平均时间复杂度</th><th>最差时间复杂度</th><th>额外空间复杂度</th><th>稳定性</th><th>备注</th></tr></thead><tbody><tr><td>冒泡排序</td><td>$o(n^2)$</td><td>$o(n^2)$</td><td>$o(1)$</td><td>稳定</td><td>n小时效果好</td></tr><tr><td>选择排序</td><td>$o(n^2)$</td><td>$o(n^2)$</td><td>$o(1)$</td><td>不稳定</td><td>n小时效果好</td></tr><tr><td>交换排序</td><td>$o(n^2)$</td><td>$o(n^2)$</td><td>$o(1)$</td><td>不稳定</td><td>n小时效果好</td></tr><tr><td>插入排序</td><td>$o(n^2)$</td><td>$o(n^2)$</td><td>$o(1)$</td><td>稳定</td><td>n小时效果好</td></tr><tr><td>快速排序</td><td>$o(nlogn)$</td><td>$o(n^2)$</td><td>$o(nlogn)-o(n)$</td><td>不稳定</td><td>n大时效果好</td></tr><tr><td>归并排序</td><td>$o(nlogn)$</td><td>$o(nlogn)$</td><td>$o(n)$</td><td>稳定</td><td>n大时效果好</td></tr><tr><td>堆排序</td><td>$o(nlogn)$</td><td>$o(nlogn)$</td><td>$o(1)$</td><td>不稳定</td><td>n大时效果好</td></tr><tr><td>希尔排序</td><td>$o(nlogn)$</td><td>$o(n^s)$ 1&lt;s&lt;2</td><td>$o(1)$</td><td>不稳定</td><td>s是所选分组</td></tr><tr><td>基数排序</td><td>$o(log_RB)($线性复杂度)</td><td>$o(log_RB)$</td><td>$o(n)$</td><td>稳定</td><td>B是真数(0-9)，R是基数(个十百)</td></tr><tr><td>计数排序</td><td>$o(n)$</td><td>$o(nlogn)$</td><td></td><td>稳定</td><td>0</td></tr><tr><td>划分排序</td><td>$o(n)$</td><td>0</td><td>0</td><td>稳定</td><td>0</td></tr><tr><td>桶排序</td><td>$o(n)$</td><td>0</td><td>0</td><td>稳定</td><td>0</td></tr></tbody></table></div><p><a href="https://leetcode-cn.com/problems/sort-an-array/solution/python-shi-xian-de-shi-da-jing-dian-pai-xu-suan-fa/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/sort-an-array/solution/python-shi-xian-de-shi-da-jing-dian-pai-xu-suan-fa/</a></p><h3 id="桶排序"><a href="#桶排序" class="headerlink" title="桶排序"></a>桶排序</h3><h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><h3 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h3><p>堆排序的基本思想是：将待排序序列构造成一个大顶堆，此时，整个序列的最大值就是堆顶的根节点。将其与末尾元素进行交换，此时末尾就为最大值。然后将剩余n-1个元素重新构造成一个堆，这样会得到n个元素的次小值。如此反复执行，便能得到一个有序序列了。</p><p><strong>a.将无需序列构建成一个堆，根据升序降序需求选择大顶堆或小顶堆;</strong></p><p><strong>b.将堆顶元素与末尾元素交换，将最大元素”沉”到数组末端;</strong></p><p><strong>c.重新调整结构，使其满足堆定义，然后继续交换堆顶元素与当前末尾元素，反复执行调整+交换步骤，直到整个序列有序。</strong></p><h3 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h3><h2 id="largest-number"><a href="#largest-number" class="headerlink" title="largest-number"></a>largest-number</h2><p>自定义排序</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time: 2020/4/23 21:18</span></span><br><span class="line"><span class="comment"># @Author: GraceKoo</span></span><br><span class="line"><span class="comment"># @File: 179_largest-number.py</span></span><br><span class="line"><span class="comment"># @Desc: https://leetcode-cn.com/problems/largest-number/</span></span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> List</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LargerNumKey</span><span class="params">(str)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__lt__</span><span class="params">(x, y)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> x + y &lt; y + x</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">largestNumber</span><span class="params">(self, nums)</span>:</span></span><br><span class="line">        return_value = <span class="string">""</span>.join(sorted(map(str, nums), key=LargerNumKey, reverse=<span class="literal">True</span>)).lstrip(<span class="string">"0"</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"0"</span> <span class="keyword">if</span> return_value[<span class="number">0</span>] == <span class="string">"0"</span> <span class="keyword">else</span> return_value</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">so = Solution()</span><br><span class="line">print(so.largestNumber([<span class="number">3</span>, <span class="number">30</span>, <span class="number">34</span>, <span class="number">5</span>, <span class="number">9</span>]))</span><br></pre></td></tr></tbody></table></figure><h2 id="interview-32"><a href="#interview-32" class="headerlink" title="interview_32"></a>interview_32</h2><p>同上一题：largest-number，这题不加任何技巧。<strong>类似于冒泡排序。</strong></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time: 2020/7/2 11:54 </span></span><br><span class="line"><span class="comment"># @Author: GraceKoo</span></span><br><span class="line"><span class="comment"># @File: interview_32.py</span></span><br><span class="line"><span class="comment"># @Desc: https://leetcode-cn.com/problems/ba-shu-zu-pai-cheng-zui-xiao-de-shu-lcof/</span></span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> List</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">minNumber</span><span class="params">(self, nums)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type nums: List[int]</span></span><br><span class="line"><span class="string">        :rtype: str</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> nums:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(nums)):</span><br><span class="line">            nums[i] = str(nums[i])</span><br><span class="line">        <span class="comment"># 冒泡排序：每次把最小的元素放在第一位</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(nums)):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(i + <span class="number">1</span>, len(nums)):</span><br><span class="line">                <span class="keyword">if</span> (nums[i] + nums[j]) &gt; (nums[j] + nums[i]):</span><br><span class="line">                    nums[i], nums[j] = nums[j], nums[i]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">''</span>.join(nums)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">so = Solution()</span><br><span class="line">print(so.minNumber([<span class="number">3</span>, <span class="number">30</span>, <span class="number">34</span>, <span class="number">5</span>, <span class="number">9</span>]))</span><br></pre></td></tr></tbody></table></figure><h2 id="Top-K-Sort"><a href="#Top-K-Sort" class="headerlink" title="Top-K Sort"></a>Top-K Sort</h2><h3 id="kth-largest-element-in-an-array"><a href="#kth-largest-element-in-an-array" class="headerlink" title="kth-largest-element-in-an-array"></a>kth-largest-element-in-an-array</h3><p>堆排序</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time: 2020/4/25 12:43</span></span><br><span class="line"><span class="comment"># @Author: GraceKoo</span></span><br><span class="line"><span class="comment"># @File: 215_kth-largest-element-in-an-array.py</span></span><br><span class="line"><span class="comment"># @Desc: https://leetcode-cn.com/problems/kth-largest-element-in-an-array/</span></span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> List</span><br><span class="line"><span class="keyword">import</span> heapq</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findKthLargest</span><span class="params">(self, nums: List[int], k: int)</span> -&gt; int:</span></span><br><span class="line">        <span class="keyword">return</span> heapq.nlargest(<span class="number">2</span>, nums)[<span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">so = Solution()</span><br><span class="line">print(so.findKthLargest([<span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">4</span>], <span class="number">2</span>))</span><br></pre></td></tr></tbody></table></figure><h3 id="interview-29"><a href="#interview-29" class="headerlink" title="interview_29"></a>interview_29</h3><p><a href="https://leetcode-cn.com/problems/zui-xiao-de-kge-shu-lcof/solution/tu-jie-top-k-wen-ti-de-liang-chong-jie-fa-you-lie-/" target="_blank" rel="noopener">解题思路</a></p><ol><li>方法一：堆排序</li></ol><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time: 2020/6/29 16:40 </span></span><br><span class="line"><span class="comment"># @Author: GraceKoo</span></span><br><span class="line"><span class="comment"># @File: interview_29.py</span></span><br><span class="line"><span class="comment"># @Desc: https://www.nowcoder.com/practice/6a296eb82cf844ca8539b57c23e6e9bf?</span></span><br><span class="line"><span class="comment"># tpId=13&amp;rp=1&amp;ru=%2Fta%2Fcoding-interviews&amp;qru=%2Fta%2Fcoding-interviews%2Fquestion-ranking</span></span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> List</span><br><span class="line"><span class="keyword">import</span> heapq</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findKthLargest</span><span class="params">(self, arr: List[int], k: int)</span> -&gt; int:</span></span><br><span class="line">        <span class="keyword">return</span> heapq.nsmallest(k, arr)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">so = Solution()</span><br><span class="line">print(so.findKthLargest([<span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">4</span>], <span class="number">2</span>))</span><br></pre></td></tr></tbody></table></figure><ol><li>方法2：利用快速排序思想</li></ol><p><img data-src="/images/algorithm/interview_29.png" alt="interview_29"></p><p>这个 partition 操作是原地进行的，需要 O(n)的时间，接下来，快速排序会递归地排序左右两侧的数组。而快速选择（quick select）算法的不同之处在于，接下来只需要递归地选择一侧的数组。快速选择算法想当于一个“不完全”的快速排序，因为我们只需要知道最小的 k 个数是哪些，并不需要知道它们的顺序。</p><p>我们的目的是寻找最小的 k 个数。假设经过一次 partition 操作，枢纽元素位于下标 m，也就是说，左侧的数组有 m 个元素，是原数组中最小的 m 个数。那么：</p><ul><li>若 k = mk=m，我们就找到了最小的 kk 个数，就是左侧的数组；</li><li>若 k&lt;mk&lt;m ，则最小的 kk 个数一定都在左侧数组中，我们只需要对左侧数组递归地 parition 即可；</li><li>若 k&gt;mk&gt;m，则左侧数组中的 mm 个数都属于最小的 kk 个数，我们还需要在右侧数组中寻找最小的 k-mk−m 个数，对右侧数组递归地 partition 即可。</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time: 2020/6/29 16:40 </span></span><br><span class="line"><span class="comment"># @Author: GraceKoo</span></span><br><span class="line"><span class="comment"># @File: interview_29.py</span></span><br><span class="line"><span class="comment"># @Desc: https://www.nowcoder.com/practice/6a296eb82cf844ca8539b57c23e6e9bf?</span></span><br><span class="line"><span class="comment"># tpId=13&amp;rp=1&amp;ru=%2Fta%2Fcoding-interviews&amp;qru=%2Fta%2Fcoding-interviews%2Fquestion-ranking</span></span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> List</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getLeastNumbers</span><span class="params">(self, arr: List[int], k: int)</span> -&gt; List[int]:</span></span><br><span class="line">        <span class="keyword">if</span> k &lt;= <span class="number">0</span> <span class="keyword">or</span> k &gt; len(arr):</span><br><span class="line">            <span class="keyword">return</span> []</span><br><span class="line">        start = <span class="number">0</span></span><br><span class="line">        end = len(arr) - <span class="number">1</span></span><br><span class="line">        pivot = self.quicksort(arr, start, end)</span><br><span class="line">        <span class="keyword">while</span> pivot != k - <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">if</span> pivot &gt; k - <span class="number">1</span>:</span><br><span class="line">                end = pivot - <span class="number">1</span></span><br><span class="line">                pivot = self.quicksort(arr, start, end)</span><br><span class="line">            <span class="keyword">if</span> pivot &lt; k - <span class="number">1</span>:</span><br><span class="line">                start = pivot + <span class="number">1</span></span><br><span class="line">                pivot = self.quicksort(arr, start, end)</span><br><span class="line">        <span class="keyword">return</span> arr[:k]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">quicksort</span><span class="params">(self, arr, left, right)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        简单版快速排序</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        i = left</span><br><span class="line">        j = right</span><br><span class="line">        temp = arr[left]</span><br><span class="line">        <span class="keyword">while</span> i &lt; j:</span><br><span class="line">            <span class="keyword">while</span> i &lt; j <span class="keyword">and</span> arr[j] &gt;= temp:</span><br><span class="line">                j -= <span class="number">1</span></span><br><span class="line">            arr[i] = arr[j]</span><br><span class="line">            <span class="keyword">while</span> i &lt; j <span class="keyword">and</span> arr[i] &lt; temp:</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">            arr[j] = arr[i]</span><br><span class="line">        arr[i] = temp</span><br><span class="line">        <span class="keyword">return</span> i</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">so = Solution()</span><br><span class="line">print(so.getLeastNumbers([<span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>], <span class="number">2</span>))</span><br></pre></td></tr></tbody></table></figure><h2 id="sort-an-array"><a href="#sort-an-array" class="headerlink" title="sort-an-array"></a>sort-an-array</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time: 2020/4/28 22:52 </span></span><br><span class="line"><span class="comment"># @Author: GraceKoo</span></span><br><span class="line"><span class="comment"># @File: 912_sort-an-array.py</span></span><br><span class="line"><span class="comment"># @Desc: https://leetcode-cn.com/problems/sort-an-array/</span></span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> List</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sortArray</span><span class="params">(self, nums: List[int])</span> -&gt; List[int]:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> nums:</span><br><span class="line">            <span class="keyword">return</span> []</span><br><span class="line">        n = len(nums)</span><br><span class="line"></span><br><span class="line">        <span class="comment">#  快速排序</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">quick</span><span class="params">(left, right)</span>:</span></span><br><span class="line">            <span class="keyword">if</span> left &gt;= right:</span><br><span class="line">                <span class="keyword">return</span> nums</span><br><span class="line">            <span class="comment"># 哨兵</span></span><br><span class="line">            pivot = left</span><br><span class="line">            i = left</span><br><span class="line">            j = n - <span class="number">1</span></span><br><span class="line">            <span class="keyword">while</span> i &lt; j:</span><br><span class="line">                <span class="comment"># 寻找右半部分</span></span><br><span class="line">                <span class="keyword">while</span> i &lt; j <span class="keyword">and</span> nums[j] &gt; nums[pivot]:</span><br><span class="line">                    j -= <span class="number">1</span></span><br><span class="line">                <span class="comment"># 寻找左半部分</span></span><br><span class="line">                <span class="keyword">while</span> i &lt; j <span class="keyword">and</span> nums[i] &lt;= nums[pivot]:</span><br><span class="line">                    i += <span class="number">1</span></span><br><span class="line">                nums[i], nums[j] = nums[j], nums[i]</span><br><span class="line">            nums[pivot], nums[j] = nums[j], nums[pivot]</span><br><span class="line">            quick(left, j<span class="number">-1</span>)</span><br><span class="line">            quick(j+<span class="number">1</span>, right)</span><br><span class="line">            <span class="keyword">return</span> nums</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> quick(<span class="number">0</span>, n - <span class="number">1</span>)</span><br><span class="line"><span class="comment"># 插入排序</span></span><br><span class="line"><span class="comment"># def insertion_sort(nums):</span></span><br><span class="line"><span class="comment">#     n = len(nums)</span></span><br><span class="line"><span class="comment">#     for i in range(1, n):</span></span><br><span class="line"><span class="comment">#         while i &gt; 0 and nums[i - 1] &gt; nums[i]:</span></span><br><span class="line"><span class="comment">#             nums[i - 1], nums[i] = nums[i], nums[i - 1]</span></span><br><span class="line"><span class="comment">#             i -= 1</span></span><br><span class="line"><span class="comment">#     return nums</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">so = Solution()</span><br><span class="line">print(so.sortArray([<span class="number">5</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>]))</span><br></pre></td></tr></tbody></table></figure><h2 id="maximum-gap"><a href="#maximum-gap" class="headerlink" title="maximum-gap"></a>maximum-gap</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time: 2020/4/29 12:39</span></span><br><span class="line"><span class="comment"># @Author: GraceKoo</span></span><br><span class="line"><span class="comment"># @File: 164_maximum-gap.py</span></span><br><span class="line"><span class="comment"># @Desc: https://leetcode-cn.com/problems/maximum-gap/</span></span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> List</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maximumGap</span><span class="params">(self, nums: List[int])</span> -&gt; int:</span></span><br><span class="line">        len_nums = len(nums)</span><br><span class="line">        <span class="keyword">if</span> len_nums &lt; <span class="number">2</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        nums.sort(reverse=<span class="literal">False</span>)</span><br><span class="line">        max_gap = abs(nums[<span class="number">1</span>] - nums[<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>, len_nums):</span><br><span class="line">            max_gap = max(max_gap, abs(nums[i] - nums[i - <span class="number">1</span>]))</span><br><span class="line">        <span class="keyword">return</span> max_gap</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">so = Solution()</span><br><span class="line">print(so.maximumGap([<span class="number">3</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">1</span>]))</span><br></pre></td></tr></tbody></table></figure><h2 id="contains-duplicate"><a href="#contains-duplicate" class="headerlink" title="contains-duplicate"></a>contains-duplicate</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time: 2020/4/30 17:45</span></span><br><span class="line"><span class="comment"># @Author: GraceKoo</span></span><br><span class="line"><span class="comment"># @File: 217_contains-duplicate.py</span></span><br><span class="line"><span class="comment"># @Desc: https://leetcode-cn.com/problems/contains-duplicate/</span></span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> List</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">containsDuplicate</span><span class="params">(self, nums: List[int])</span> -&gt; bool:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> nums:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="comment"># 先排序</span></span><br><span class="line">        nums.sort(reverse=<span class="literal">False</span>)</span><br><span class="line">        <span class="comment"># 再比较</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, len(nums)):</span><br><span class="line">            <span class="keyword">if</span> nums[i] == nums[i<span class="number">-1</span>]:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">so = Solution()</span><br><span class="line">print(so.containsDuplicate([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]))</span><br></pre></td></tr></tbody></table></figure><h2 id="contains-duplicate-ii"><a href="#contains-duplicate-ii" class="headerlink" title="contains-duplicate-ii"></a>contains-duplicate-ii</h2><p>用散列表来维护这个k大小的滑动窗口。</p><p>遍历数组，对于每个元素做以下操作：</p><ul><li><p>在散列表中搜索当前元素，如果找到了就返回 true。</p></li><li><p>在散列表中插入当前元素。</p></li><li><p>如果当前散列表的大小超过了 k， 删除散列表中最旧的元素。</p></li></ul><p>返回 false。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time: 2020/4/30 17:46</span></span><br><span class="line"><span class="comment"># @Author: GraceKoo</span></span><br><span class="line"><span class="comment"># @File: 219_contains-duplicate-ii.py</span></span><br><span class="line"><span class="comment"># @Desc: https://leetcode-cn.com/problems/contains-duplicate-ii/</span></span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> List</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">containsNearbyDuplicate</span><span class="params">(self, nums: List[int], k: int)</span> -&gt; bool:</span></span><br><span class="line">        nums_sort = list()</span><br><span class="line">        nums_sort.append(nums[<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, len(nums)):</span><br><span class="line">            <span class="keyword">if</span> nums[i] <span class="keyword">in</span> nums_sort:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            <span class="keyword">elif</span> len(nums_sort) &gt;= k:</span><br><span class="line">                nums_sort.pop(<span class="number">0</span>)</span><br><span class="line">            nums_sort.append(nums[i])</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">so = Solution()</span><br><span class="line">print(so.containsNearbyDuplicate([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="number">2</span>))</span><br></pre></td></tr></tbody></table></figure><h2 id="contains-duplicate-iii"><a href="#contains-duplicate-iii" class="headerlink" title="contains-duplicate-iii"></a>contains-duplicate-iii</h2><p>方法一：线性搜索，超时</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time: 2020/5/5 21:24 </span></span><br><span class="line"><span class="comment"># @Author: GraceKoo</span></span><br><span class="line"><span class="comment"># @File: 220_contains-duplicate-iii.py</span></span><br><span class="line"><span class="comment"># @Desc: https://leetcode-cn.com/problems/contains-duplicate-iii</span></span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> List</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">containsNearbyAlmostDuplicate</span><span class="params">(self, nums: List[int], k: int, t: int)</span> -&gt; bool:</span></span><br><span class="line">        <span class="keyword">if</span> len(nums) &lt;= <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        nums_sort = list()</span><br><span class="line">        nums_sort.append(nums[<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, len(nums)):</span><br><span class="line">            <span class="keyword">if</span> len(nums_sort) &gt; k:</span><br><span class="line">                nums_sort.pop(<span class="number">0</span>)</span><br><span class="line">            <span class="comment"># 查询当前子列表中的每个元素是否满足t的要求</span></span><br><span class="line">            tmp_nums_sored = sorted(nums_sort, reverse=<span class="literal">False</span>)</span><br><span class="line">            <span class="keyword">for</span> v <span class="keyword">in</span> tmp_nums_sored:</span><br><span class="line">                <span class="keyword">if</span> abs(nums[i] - v) &lt;= t:</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            nums_sort.append(nums[i])</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">so = Solution()</span><br><span class="line">print(so.containsNearbyAlmostDuplicate(nums=[<span class="number">1</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">9</span>], k=<span class="number">2</span>, t=<span class="number">3</span>))</span><br></pre></td></tr></tbody></table></figure><p>方法二：桶排序</p><p>由于本题对索引有要求，考虑使用桶排序。</p><ul><li>每个数字nums[i] 都被分配到一个桶中</li><li>每个桶序号代表存放t的倍数的数 nums[i] // (t + 1)<ul><li>不相邻的桶一定不满足相差小于等于t，且同一个桶内的数字最多相差t</li><li>因此如果命中同一个桶内，那么直接返回True</li><li>如果命中相邻桶，我们再判断一下是否满足相差 &lt;= t</li></ul></li><li>题目有索引相差k的要求，因此要维护一个大小为k的窗口，定期清除桶中过期的数字。bucket.pop(nums[i - k] // (t + 1)) 即清除当前i前的第k个元素所对应的桶序号。</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time: 2020/5/5 21:24 </span></span><br><span class="line"><span class="comment"># @Author: GraceKoo</span></span><br><span class="line"><span class="comment"># @File: 220_contains-duplicate-iii.py</span></span><br><span class="line"><span class="comment"># @Desc: https://leetcode-cn.com/problems/contains-duplicate-iii</span></span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> List</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">containsNearbyAlmostDuplicate</span><span class="params">(self, nums: List[int], k: int, t: int)</span> -&gt; bool:</span></span><br><span class="line">        bucket = dict()</span><br><span class="line">        <span class="keyword">if</span> t &lt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(nums)):</span><br><span class="line">            <span class="comment"># 每个桶序号代表存放t的倍数的数</span></span><br><span class="line">            bucket_nth = nums[i] // (t + <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">if</span> bucket_nth <span class="keyword">in</span> bucket:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            <span class="keyword">if</span> bucket_nth - <span class="number">1</span> <span class="keyword">in</span> bucket <span class="keyword">and</span> abs(bucket[bucket_nth - <span class="number">1</span>] - nums[i]) &lt;= t:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            <span class="keyword">if</span> bucket_nth + <span class="number">1</span> <span class="keyword">in</span> bucket <span class="keyword">and</span> abs(bucket[bucket_nth + <span class="number">1</span>] - nums[i]) &lt;= t:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            bucket[bucket_nth] = nums[i]</span><br><span class="line">            <span class="comment"># 当桶大于k时，代表窗口已经越界，越界元素可以进行清除</span></span><br><span class="line">            <span class="keyword">if</span> i &gt;= k:</span><br><span class="line">                bucket.pop(nums[i - k] // (t + <span class="number">1</span>))</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">so = Solution()</span><br><span class="line">print(so.containsNearbyAlmostDuplicate(nums=[<span class="number">1</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">9</span>], k=<span class="number">2</span>, t=<span class="number">3</span>))</span><br></pre></td></tr></tbody></table></figure><h1 id="Other"><a href="#Other" class="headerlink" title="Other"></a>Other</h1><h2 id="remove-duplicates-from-sorted-array"><a href="#remove-duplicates-from-sorted-array" class="headerlink" title="remove-duplicates-from-sorted-array"></a>remove-duplicates-from-sorted-array</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time: 2020/1/2 11:53 下午</span></span><br><span class="line"><span class="comment"># @Author: GraceKoo</span></span><br><span class="line"><span class="comment"># @File: 26_remove-duplicates-from-sorted-array.py</span></span><br><span class="line"><span class="comment"># @Desc: https://leetcode-cn.com/problems/remove-duplicates-from-sorted-array/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">removeDuplicates</span><span class="params">(self, nums)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> len(nums) == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        i = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>, len(nums)):</span><br><span class="line">            <span class="keyword">if</span> nums[i] != nums[j]:</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">                nums[i] = nums[j]</span><br><span class="line">        <span class="keyword">return</span> i + <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">so = Solution()</span><br><span class="line">print(so.removeDuplicates([<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">4</span>]))</span><br></pre></td></tr></tbody></table></figure><h2 id="remove-element"><a href="#remove-element" class="headerlink" title="remove-element"></a>remove-element</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time: 2020/1/3 11:41 下午</span></span><br><span class="line"><span class="comment"># @Author: GraceKoo</span></span><br><span class="line"><span class="comment"># @File: 27_remove-element.py</span></span><br><span class="line"><span class="comment"># @Desc:https://leetcode-cn.com/problems/remove-element/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">removeElement</span><span class="params">(self, nums, val: int)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> nums:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        i = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">0</span>, len(nums)):</span><br><span class="line">            <span class="keyword">if</span> nums[j] != val:</span><br><span class="line">                nums[i] = nums[j]</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> i</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">so = Solution()</span><br><span class="line">print(so.removeElement([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">2</span>], <span class="number">2</span>))</span><br></pre></td></tr></tbody></table></figure><h2 id="implement-strstr"><a href="#implement-strstr" class="headerlink" title="implement-strstr"></a>implement-strstr</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time: 2020/1/4 8:45 下午</span></span><br><span class="line"><span class="comment"># @Author: GraceKoo</span></span><br><span class="line"><span class="comment"># @File: 28_implement-strstr.py</span></span><br><span class="line"><span class="comment"># @Desc:https://leetcode-cn.com/problems/implement-strstr/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">strStr</span><span class="params">(self, haystack: str, needle: str)</span> -&gt; int:</span></span><br><span class="line">        <span class="comment"># haystack.find(needle)</span></span><br><span class="line">        <span class="keyword">if</span> len(haystack) &lt; len(needle):</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">        j = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(haystack) - len(needle) + <span class="number">1</span>):</span><br><span class="line">            index = i</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">0</span>, len(needle)):</span><br><span class="line">                <span class="keyword">if</span> haystack[i] != needle[j]:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> j == len(needle) - <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">return</span> index</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">so = Solution()</span><br><span class="line">print(so.strStr(<span class="string">"hello"</span>, <span class="string">"ll"</span>))</span><br></pre></td></tr></tbody></table></figure><h2 id="substring-with-concatenation-of-all-words"><a href="#substring-with-concatenation-of-all-words" class="headerlink" title="substring-with-concatenation-of-all-words"></a>substring-with-concatenation-of-all-words</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time: 2020/1/14 10:25 下午</span></span><br><span class="line"><span class="comment"># @Author: GraceKoo</span></span><br><span class="line"><span class="comment"># @File: 30_substring-with-concatenation-of-all-words.py</span></span><br><span class="line"><span class="comment"># @Desc:https://leetcode-cn.com/problems/substring-with-concatenation-of-all-words/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findSubstring</span><span class="params">(self, s, words)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type s: str</span></span><br><span class="line"><span class="string">        :type words: List[str]</span></span><br><span class="line"><span class="string">        :rtype: List[int]</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> len(s) == <span class="number">0</span> <span class="keyword">or</span> <span class="keyword">not</span> words:</span><br><span class="line">            <span class="keyword">return</span> []</span><br><span class="line"></span><br><span class="line">        words_number = len(words)</span><br><span class="line">        words_len = len(words[<span class="number">0</span>])</span><br><span class="line">        s_len = len(s)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 将words中的单词与个数存储到字典中</span></span><br><span class="line">        word_dic = {}</span><br><span class="line">        <span class="keyword">for</span> word <span class="keyword">in</span> words:</span><br><span class="line">            <span class="keyword">if</span> word <span class="keyword">in</span> word_dic.keys():</span><br><span class="line">                word_dic[word] += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                word_dic[word] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        output_list = []</span><br><span class="line">        <span class="comment"># 按照word的长度设三段切词的起点</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(words_len):</span><br><span class="line">            <span class="comment"># 将s按照word的长度截取words_number段</span></span><br><span class="line">            start_index = i</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 先对s进行切割</span></span><br><span class="line">            s_cut_list = []</span><br><span class="line">            cut_number = <span class="number">0</span></span><br><span class="line">            <span class="comment"># 切词</span></span><br><span class="line">            <span class="keyword">while</span> s_len - start_index &gt;= words_len:</span><br><span class="line">                s_cut_list.append(s[start_index : start_index + words_len])</span><br><span class="line">                cut_number += <span class="number">1</span></span><br><span class="line">                start_index += words_len</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 再对切割后的s进行判断，检验长度要求，个数要求</span></span><br><span class="line">            start_cut_i = <span class="number">0</span></span><br><span class="line">            <span class="keyword">while</span> cut_number - start_cut_i &gt; words_number:</span><br><span class="line">                <span class="comment"># count记录当前已经匹配完成的个数</span></span><br><span class="line">                count = <span class="number">0</span></span><br><span class="line">                w_dic = {}</span><br><span class="line">                <span class="comment"># 在s_cut_list中截取n个单词</span></span><br><span class="line">                <span class="keyword">for</span> s_word <span class="keyword">in</span> s_cut_list[start_cut_i : start_cut_i + words_number]:</span><br><span class="line">                    <span class="keyword">if</span> s_word <span class="keyword">in</span> word_dic.keys():</span><br><span class="line">                        <span class="keyword">if</span> s_word <span class="keyword">in</span> w_dic.keys():</span><br><span class="line">                            w_dic[s_word] += <span class="number">1</span></span><br><span class="line">                            <span class="keyword">if</span> w_dic[s_word] &gt; word_dic[s_word]:</span><br><span class="line">                                <span class="keyword">break</span></span><br><span class="line">                            count += <span class="number">1</span></span><br><span class="line">                        <span class="keyword">else</span>:</span><br><span class="line">                            w_dic[s_word] = <span class="number">1</span></span><br><span class="line">                            count += <span class="number">1</span></span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line">                <span class="keyword">if</span> count == words_number:</span><br><span class="line">                    output_list.append(i + start_cut_i * words_len)</span><br><span class="line">                start_cut_i += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> output_list</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">so = Solution()</span><br><span class="line">print(so.findSubstring(<span class="string">"barfoothefoobarman"</span>, [<span class="string">"foo"</span>, <span class="string">"bar"</span>]))</span><br></pre></td></tr></tbody></table></figure><h2 id="next-permutation"><a href="#next-permutation" class="headerlink" title="next-permutation"></a>next-permutation</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time: 2020/1/19 12:18 下午</span></span><br><span class="line"><span class="comment"># @Author: GraceKoo</span></span><br><span class="line"><span class="comment"># @File: 31_next-permutation.py</span></span><br><span class="line"><span class="comment"># @Desc: https://leetcode-cn.com/problems/next-permutation/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">nextPermutation</span><span class="params">(self, nums)</span> -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Do not return anything, modify nums in-place instead.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> nums:</span><br><span class="line">            <span class="keyword">return</span> []</span><br><span class="line">        left = <span class="number">-1</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(nums) - <span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>):</span><br><span class="line">            <span class="comment"># 从右开始，找到第一个升序的数</span></span><br><span class="line">            <span class="keyword">if</span> nums[i - <span class="number">1</span>] &lt; nums[i]:</span><br><span class="line">                left = i - <span class="number">1</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="comment"># 如果不存在left，则为降序数列，翻转整个数组</span></span><br><span class="line">        <span class="keyword">if</span> left == <span class="number">-1</span>:</span><br><span class="line">            <span class="keyword">return</span> nums[::<span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 否则找到第一个比nums[left]大的数，至少有一个（为nums[left+1]）</span></span><br><span class="line">        <span class="keyword">for</span> right <span class="keyword">in</span> range(len(nums) - <span class="number">1</span>, left, <span class="number">-1</span>):</span><br><span class="line">            <span class="keyword">if</span> nums[right] &gt; nums[left]:</span><br><span class="line">                nums[right], nums[left] = nums[left], nums[right]</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="comment"># 此时nums[left+1]依旧为降序数列，翻转nums[left+1]</span></span><br><span class="line">        nums_left = nums[left + <span class="number">1</span> : len(nums)]</span><br><span class="line">        nums_left = nums_left[::<span class="number">-1</span>]</span><br><span class="line">        nums[left + <span class="number">1</span> : len(nums)] = nums_left</span><br><span class="line">        <span class="keyword">return</span> nums</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">so = Solution()</span><br><span class="line">print(so.nextPermutation([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">4</span>]))</span><br></pre></td></tr></tbody></table></figure><h2 id="longest-valid-parentheses"><a href="#longest-valid-parentheses" class="headerlink" title="longest-valid-parentheses"></a>longest-valid-parentheses</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time: 2020/1/21 12:58 下午</span></span><br><span class="line"><span class="comment"># @Author: GraceKoo</span></span><br><span class="line"><span class="comment"># @File: 32_longest-valid-parentheses.py</span></span><br><span class="line"><span class="comment"># @Desc: https://leetcode-cn.com/problems/longest-valid-parentheses/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">longestValidParentheses</span><span class="params">(self, s: str)</span> -&gt; int:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> s <span class="keyword">or</span> len(s) == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        maxlen = <span class="number">0</span></span><br><span class="line">        <span class="comment"># 当前字符为"("，left+=1,")"right+=1</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 正向搜索: 即")"必须与"("相同</span></span><br><span class="line">        left, right = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(s)):</span><br><span class="line">            <span class="keyword">if</span> s[i] == <span class="string">"("</span>:</span><br><span class="line">                left += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                right += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> left == right:</span><br><span class="line">                maxlen = right * <span class="number">2</span> <span class="keyword">if</span> maxlen &lt; right * <span class="number">2</span> <span class="keyword">else</span> maxlen</span><br><span class="line">            <span class="keyword">elif</span> right &gt; left:</span><br><span class="line">                left = right = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 反向搜索：即"("必须与")"相同</span></span><br><span class="line">        left, right = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(s) - <span class="number">1</span>, <span class="number">-1</span>, <span class="number">-1</span>):</span><br><span class="line">            <span class="keyword">if</span> s[i] == <span class="string">"("</span>:</span><br><span class="line">                left += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                right += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> left == right:</span><br><span class="line">                maxlen = left * <span class="number">2</span> <span class="keyword">if</span> maxlen &lt; left * <span class="number">2</span> <span class="keyword">else</span> maxlen</span><br><span class="line">            <span class="keyword">elif</span> left &gt; right:</span><br><span class="line">                left = right = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> maxlen</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">so = Solution()</span><br><span class="line">print(so.longestValidParentheses(<span class="string">"())((())"</span>))</span><br></pre></td></tr></tbody></table></figure><h2 id="search-insert-position"><a href="#search-insert-position" class="headerlink" title="search-insert-position"></a>search-insert-position</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time: 2020/1/5 6:22 下午</span></span><br><span class="line"><span class="comment"># @Author: GraceKoo</span></span><br><span class="line"><span class="comment"># @File: 35_search-insert-position.py</span></span><br><span class="line"><span class="comment"># @Desc:https://leetcode-cn.com/problems/search-insert-position/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">searchInsert</span><span class="params">(self, nums, target: int)</span> -&gt; int:</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(nums) - <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> nums[i] == target:</span><br><span class="line">                <span class="keyword">return</span> i</span><br><span class="line">            <span class="keyword">elif</span> nums[i] &lt; target &lt;= nums[i + <span class="number">1</span>]:</span><br><span class="line">                <span class="keyword">return</span> i + <span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> nums[i] &gt; target:</span><br><span class="line">                <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">        <span class="keyword">return</span> len(nums)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">so = Solution()</span><br><span class="line">print(so.searchInsert([<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">6</span>], <span class="number">7</span>))</span><br></pre></td></tr></tbody></table></figure><h2 id="combination-sum-ii"><a href="#combination-sum-ii" class="headerlink" title="combination-sum-ii"></a>combination-sum-ii</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time: 2020/2/10 2:57 下午 </span></span><br><span class="line"><span class="comment"># @Author: GraceKoo</span></span><br><span class="line"><span class="comment"># @File: 40_combination-sum-ii.py</span></span><br><span class="line"><span class="comment"># @Desc:https://leetcode-cn.com/problems/combination-sum-ii/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> List</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">combinationSum</span><span class="params">(self, candidates: List[int], target: int)</span> -&gt; List[List[int]]:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> candidates <span class="keyword">or</span> <span class="keyword">not</span> target:</span><br><span class="line">            <span class="keyword">return</span> []</span><br><span class="line">        candidates.sort()</span><br><span class="line">        output_list = []</span><br><span class="line">        path = []</span><br><span class="line">        begin = <span class="number">0</span></span><br><span class="line">        size = len(candidates)</span><br><span class="line">        self._dfs(candidates, begin, size, path, output_list, target)</span><br><span class="line">        <span class="keyword">return</span> output_list</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_dfs</span><span class="params">(self, candidates, begin, size, path, output_list, target)</span>:</span></span><br><span class="line">        <span class="comment"># 递归终止的条件</span></span><br><span class="line">        <span class="keyword">if</span> target == <span class="number">0</span>:</span><br><span class="line">            output_list.append(path[:])</span><br><span class="line">        <span class="keyword">for</span> index <span class="keyword">in</span> range(begin, size):</span><br><span class="line">            residue = target - candidates[index]</span><br><span class="line">            <span class="keyword">if</span> residue &lt; <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> index &gt; begin <span class="keyword">and</span> candidates[index - <span class="number">1</span>] == candidates[index]:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            path.append(candidates[index])</span><br><span class="line">            self._dfs(candidates, index+<span class="number">1</span>, size, path, output_list, residue)</span><br><span class="line">            path.pop()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    candidates = [<span class="number">2</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">    target = <span class="number">5</span></span><br><span class="line">    solution = Solution()</span><br><span class="line">    result = solution.combinationSum(candidates, target)</span><br><span class="line">    print(result)</span><br></pre></td></tr></tbody></table></figure><h2 id="multiply-strings"><a href="#multiply-strings" class="headerlink" title="multiply-strings"></a>multiply-strings</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time: 2020/2/15 11:17</span></span><br><span class="line"><span class="comment"># @Author: GraceKoo</span></span><br><span class="line"><span class="comment"># @File: 43_multiply-strings.py</span></span><br><span class="line"><span class="comment"># @Desc: https://leetcode-cn.com/problems/multiply-strings/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">multiply</span><span class="params">(self, num1: str, num2: str)</span> -&gt; str:</span></span><br><span class="line">        <span class="keyword">if</span> num1 == <span class="string">'0'</span> <span class="keyword">or</span> num2 == <span class="string">'0'</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        return_sum = <span class="number">0</span></span><br><span class="line">        count = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> val1 <span class="keyword">in</span> num2[::<span class="number">-1</span>]:</span><br><span class="line">            add = <span class="number">0</span>  <span class="comment"># 进位符</span></span><br><span class="line">            multiply_sum = <span class="number">0</span></span><br><span class="line">            count1 = <span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> val2 <span class="keyword">in</span> num1[::<span class="number">-1</span>]:</span><br><span class="line">                multi_sum = (int(val1) * int(val2) + add) % <span class="number">10</span></span><br><span class="line">                multiply_sum += multi_sum * (<span class="number">10</span> ** count1)</span><br><span class="line">                add = (int(val1) * int(val2) + add) // <span class="number">10</span></span><br><span class="line">                count1 += <span class="number">1</span></span><br><span class="line">            return_sum += multiply_sum * (<span class="number">10</span> ** count)</span><br><span class="line">            count += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> str(return_sum)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">so = Solution()</span><br><span class="line">print(so.multiply(<span class="string">"123"</span>, <span class="string">"456"</span>))</span><br></pre></td></tr></tbody></table></figure><h2 id="group-anagrams"><a href="#group-anagrams" class="headerlink" title="group-anagrams"></a>group-anagrams</h2><p>解题方法：</p><ul><li><p>collections类中的defaultdict()方法来为字典提供默认值。</p></li><li><p>按排序数组分类</p><ul><li><p>ans = {(“a”,e”,”r”):[“are”,”ear”,”era”],</p><p>​            (“a”,”b”,”t”):[“bat”,”tab”]</p><p>​            (“e”,”c”,”d”,”o”):[“code”]}</p></li></ul></li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time: 2020/2/20 00:01</span></span><br><span class="line"><span class="comment"># @Author: GraceKoo</span></span><br><span class="line"><span class="comment"># @File: 49_group-anagrams.py</span></span><br><span class="line"><span class="comment"># @Desc:https://leetcode-cn.com/problems/group-anagrams/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> collections</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">groupAnagrams</span><span class="params">(self, strs)</span>:</span></span><br><span class="line">        ans = collections.defaultdict(list)</span><br><span class="line">        <span class="keyword">for</span> s <span class="keyword">in</span> strs:</span><br><span class="line">            ans[tuple(sorted(s))].append(s)</span><br><span class="line">        <span class="keyword">return</span> ans.values()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">so = Solution()</span><br><span class="line">print(so.groupAnagrams([<span class="string">"eat"</span>, <span class="string">"tea"</span>, <span class="string">"tan"</span>, <span class="string">"ate"</span>, <span class="string">"nat"</span>, <span class="string">"bat"</span>]))</span><br></pre></td></tr></tbody></table></figure><h2 id="plus-one"><a href="#plus-one" class="headerlink" title="plus-one"></a>plus-one</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time: 2020/2/22 19:31</span></span><br><span class="line"><span class="comment"># @Author: GraceKoo</span></span><br><span class="line"><span class="comment"># @File: 66_plus-one.py</span></span><br><span class="line"><span class="comment"># @Desc:https://leetcode-cn.com/problems/plus-one/</span></span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> List</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">plusOne</span><span class="params">(self, digits: List[int])</span> -&gt; List[int]:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> digits:</span><br><span class="line">            <span class="keyword">return</span> []</span><br><span class="line">        len_digits = len(digits)</span><br><span class="line">        add = (digits[len_digits<span class="number">-1</span>] + <span class="number">1</span>) // <span class="number">10</span></span><br><span class="line">        digits[len_digits<span class="number">-1</span>] = (digits[len_digits<span class="number">-1</span>] + <span class="number">1</span>) % <span class="number">10</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len_digits - <span class="number">2</span>, <span class="number">-1</span>, <span class="number">-1</span>):</span><br><span class="line">            add = (digits[i] + add) // <span class="number">10</span></span><br><span class="line">            digits[i] = (digits[i] + add) % <span class="number">10</span></span><br><span class="line">        <span class="keyword">if</span> add == <span class="number">1</span>:</span><br><span class="line">            digits.insert(<span class="number">0</span>, add)</span><br><span class="line">        <span class="keyword">return</span> digits</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">so = Solution()</span><br><span class="line">print(so.plusOne([<span class="number">9</span>, <span class="number">9</span>, <span class="number">9</span>, <span class="number">9</span>]))</span><br></pre></td></tr></tbody></table></figure><h2 id="length-of-last-word"><a href="#length-of-last-word" class="headerlink" title="length-of-last-word"></a>length-of-last-word</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time: 2020/3/1 18:01</span></span><br><span class="line"><span class="comment"># @Author: GraceKoo</span></span><br><span class="line"><span class="comment"># @File: 58_length-of-last-word.py</span></span><br><span class="line"><span class="comment"># @Desc:https://leetcode-cn.com/problems/length-of-last-word/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">lengthOfLastWord</span><span class="params">(self, s: str)</span> -&gt; int:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> s:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">return</span> len(s.split()[<span class="number">-1</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">so = Solution()</span><br><span class="line">print(so.lengthOfLastWord(<span class="string">"Hello World"</span>))</span><br></pre></td></tr></tbody></table></figure><h2 id="permutation-sequence"><a href="#permutation-sequence" class="headerlink" title="permutation-sequence"></a>permutation-sequence</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time: 2020/3/2 12:07</span></span><br><span class="line"><span class="comment"># @Author: GraceKoo</span></span><br><span class="line"><span class="comment"># @File: 60_permutation-sequence.py</span></span><br><span class="line"><span class="comment"># @Desc:https://leetcode-cn.com/problems/permutation-sequence/</span></span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getPermutation</span><span class="params">(self, n: int, k: int)</span> -&gt; str:</span></span><br><span class="line">        nums = [str(i) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, n + <span class="number">1</span>)]</span><br><span class="line">        output_str = <span class="string">""</span></span><br><span class="line">        n -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> n &gt; <span class="number">-1</span>:</span><br><span class="line">            number_combination = math.factorial(n)  <span class="comment"># 每组组合数总和</span></span><br><span class="line">            output_number_index = math.ceil(k / number_combination) - <span class="number">1</span>  <span class="comment"># 不用\\的原因是因为 1 1希望输出的是0，"\\"会输出1</span></span><br><span class="line">            output_str += nums[output_number_index]</span><br><span class="line">            nums.pop(output_number_index)</span><br><span class="line">            k %= number_combination</span><br><span class="line">            n -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> output_str</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">so = Solution()</span><br><span class="line">print(so.getPermutation(<span class="number">4</span>, <span class="number">9</span>))</span><br></pre></td></tr></tbody></table></figure><h2 id="convert"><a href="#convert" class="headerlink" title="convert"></a>convert</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time: 2019/12/18 11:52 下午</span></span><br><span class="line"><span class="comment"># @Author: GraceKoo</span></span><br><span class="line"><span class="comment"># @File: 6_convert.py</span></span><br><span class="line"><span class="comment"># @Desc:</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">convert</span><span class="params">(self, s: str, numRows: int)</span> -&gt; str:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> s:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">""</span></span><br><span class="line">        <span class="keyword">elif</span> len(s) == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> s</span><br><span class="line"></span><br><span class="line">        outstr = [<span class="string">""</span>] * numRows</span><br><span class="line">        i = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> i &lt; len(s):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">0</span>, numRows):</span><br><span class="line">                <span class="keyword">if</span> i &lt; len(s):</span><br><span class="line">                    outstr[j] += s[i]</span><br><span class="line">                    i += <span class="number">1</span></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(numRows - <span class="number">2</span>, <span class="number">0</span>, <span class="number">-1</span>):</span><br><span class="line">                <span class="keyword">if</span> i &lt; len(s):</span><br><span class="line">                    outstr[j] += s[i]</span><br><span class="line">                    i += <span class="number">1</span></span><br><span class="line">        outstr = <span class="string">""</span>.join(outstr)</span><br><span class="line">        <span class="keyword">return</span> outstr</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s = <span class="string">"ABCDE"</span></span><br><span class="line">so = Solution()</span><br><span class="line">print(so.convert(s, <span class="number">3</span>))</span><br></pre></td></tr></tbody></table></figure><h2 id="reverse-integer"><a href="#reverse-integer" class="headerlink" title="reverse-integer"></a>reverse-integer</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time: 2019/12/19 1:05 下午</span></span><br><span class="line"><span class="comment"># @Author: GraceKoo</span></span><br><span class="line"><span class="comment"># @File: 7_reverse-integer.py</span></span><br><span class="line"><span class="comment"># @Desc: https://leetcode-cn.com/problems/reverse-integer/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reverse</span><span class="params">(self, x: int)</span> -&gt; int:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> x:</span><br><span class="line">            <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line">        len_x = len(str(x))</span><br><span class="line">        reverse_x = <span class="string">""</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len_x):</span><br><span class="line">            middle_x = (x % pow(<span class="number">10</span>, i + <span class="number">1</span>)) // pow(<span class="number">10</span>, i)</span><br><span class="line">            reverse_x = reverse_x + str(middle_x)</span><br><span class="line">        <span class="keyword">return</span> reverse_x</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s = <span class="number">123456789</span></span><br><span class="line">so = Solution()</span><br><span class="line">print(so.reverse(s))</span><br></pre></td></tr></tbody></table></figure><h2 id="palindrome-number"><a href="#palindrome-number" class="headerlink" title="palindrome_number"></a>palindrome_number</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time: 2019/12/20 11:38 下午</span></span><br><span class="line"><span class="comment"># @Author: GraceKoo</span></span><br><span class="line"><span class="comment"># @File: 9_palindrome_number.py</span></span><br><span class="line"><span class="comment"># @Desc: https://leetcode-cn.com/problems/palindrome-number/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isPalindrome</span><span class="params">(self, x: int)</span> -&gt; bool:</span></span><br><span class="line">        <span class="keyword">if</span> x &lt; <span class="number">0</span> <span class="keyword">or</span> (x % <span class="number">10</span> == <span class="number">0</span> <span class="keyword">and</span> x != <span class="number">0</span>):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        return_num = <span class="number">0</span></span><br><span class="line">        <span class="comment"># 只对比一半</span></span><br><span class="line">        <span class="keyword">while</span> x &gt; return_num:</span><br><span class="line">            return_num = return_num * <span class="number">10</span> + x % <span class="number">10</span></span><br><span class="line">            x = x // <span class="number">10</span></span><br><span class="line">        <span class="comment"># x是偶数则相等 奇数要去掉最后一位</span></span><br><span class="line">        <span class="keyword">return</span> x == return_num <span class="keyword">or</span> x == return_num // <span class="number">10</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">so = Solution()</span><br><span class="line">print(so.isPalindrome(<span class="number">1221</span>))</span><br></pre></td></tr></tbody></table></figure><h2 id="container-with-most-water"><a href="#container-with-most-water" class="headerlink" title="container-with-most-water"></a>container-with-most-water</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time: 2019/12/23 11:33 下午</span></span><br><span class="line"><span class="comment"># @Author: GraceKoo</span></span><br><span class="line"><span class="comment"># @File: 11_container-with-most-water.py</span></span><br><span class="line"><span class="comment"># @Desc: https://leetcode-cn.com/problems/container-with-most-water/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maxArea</span><span class="params">(self, height)</span> -&gt; int:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> height:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        i, j = <span class="number">0</span>, len(height) - <span class="number">1</span></span><br><span class="line">        max_size = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> i &lt; j:</span><br><span class="line">            <span class="keyword">if</span> height[i] &lt; height[j]:</span><br><span class="line">                tmp_size = (j - i) * height[i]</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                tmp_size = (j - i) * height[j]</span><br><span class="line">                j -= <span class="number">1</span></span><br><span class="line">            max_size = tmp_size <span class="keyword">if</span> tmp_size &gt; max_size <span class="keyword">else</span> max_size</span><br><span class="line">        <span class="keyword">return</span> max_size</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">so = Solution()</span><br><span class="line"><span class="keyword">assert</span> so.maxArea([<span class="number">1</span>, <span class="number">8</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">3</span>, <span class="number">7</span>])</span><br></pre></td></tr></tbody></table></figure><h2 id="integer-to-roman"><a href="#integer-to-roman" class="headerlink" title="integer-to-roman"></a>integer-to-roman</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time: 2019/12/25 7:29 下午</span></span><br><span class="line"><span class="comment"># @Author: GraceKoo</span></span><br><span class="line"><span class="comment"># @File: 12_integer-to-roman.py</span></span><br><span class="line"><span class="comment"># @Desc: https://leetcode-cn.com/problems/integer-to-roman/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">intToRoman</span><span class="params">(self, num: int)</span> -&gt; str:</span></span><br><span class="line">        output = <span class="string">""</span></span><br><span class="line">        roman_dict = {</span><br><span class="line">            <span class="number">1000</span>: <span class="string">"M"</span>,</span><br><span class="line">            <span class="number">900</span>: <span class="string">"CM"</span>,</span><br><span class="line">            <span class="number">500</span>: <span class="string">"D"</span>,</span><br><span class="line">            <span class="number">400</span>: <span class="string">"CD"</span>,</span><br><span class="line">            <span class="number">100</span>: <span class="string">"C"</span>,</span><br><span class="line">            <span class="number">90</span>: <span class="string">"XC"</span>,</span><br><span class="line">            <span class="number">50</span>: <span class="string">"L"</span>,</span><br><span class="line">            <span class="number">40</span>: <span class="string">"XL"</span>,</span><br><span class="line">            <span class="number">10</span>: <span class="string">"X"</span>,</span><br><span class="line">            <span class="number">9</span>: <span class="string">"IX"</span>,</span><br><span class="line">            <span class="number">5</span>: <span class="string">"V"</span>,</span><br><span class="line">            <span class="number">4</span>: <span class="string">"IV"</span>,</span><br><span class="line">            <span class="number">1</span>: <span class="string">"I"</span>,</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">while</span> num &gt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">for</span> key, value <span class="keyword">in</span> roman_dict.items():</span><br><span class="line">                <span class="keyword">if</span> num &gt;= key:</span><br><span class="line">                    output += value</span><br><span class="line">                    num -= key</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">return</span> output</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">so = Solution()</span><br><span class="line">print(so.intToRoman(<span class="number">999</span>))</span><br></pre></td></tr></tbody></table></figure><h2 id="roman-to-integer"><a href="#roman-to-integer" class="headerlink" title="roman-to-integer"></a>roman-to-integer</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time: 2019/12/25 7:43 下午</span></span><br><span class="line"><span class="comment"># @Author: GraceKoo</span></span><br><span class="line"><span class="comment"># @File: 13_roman-to-integer.py</span></span><br><span class="line"><span class="comment"># @Desc: https://leetcode-cn.com/problems/roman-to-integer/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">romanToInt</span><span class="params">(self, s)</span>:</span></span><br><span class="line">        output = <span class="number">0</span></span><br><span class="line">        roman_dict = {<span class="string">"I"</span>: <span class="number">1</span>, <span class="string">"V"</span>: <span class="number">5</span>, <span class="string">"X"</span>: <span class="number">10</span>, <span class="string">"L"</span>: <span class="number">50</span>, <span class="string">"C"</span>: <span class="number">100</span>, <span class="string">"D"</span>: <span class="number">500</span>, <span class="string">"M"</span>: <span class="number">1000</span>}</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(s)):</span><br><span class="line">            <span class="keyword">if</span> i &lt; len(s) - <span class="number">1</span> <span class="keyword">and</span> roman_dict[s[i]] &lt; roman_dict[s[i + <span class="number">1</span>]]:</span><br><span class="line">                output -= roman_dict[s[i]]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                output += roman_dict[s[i]]</span><br><span class="line">        <span class="keyword">return</span> output</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">so = Solution()</span><br><span class="line">print(so.romanToInt(<span class="string">"MCMXCIV"</span>))  <span class="comment"># 1994</span></span><br></pre></td></tr></tbody></table></figure><h2 id="longest-common-prefix"><a href="#longest-common-prefix" class="headerlink" title="longest-common-prefix"></a>longest-common-prefix</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time: 2019/12/25 9:12 下午</span></span><br><span class="line"><span class="comment"># @Author: GraceKoo</span></span><br><span class="line"><span class="comment"># @File: 14_longest-common-prefix.py</span></span><br><span class="line"><span class="comment"># @Desc: https://leetcode-cn.com/problems/longest-common-prefix/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">longestCommonPrefix</span><span class="params">(self, li)</span> -&gt; str:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> li:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">""</span></span><br><span class="line">        <span class="comment"># 按照ASCII码进行排序</span></span><br><span class="line">        min_str = min(li)</span><br><span class="line">        max_str = max(li)</span><br><span class="line">        <span class="keyword">for</span> index, value <span class="keyword">in</span> enumerate(min_str):</span><br><span class="line">            <span class="keyword">if</span> value != max_str[index]:</span><br><span class="line">                <span class="keyword">return</span> max_str[:index]</span><br><span class="line">        <span class="keyword">return</span> min_str</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">so = Solution()</span><br><span class="line">print(so.longestCommonPrefix([<span class="string">"flower"</span>, <span class="string">"flow"</span>, <span class="string">"flight"</span>]))</span><br></pre></td></tr></tbody></table></figure><h2 id="3sum"><a href="#3sum" class="headerlink" title="3sum"></a>3sum</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time: 2019/12/27 12:18 上午</span></span><br><span class="line"><span class="comment"># @Author: GraceKoo</span></span><br><span class="line"><span class="comment"># @File: 15_3sum.py</span></span><br><span class="line"><span class="comment"># @Desc: https://leetcode-cn.com/problems/3sum/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">threeSum</span><span class="params">(self, nums)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> nums <span class="keyword">or</span> len(nums) &lt; <span class="number">3</span>:</span><br><span class="line">            <span class="keyword">return</span> []</span><br><span class="line">        n = len(nums)</span><br><span class="line">        output = []</span><br><span class="line">        nums.sort()</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, n):</span><br><span class="line">            <span class="keyword">if</span> nums[i] &gt; <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">return</span> output</span><br><span class="line">            <span class="keyword">if</span> i &gt; <span class="number">0</span> <span class="keyword">and</span> nums[i] == nums[i - <span class="number">1</span>]:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            left = i + <span class="number">1</span></span><br><span class="line">            right = n - <span class="number">1</span></span><br><span class="line">            <span class="keyword">while</span> left &lt; right:</span><br><span class="line">                <span class="keyword">if</span> nums[i] + nums[left] + nums[right] == <span class="number">0</span>:</span><br><span class="line">                    output.append((nums[i], nums[left], nums[right]))</span><br><span class="line">                    <span class="keyword">while</span> left &lt; right <span class="keyword">and</span> nums[left] == nums[left + <span class="number">1</span>]:</span><br><span class="line">                        left += <span class="number">1</span></span><br><span class="line">                    <span class="keyword">while</span> left &lt; right <span class="keyword">and</span> nums[right] == nums[right - <span class="number">1</span>]:</span><br><span class="line">                        right -= <span class="number">1</span></span><br><span class="line">                    left += <span class="number">1</span></span><br><span class="line">                    right -= <span class="number">1</span></span><br><span class="line">                <span class="keyword">elif</span> nums[i] + nums[left] + nums[right] &gt; <span class="number">0</span>:</span><br><span class="line">                    right -= <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    left += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> output</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">so = Solution()</span><br><span class="line">print(so.threeSum([<span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">-1</span>, <span class="number">-4</span>]))</span><br></pre></td></tr></tbody></table></figure><h2 id="3sum-closest"><a href="#3sum-closest" class="headerlink" title="3sum-closest"></a>3sum-closest</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time: 2019/12/28 4:32 下午</span></span><br><span class="line"><span class="comment"># @Author: GraceKoo</span></span><br><span class="line"><span class="comment"># @File: 16_3sum-closest.py</span></span><br><span class="line"><span class="comment"># @Desc: https://leetcode-cn.com/problems/3sum-closest/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">threeSumClosest</span><span class="params">(self, nums, target)</span> -&gt; int:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> nums <span class="keyword">or</span> len(nums) &lt; <span class="number">3</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        nums.sort()</span><br><span class="line">        n = len(nums)</span><br><span class="line">        result = nums[<span class="number">0</span>] + nums[<span class="number">1</span>] + nums[<span class="number">2</span>]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, n - <span class="number">2</span>):</span><br><span class="line">            left = i + <span class="number">1</span></span><br><span class="line">            right = n - <span class="number">1</span></span><br><span class="line">            <span class="keyword">while</span> left &lt; right:</span><br><span class="line">                min_value = nums[i] + nums[left] + nums[left + <span class="number">1</span>]</span><br><span class="line">                <span class="comment"># 最小的都比target大，后面的元素则无需进行比较</span></span><br><span class="line">                <span class="keyword">if</span> target &lt; min_value:</span><br><span class="line">                    <span class="keyword">if</span> abs(min_value - target) &lt; abs(result - target):</span><br><span class="line">                        result = min_value</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                <span class="comment"># 最大的都比target小，前面的元素则无需进行比较</span></span><br><span class="line">                max_value = nums[i] + nums[right] + nums[right - <span class="number">1</span>]</span><br><span class="line">                <span class="keyword">if</span> target &gt; max_value:</span><br><span class="line">                    <span class="keyword">if</span> abs(max_value - target) &lt; abs(result - target):</span><br><span class="line">                        result = max_value</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                sum_value = nums[i] + nums[left] + nums[right]</span><br><span class="line">                <span class="keyword">if</span> abs(sum_value - target) &lt; abs(result - target):</span><br><span class="line">                    result = sum_value</span><br><span class="line">                <span class="keyword">if</span> sum_value == target:</span><br><span class="line">                    <span class="keyword">return</span> sum_value</span><br><span class="line">                <span class="keyword">if</span> sum_value &gt; target:</span><br><span class="line">                    right -= <span class="number">1</span></span><br><span class="line">                    <span class="comment"># 去重</span></span><br><span class="line">                    <span class="keyword">while</span> (<span class="keyword">not</span> left == right) <span class="keyword">and</span> nums[right] == nums[right + <span class="number">1</span>]:</span><br><span class="line">                        right -= <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    left += <span class="number">1</span></span><br><span class="line">                    <span class="keyword">while</span> (<span class="keyword">not</span> left == right) <span class="keyword">and</span> nums[left] == nums[left - <span class="number">1</span>]:</span><br><span class="line">                        left += <span class="number">1</span></span><br><span class="line">            <span class="comment"># 去重</span></span><br><span class="line">            <span class="keyword">while</span> i &lt; n - <span class="number">2</span> <span class="keyword">and</span> nums[i] == nums[i + <span class="number">1</span>]:</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">so = Solution()</span><br><span class="line">print(so.threeSumClosest([<span class="number">-1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">-4</span>], <span class="number">1</span>))</span><br></pre></td></tr></tbody></table></figure><h2 id="letter-combinations-of-a-phone-number"><a href="#letter-combinations-of-a-phone-number" class="headerlink" title="letter-combinations-of-a-phone-number"></a>letter-combinations-of-a-phone-number</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time: 2019/12/29 5:55 下午</span></span><br><span class="line"><span class="comment"># @Author: GraceKoo</span></span><br><span class="line"><span class="comment"># @File: 17_letter-combinations-of-a-phone-number.py</span></span><br><span class="line"><span class="comment"># @Desc: https://leetcode-cn.com/problems/letter-combinations-of-a-phone-number/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">letterCombinations</span><span class="params">(self, digits: str)</span>:</span></span><br><span class="line">        digit_number_dict = {</span><br><span class="line">            <span class="string">"2"</span>: [<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>],</span><br><span class="line">            <span class="string">"3"</span>: [<span class="string">"d"</span>, <span class="string">"e"</span>, <span class="string">"f"</span>],</span><br><span class="line">            <span class="string">"4"</span>: [<span class="string">"g"</span>, <span class="string">"h"</span>, <span class="string">"i"</span>],</span><br><span class="line">            <span class="string">"5"</span>: [<span class="string">"j"</span>, <span class="string">"k"</span>, <span class="string">"l"</span>],</span><br><span class="line">            <span class="string">"6"</span>: [<span class="string">"m"</span>, <span class="string">"n"</span>, <span class="string">"o"</span>],</span><br><span class="line">            <span class="string">"7"</span>: [<span class="string">"p"</span>, <span class="string">"q"</span>, <span class="string">"r"</span>, <span class="string">"s"</span>],</span><br><span class="line">            <span class="string">"8"</span>: [<span class="string">"t"</span>, <span class="string">"u"</span>, <span class="string">"v"</span>],</span><br><span class="line">            <span class="string">"9"</span>: [<span class="string">"w"</span>, <span class="string">"x"</span>, <span class="string">"y"</span>, <span class="string">"z"</span>],</span><br><span class="line">        }</span><br><span class="line">        output = []</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">backtrack</span><span class="params">(combination, next_digits)</span>:</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> next_digits:</span><br><span class="line">                output.append(combination)  <span class="comment"># "ap"、"aq"、"ar"......</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">for</span> letter <span class="keyword">in</span> digit_number_dict[next_digits[<span class="number">0</span>]]:</span><br><span class="line">                    backtrack(combination + letter, next_digits[<span class="number">1</span>:])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> digits:</span><br><span class="line">            backtrack(<span class="string">""</span>, digits)</span><br><span class="line">        <span class="keyword">return</span> output</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">so = Solution()</span><br><span class="line">print(so.letterCombinations(<span class="string">"27"</span>))</span><br></pre></td></tr></tbody></table></figure><h2 id="4Sum"><a href="#4Sum" class="headerlink" title="4Sum"></a>4Sum</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time: 2019/12/30 1:15 下午</span></span><br><span class="line"><span class="comment"># @Author: GraceKoo</span></span><br><span class="line"><span class="comment"># @File: 18_4Sum.py</span></span><br><span class="line"><span class="comment"># @Desc: https://leetcode-cn.com/problems/4sum/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fourSum</span><span class="params">(self, nums, target)</span>:</span></span><br><span class="line">        nums = sorted(nums)</span><br><span class="line">        <span class="keyword">if</span> len(nums) &lt; <span class="number">4</span>:</span><br><span class="line">            <span class="keyword">return</span> []</span><br><span class="line">        <span class="keyword">elif</span> sum(nums[:<span class="number">4</span>]) &gt; target:</span><br><span class="line">            <span class="keyword">return</span> []</span><br><span class="line">        n = len(nums)</span><br><span class="line">        result_li = []</span><br><span class="line">        <span class="comment"># 固定i与left，对middle与right进行查找与去重</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(n - <span class="number">2</span>):</span><br><span class="line">            <span class="keyword">for</span> left <span class="keyword">in</span> range(i + <span class="number">1</span>, n - <span class="number">1</span>):</span><br><span class="line">                middle = left + <span class="number">1</span></span><br><span class="line">                right = n - <span class="number">1</span></span><br><span class="line">                <span class="keyword">while</span> middle != right:</span><br><span class="line">                    sum_value = nums[i] + nums[left] + nums[middle] + nums[right]</span><br><span class="line">                    <span class="keyword">if</span> (</span><br><span class="line">                        sum_value == target</span><br><span class="line">                        <span class="keyword">and</span> [nums[i], nums[left], nums[middle], nums[right]]</span><br><span class="line">                        <span class="keyword">not</span> <span class="keyword">in</span> result_li</span><br><span class="line">                    ):</span><br><span class="line">                        result_li.append(</span><br><span class="line">                            [nums[i], nums[left], nums[middle], nums[right]]</span><br><span class="line">                        )</span><br><span class="line">                    <span class="keyword">if</span> sum_value &lt;= target:</span><br><span class="line">                        middle += <span class="number">1</span></span><br><span class="line">                        <span class="comment"># 去重</span></span><br><span class="line">                        <span class="keyword">while</span> middle != right <span class="keyword">and</span> nums[middle] == nums[middle - <span class="number">1</span>]:</span><br><span class="line">                            middle += <span class="number">1</span></span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        right -= <span class="number">1</span></span><br><span class="line">                        <span class="comment"># 去重</span></span><br><span class="line">                        <span class="keyword">while</span> middle != right <span class="keyword">and</span> nums[right] == nums[right + <span class="number">1</span>]:</span><br><span class="line">                            right -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> result_li</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">so = Solution()</span><br><span class="line">print(so.fourSum([<span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">-2</span>, <span class="number">2</span>], <span class="number">0</span>))</span><br></pre></td></tr></tbody></table></figure><h2 id="remove-nth-node-from-end-of-list"><a href="#remove-nth-node-from-end-of-list" class="headerlink" title="remove-nth-node-from-end-of-list"></a>remove-nth-node-from-end-of-list</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time: 2019/12/31 12:11 下午</span></span><br><span class="line"><span class="comment"># @Author: GraceKoo</span></span><br><span class="line"><span class="comment"># @File: 19_remove-nth-node-from-end-of-list.py</span></span><br><span class="line"><span class="comment"># @Desc: 通过同时向前移动两个间隔为n的指针，直到第一个指针到达最后一个节点。此时第二个指针将指向从最后一个节点数起的第n个节点</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListNode</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        self.val = x</span><br><span class="line">        self.next = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">removeNthFromEnd</span><span class="params">(self, head: ListNode, n: int)</span> -&gt; ListNode:</span></span><br><span class="line">        <span class="comment"># 哑节点用来简化某些极端情况，例如列表中只有含有一个节点，或需要删除列表的头部</span></span><br><span class="line">        head_pre = ListNode(<span class="number">-1</span>)</span><br><span class="line">        head_pre.next, start, end = head, head_pre, head_pre</span><br><span class="line">        <span class="comment"># 让end节点向前走n步</span></span><br><span class="line">        <span class="keyword">while</span> end <span class="keyword">and</span> n &gt; <span class="number">0</span>:</span><br><span class="line">            end = end.next</span><br><span class="line">        <span class="comment"># 如果end已经走到末尾，则证明比n长，直接退出</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> end:</span><br><span class="line">            <span class="keyword">return</span> head</span><br><span class="line">        <span class="keyword">while</span> end.next:</span><br><span class="line">            start, end = start.next, end.next</span><br><span class="line">        <span class="comment"># 删除倒数第n个节点</span></span><br><span class="line">        start.next = start.next.next</span><br><span class="line">        <span class="keyword">return</span> head</span><br></pre></td></tr></tbody></table></figure><h2 id="length-of-longest-substring"><a href="#length-of-longest-substring" class="headerlink" title="length_of_longest_substring"></a>length_of_longest_substring</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time : 2019/10/8 8:17 下午</span></span><br><span class="line"><span class="comment"># @Author: GraceKoo</span></span><br><span class="line"><span class="comment"># @File:  3_length_of_longest_substring.py</span></span><br><span class="line"><span class="comment"># @Desc:</span></span><br><span class="line"><span class="keyword">import</span> timeit</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">lengthoflongestsubstring</span><span class="params">(self, s: str)</span> -&gt; int:</span></span><br><span class="line">        tem_length = <span class="number">0</span></span><br><span class="line">        max_length = <span class="number">0</span></span><br><span class="line">        s_set = set()</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(s)):</span><br><span class="line">            <span class="keyword">if</span> s[i] <span class="keyword">in</span> s_set:</span><br><span class="line">                s_set.remove(s[i])</span><br><span class="line">                tem_length = <span class="number">0</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                s_set.add(s[i])</span><br><span class="line">                tem_length += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> tem_length &gt; max_length:</span><br><span class="line">                max_length = tem_length</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> max_length</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    so = Solution()</span><br><span class="line">    test_list = <span class="string">"pwdflkkkpwdsadf"</span></span><br><span class="line">    start = timeit.default_timer()</span><br><span class="line">    print(so.lengthoflongestsubstring(test_list))</span><br><span class="line">    end = timeit.default_timer()</span><br><span class="line">    print(str((end - start) * <span class="number">1000</span>), <span class="string">"s"</span>)  <span class="comment"># s0.034690000006776245 s</span></span><br></pre></td></tr></tbody></table></figure><h2 id="merge-sorted-array"><a href="#merge-sorted-array" class="headerlink" title="merge-sorted-array"></a>merge-sorted-array</h2><p>解题思路：</p><p>初阶版 — 合并后排序</p><p>时间复杂度 : <code>O((n + m)log(n + m))</code>、空间复杂度<code>O(1)</code></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> List</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">merge</span><span class="params">(self, nums1: List[int], m: int, nums2: List[int], n: int)</span> -&gt; List:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Do not return anything, modify nums1 in-place instead.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        nums1[:] = sorted(nums1[:m], nums2)</span><br><span class="line">        <span class="keyword">return</span> nums1</span><br></pre></td></tr></tbody></table></figure><p>进阶版：双指针/从前往后</p><p>最直接的算法实现是将指针p1 置为 nums1的开头， p2为 nums2的开头，在每一步将最小值放入输出数组中。</p><p>由于 nums1 是用于输出的数组，需要将nums1中的前m个元素放在其他地方，也就需要 O(m)O(m) 的空间复杂度。</p><p>时间复杂度 : <code>O(n + m)</code>、空间复杂度<code>O(m)</code></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">merge</span><span class="params">(self, nums1, m, nums2, n)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type nums1: List[int]</span></span><br><span class="line"><span class="string">        :type m: int</span></span><br><span class="line"><span class="string">        :type nums2: List[int]</span></span><br><span class="line"><span class="string">        :type n: int</span></span><br><span class="line"><span class="string">        :rtype: void Do not return anything, modify nums1 in-place instead.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="comment"># Make a copy of nums1.</span></span><br><span class="line">        nums1_copy = nums1[:m] </span><br><span class="line">        nums1[:] = []</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Two get pointers for nums1_copy and nums2.</span></span><br><span class="line">        p1 = <span class="number">0</span> </span><br><span class="line">        p2 = <span class="number">0</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># Compare elements from nums1_copy and nums2</span></span><br><span class="line">        <span class="comment"># and add the smallest one into nums1.</span></span><br><span class="line">        <span class="keyword">while</span> p1 &lt; m <span class="keyword">and</span> p2 &lt; n: </span><br><span class="line">            <span class="keyword">if</span> nums1_copy[p1] &lt; nums2[p2]: </span><br><span class="line">                nums1.append(nums1_copy[p1])</span><br><span class="line">                p1 += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                nums1.append(nums2[p2])</span><br><span class="line">                p2 += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># if there are still elements to add</span></span><br><span class="line">        <span class="keyword">if</span> p1 &lt; m: </span><br><span class="line">            nums1[p1 + p2:] = nums1_copy[p1:]</span><br><span class="line">        <span class="keyword">if</span> p2 &lt; n:</span><br><span class="line">            nums1[p1 + p2:] = nums2[p2:]</span><br></pre></td></tr></tbody></table></figure><p>高阶版：三指针/从后往前</p><p>p1、p2分别指向nums1、nums2当前准备移动的元素。p指向当前待放置的位置。</p><p>哪个指向的数字大，则将其放置于p所指的位置上。</p><p>时间复杂度 :  <code>O(n + m)</code>、空间复杂度<code>O(1)</code></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time: 2020/4/1 11:24 </span></span><br><span class="line"><span class="comment"># @Author: GraceKoo</span></span><br><span class="line"><span class="comment"># @File: 88_merge-sorted-array.py</span></span><br><span class="line"><span class="comment"># @Desc:https://leetcode-cn.com/problems/merge-sorted-array/</span></span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> List</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">merge</span><span class="params">(self, nums1: List[int], m: int, nums2: List[int], n: int)</span> -&gt; List:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Do not return anything, modify nums1 in-place instead.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> nums1:</span><br><span class="line">            <span class="keyword">return</span> nums2</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> nums2:</span><br><span class="line">            <span class="keyword">return</span> nums1</span><br><span class="line">        p1 = m - <span class="number">1</span></span><br><span class="line">        p2 = n - <span class="number">1</span></span><br><span class="line">        p = m + n - <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> p1 &gt;= <span class="number">0</span> <span class="keyword">and</span> p2 &gt;= <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">if</span> nums1[p1] &lt; nums2[p2]:</span><br><span class="line">                nums1[p] = nums2[p2]</span><br><span class="line">                p2 -= <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                nums1[p] = nums1[p1]</span><br><span class="line">                p1 -= <span class="number">1</span></span><br><span class="line">            p -= <span class="number">1</span></span><br><span class="line">        <span class="comment"># 如果nums2中有没有进行添加的元素，则进行添加</span></span><br><span class="line">        nums1[:p2 + <span class="number">1</span>] = nums2[:p2 + <span class="number">1</span>]</span><br><span class="line">        <span class="keyword">return</span> nums1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">so = Solution()</span><br><span class="line">print(so.merge(nums1=[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>], m=<span class="number">3</span>, nums2=[<span class="number">2</span>, <span class="number">5</span>, <span class="number">6</span>], n=<span class="number">3</span>))</span><br></pre></td></tr></tbody></table></figure><h2 id="reOrderArray"><a href="#reOrderArray" class="headerlink" title="reOrderArray"></a>reOrderArray</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time: 2020/5/30 11:35 </span></span><br><span class="line"><span class="comment"># @Author: GraceKoo</span></span><br><span class="line"><span class="comment"># @File: reOrderArray.py</span></span><br><span class="line"><span class="comment"># @Desc: https://www.nowcoder.com/practice/beb5aa231adc45b2a5dcc5b62c93f593?tpId=13&amp;tqId=11166&amp;tPage=1&amp;rp=1&amp;ru=/ta/</span></span><br><span class="line"><span class="comment"># coding-interviews&amp;qru=/ta/coding-interviews/question-ranking</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reOrderArray</span><span class="params">(self, array)</span>:</span></span><br><span class="line">        <span class="comment"># write code here</span></span><br><span class="line">        len_array = len(array)</span><br><span class="line">        <span class="keyword">if</span> len_array &lt;= <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> array</span><br><span class="line">        left = <span class="number">0</span></span><br><span class="line">        right = len_array - <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> left &lt;= right:</span><br><span class="line">            <span class="comment"># 如果是偶数，就添加到末尾</span></span><br><span class="line">            <span class="keyword">if</span> array[left] &amp; <span class="number">1</span> == <span class="number">0</span>:</span><br><span class="line">                array.append(array.pop(left))</span><br><span class="line">                right -= <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                left += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> array</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">so = Solution()</span><br><span class="line">print(so.reOrderArray([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]))</span><br></pre></td></tr></tbody></table></figure><h2 id="interview-31"><a href="#interview-31" class="headerlink" title="interview_31"></a>interview_31</h2><p>写不动写不动，太难了。直接暴力吧。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time: 2020/7/2 11:50 </span></span><br><span class="line"><span class="comment"># @Author: GraceKoo</span></span><br><span class="line"><span class="comment"># @File: interview_31.py</span></span><br><span class="line"><span class="comment"># @Desc: https://leetcode-cn.com/problems/1nzheng-shu-zhong-1chu-xian-de-ci-shu-lcof/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">countDigitOne</span><span class="params">(self, n: int)</span> -&gt; int:</span></span><br><span class="line">        s = <span class="string">""</span></span><br><span class="line">        <span class="keyword">while</span> n:</span><br><span class="line">            s += str(n)</span><br><span class="line">            n -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> s.count(<span class="string">"1"</span>)</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">so = Solution()</span><br><span class="line">print(so.countDigitOne(<span class="number">12</span>))</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;索引&quot;&gt;&lt;a href=&quot;#索引&quot; class=&quot;headerlink&quot; title=&quot;索引&quot;&gt;&lt;/a&gt;索引&lt;/h1&gt;&lt;div class=&quot;table-container&quot;&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:left&quot;&gt;题目类型&lt;/th&gt;
&lt;th style=&quot;text-align:left&quot;&gt;题目&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;&lt;a href=&quot;https://unknown.yuzhouwan.com/posts/55663/#Hash&quot;&gt;Hash&lt;/a&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;&lt;a href=&quot;https://unknown.yuzhouwan.com/posts/55663/#twoSum&quot;&gt;twoSum&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;&lt;a href=&quot;https://unknown.yuzhouwan.com/posts/55663/#valid-sudoku&quot;&gt;valid-sudoku&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;&lt;a href=&quot;https://unknown.yuzhouwan.com/posts/55663/#first-missing-positive&quot;&gt;first-missing-positive&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;&lt;a href=&quot;https://unknown.yuzhouwan.com/posts/55663/#LinkNode&quot;&gt;LinkNode&lt;/a&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;&lt;a href=&quot;https://unknown.yuzhouwan.com/posts/55663/#add-two-numbers&quot;&gt;add-two-numbers&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;&lt;a href=&quot;https://unknown.yuzhouwan.com/posts/55663/#merge-two-sorted-lists&quot;&gt;merge-two-sorted-lists&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;&lt;a href=&quot;https://unknown.yuzhouwan.com/posts/55663/#swap-nodes-in-pairs&quot;&gt;swap-nodes-in-pairs&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;&lt;a href=&quot;https://unknown.yuzhouwan.com/posts/55663/#reverse-nodes-in-k-group&quot;&gt;reverse-nodes-in-k-group&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;&lt;a href=&quot;https://unknown.yuzhouwan.com/posts/55663/#rotate-list&quot;&gt;rotate-list&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;&lt;a href=&quot;https://unknown.yuzhouwan.com/posts/55663/#remove-duplicates-from-sorted-list-ii&quot;&gt;remove-duplicates-from-sorted-list-ii&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;&lt;a href=&quot;https://unknown.yuzhouwan.com/posts/55663/#remove-duplicates-from-sorted-list&quot;&gt;remove-duplicates-from-sorted-list&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;&lt;a href=&quot;https://unknown.yuzhouwan.com/posts/55663/#partition-list&quot;&gt;partition-list&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;&lt;a href=&quot;https://unknown.yuzhouwan.com/posts/55663/#reverse-linked-list-ii&quot;&gt;reverse-linked-list-ii&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
    
    </summary>
    
    
      <category term="Algorithm" scheme="https://unknown.yuzhouwan.com/categories/Algorithm/"/>
    
    
      <category term="Algorithm" scheme="https://unknown.yuzhouwan.com/tags/Algorithm/"/>
    
      <category term="LeetCode" scheme="https://unknown.yuzhouwan.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>Regex</title>
    <link href="https://unknown.yuzhouwan.com/posts/25256/"/>
    <id>https://unknown.yuzhouwan.com/posts/25256/</id>
    <published>2020-02-04T23:55:00.000Z</published>
    <updated>2020-03-01T13:14:13.690Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h1><h2 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h2><div class="table-container"><table><thead><tr><th style="text-align:center">元字符</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">.</td><td style="text-align:center">匹配除换行符以外的任意字符</td></tr><tr><td style="text-align:center">\w</td><td style="text-align:center">匹配字母、数字、下划线、汉字</td></tr><tr><td style="text-align:center">\s</td><td style="text-align:center">匹配任意的空白符</td></tr><tr><td style="text-align:center">\d</td><td style="text-align:center">匹配数字</td></tr><tr><td style="text-align:center">\b</td><td style="text-align:center">匹配单词的开始或结束</td></tr><tr><td style="text-align:center">^</td><td style="text-align:center">匹配字符串的开始</td></tr><tr><td style="text-align:center">$</td><td style="text-align:center">匹配字符串的结束</td></tr></tbody></table></div><p>例：匹配有abc开头的字符串</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\babc或^abc</span><br></pre></td></tr></tbody></table></figure><a id="more"></a><h2 id="重复限定符"><a href="#重复限定符" class="headerlink" title="重复限定符"></a>重复限定符</h2><div class="table-container"><table><thead><tr><th style="text-align:center">语法</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">*</td><td style="text-align:center">重复零次或更多次</td></tr><tr><td style="text-align:center">+</td><td style="text-align:center">重复一次或者更多次</td></tr><tr><td style="text-align:center">？</td><td style="text-align:center">重复零次或一次</td></tr><tr><td style="text-align:center">{n}</td><td style="text-align:center">重复n次</td></tr><tr><td style="text-align:center">{n,}</td><td style="text-align:center">重复n次或更多次</td></tr><tr><td style="text-align:center">{n,m}</td><td style="text-align:center">重复n次到m次</td></tr></tbody></table></div><p>限定符作用于与它<strong>左边</strong>最近的一个字符。</p><p>例：匹配以a开头，0个或者多个以b结尾的字符串</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^ab*$</span><br></pre></td></tr></tbody></table></figure><h2 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h2><p>以”()“作为分组。</p><p>例：匹配以ab开头，0个或者多个以b结尾的字符串</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^(ab)*$</span><br></pre></td></tr></tbody></table></figure><p>注：如需匹配小括号，只要加转义字符串即可。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^(\(ab\))*$</span><br></pre></td></tr></tbody></table></figure><h2 id="条件或"><a href="#条件或" class="headerlink" title="条件或"></a>条件或</h2><p>利用“｜”来表达条件或。</p><p>例：匹配130/131/181/177等开头的11位手机号。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^(<span class="number">130</span>|<span class="number">131</span>|<span class="number">181</span>|<span class="number">177</span>)\d{<span class="number">8</span>}$</span><br></pre></td></tr></tbody></table></figure><h2 id="区间"><a href="#区间" class="headerlink" title="区间"></a>区间</h2><p>利用“[]”来表达区间条件。</p><blockquote><p>[0-9]：限定0到9</p><p>[A-Z]：限定A到Z</p><p>[165]：限定规定数字</p></blockquote><p>例：匹配130/131/132/156/158/159/145/177开头的11位数字</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^((<span class="number">13</span>[<span class="number">0</span><span class="number">-2</span>])|(<span class="number">15</span>[<span class="number">689</span>])|<span class="number">145</span>|<span class="number">177</span>)\d{<span class="number">8</span>}$</span><br></pre></td></tr></tbody></table></figure><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ul><li><a href="https://juejin.im/post/5b96a8e2e51d450e6a2de115" target="_blank" rel="noopener">掘金博文</a></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;基本语法&quot;&gt;&lt;a href=&quot;#基本语法&quot; class=&quot;headerlink&quot; title=&quot;基本语法&quot;&gt;&lt;/a&gt;基本语法&lt;/h1&gt;&lt;h2 id=&quot;元字符&quot;&gt;&lt;a href=&quot;#元字符&quot; class=&quot;headerlink&quot; title=&quot;元字符&quot;&gt;&lt;/a&gt;元字符&lt;/h2&gt;&lt;div class=&quot;table-container&quot;&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:center&quot;&gt;元字符&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;.&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;匹配除换行符以外的任意字符&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;\w&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;匹配字母、数字、下划线、汉字&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;\s&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;匹配任意的空白符&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;\d&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;匹配数字&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;\b&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;匹配单词的开始或结束&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;^&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;匹配字符串的开始&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;$&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;匹配字符串的结束&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;p&gt;例：匹配有abc开头的字符串&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;\babc或^abc&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Tools" scheme="https://unknown.yuzhouwan.com/categories/Tools/"/>
    
    
      <category term="Regex" scheme="https://unknown.yuzhouwan.com/tags/Regex/"/>
    
  </entry>
  
  <entry>
    <title>Image-Algorithm-Summarize</title>
    <link href="https://unknown.yuzhouwan.com/posts/58748/"/>
    <id>https://unknown.yuzhouwan.com/posts/58748/</id>
    <published>2020-02-01T12:06:00.000Z</published>
    <updated>2020-05-25T12:00:50.675Z</updated>
    
    <content type="html"><![CDATA[<h1 id="White-Balance"><a href="#White-Balance" class="headerlink" title="White Balance"></a>White Balance</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>相机的白平衡控制，是为了让实际环境中白色的物体在你拍摄的画面中也呈现出“真正”的白色。不同性质的光源会在画面中产生不同的色彩倾向，比如说，蜡烛的光线会使画面偏橘黄色，而黄昏过后的光线则会为景物披上一层蓝色的冷调。而我们的视觉系统会自动对不同的光线作出补偿，所以无论在暖调还是冷调的光线环境下，我们看一张白纸永远还是白色的。但相机则不然，它只会直接记录呈现在它面前的色彩，这就会导致画面色彩偏暖或偏冷。</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>开暖光灯：YUV -&gt; RGB -&gt; SV ，全图SV值S需在0～0.1之间，V需在90～255之间。</p><a id="more"></a><h1 id="IR-Cut"><a href="#IR-Cut" class="headerlink" title="IR-Cut"></a>IR-Cut</h1><h2 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h2><p>自然界存在着各种波长的光线，通过折射人眼能看到不同颜色的光线，这就是光线的波长不同所导致的。其实还有许多光线是人眼看不到的，人眼识别光线的波长范围在320nm-760nm之间， 超过760nm的光线人眼就无法见到，比如红外光等。<br>随着科学的进步，人类发明了摄像机，理论上讲摄像机可以看到绝大部分波长的光线，但在摄像机的使用过程中就出现了一个问题，由于各种光线的参杂，摄像机看到的物体反映在监视器上与人眼直接看到的就变样了。如人眼看到绿色，通过摄像机则变成蓝色，产生彩色失真。过去，为解决色彩失真问题，一般在CCD前贴有一低通滤片，该滤片阻碍了红外光的进出，故白天彩色不失真，但夜间却没有了夜视功能。<br>IR CUT是一种机械装置，内有两个窗口，一为低通滤片一为透明玻璃，可依需要左右移动，从而白天彩色不失真，且夜间仍有夜视功能。简单的说，通过IR CUT，白天只允许760nm或780nm以下波长的光线进入，避免了白天的彩色失真。晚上只允许760nm或780nm以上波长的红外光线进入，避免760nm或780nm以下波长的可见光对红外光的干扰，于是在白天与夜晚都能取得最佳视觉效果。随着技术的进步，IR CUT结合低通滤片与<a href="https://www.baidu.com/s?wd=高通&amp;tn=SE_PcZhidaonwhc_ngpagmjz&amp;rsv_dl=gh_pc_zhidao" target="_blank" rel="noopener">高通</a>滤片在改进<a href="https://www.baidu.com/s?wd=夜视摄像机&amp;tn=SE_PcZhidaonwhc_ngpagmjz&amp;rsv_dl=gh_pc_zhidao" target="_blank" rel="noopener">夜视摄像机</a>的性能上发挥越来越重要的作用．低通滤片：以镀膜方式使光线中波长在760nm或780nm以下的光线通过，超过760nm或780nm波长的光线阻止通过。<a href="https://www.baidu.com/s?wd=高通&amp;tn=SE_PcZhidaonwhc_ngpagmjz&amp;rsv_dl=gh_pc_zhidao" target="_blank" rel="noopener">高通</a>滤片：以镀膜方式使光线中波长在760nm或780nm以下的光线阻止通过，只准超过760nm或780nm以上波长的光线通过。<br>根据上述分析，应用低通滤片技术，摄像机能够模拟人的眼睛，只接收同样范围波长的光线，这样就解决了摄像机的色彩失真问题。而通过<a href="https://www.baidu.com/s?wd=高通&amp;tn=SE_PcZhidaonwhc_ngpagmjz&amp;rsv_dl=gh_pc_zhidao" target="_blank" rel="noopener">高通</a>滤片技术的应用，解决了在夜间杂光干扰红外光问题。LED红外技术的出现，大大拓宽了监控领域的时空范畴，<a href="https://www.baidu.com/s?wd=红外摄像机&amp;tn=SE_PcZhidaonwhc_ngpagmjz&amp;rsv_dl=gh_pc_zhidao" target="_blank" rel="noopener">红外摄像机</a>得到了广泛的应用。但同时，我们也发现市场上流行的传统LED<a href="https://www.baidu.com/s?wd=红外摄像机&amp;tn=SE_PcZhidaonwhc_ngpagmjz&amp;rsv_dl=gh_pc_zhidao" target="_blank" rel="noopener">红外摄像机</a>存在着许多致命的缺陷：如散热问题、寿命问题、手电筒效应问题，夜晚可见光干扰的问题等。LED Array 技术解决了寿命问题，新一代的LED Array技术基本解决了“手电筒”效应，而IR CUT技术完美地解决了杂光干扰。</p><h2 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h2><p>关、开滤光片，打开红外灯，计算平均亮度是否符合要求（155～255之间）。</p><h1 id="Bad-Pixel"><a href="#Bad-Pixel" class="headerlink" title="Bad Pixel"></a>Bad Pixel</h1><h2 id="概念-2"><a href="#概念-2" class="headerlink" title="概念"></a>概念</h2><p>图像坏点(Bad pixel) : 图像传感器上光线采集点(像素点)所形成的阵列存在工艺上的缺陷，或光信号进行转化为电信号的过程中出现错误，从而会造成图像上像素信息错误，导致图像中的像素值不准确，这些有缺陷的像素即为图像坏点。</p><h2 id="实现-2"><a href="#实现-2" class="headerlink" title="实现"></a>实现</h2><p>根据灰度值确定坏点</p><h1 id="Shading"><a href="#Shading" class="headerlink" title="Shading"></a>Shading</h1><h2 id="概念-3"><a href="#概念-3" class="headerlink" title="概念"></a>概念</h2><p>暗角一词属于摄影术语。对着亮度均匀景物，画面四角有变暗的现象，叫做“失光”，俗称“暗角”。</p><p>产生暗角的原因主要有：</p><p>1.边角的成像光线与<a href="https://baike.baidu.com/item/镜头光轴/10196349" target="_blank" rel="noopener">镜头光轴</a>有较大的夹角，是造成边角失光的主要原因。沿着<a href="https://baike.baidu.com/item/视场/8231871" target="_blank" rel="noopener">视场</a>边缘的光线的前进方向看<a href="https://baike.baidu.com/item/光圈/94964" target="_blank" rel="noopener">光圈</a>，由于光线与光圈所在的平面有夹角，看到的光圈是椭圆的，所以通光面积减小。镜头光心到胶片的边缘距离较大，同样的光圈直径到达底片的光线夹角较小，亮度必然减小。同理，同样的光线偏角，对于边角光线位移较大，等价于照在较大的面积上。而面积是与位移的平方成正比的，所以综合上述原因，边缘亮度与光线和光轴夹角的COS值的4次方成正比。换句话说，<a href="https://baike.baidu.com/item/广角镜头/278835" target="_blank" rel="noopener">广角镜头</a>边缘亮度随着视角变大急剧下降。</p><p>2.<a href="https://baike.baidu.com/item/长焦镜头/879928" target="_blank" rel="noopener">长焦镜头</a>尤其是<a href="https://baike.baidu.com/item/变焦/9696019" target="_blank" rel="noopener">变焦</a>长焦镜头镜片很多，偏离<a href="https://baike.baidu.com/item/光圈/94964" target="_blank" rel="noopener">光圈</a>比较远的镜片为了能让边角光线通过，这些镜片必须很大。为了降低成本，缩小了这些镜片直径，造成边角成像光线不能完全通过，降低了边角的亮度。</p><p>3.边角的<a href="https://baike.baidu.com/item/像差/448364" target="_blank" rel="noopener">像差</a>较大。为了提高像质，某些镜片的边缘或专门设置的光阑有意挡住部分影响成像质量的边缘光线，造成边角失光。</p><p><a href="https://baike.baidu.com/item/鱼眼镜头/343506" target="_blank" rel="noopener">鱼眼镜头</a>虽然视角极大，但是由于边缘<a href="https://baike.baidu.com/item/放大倍率/10294653" target="_blank" rel="noopener">放大倍率</a>很小，所以几乎没有边角失光。</p><p>高档<a href="https://baike.baidu.com/item/变焦镜头/2971419" target="_blank" rel="noopener">变焦镜头</a>已经花了大的成本，可以加大某些镜片、完美地校正像差，高档长焦镜头包括变焦镜头边缘失光很小。</p><p>还有：<a href="https://baike.baidu.com/item/广角镜头/278835" target="_blank" rel="noopener">广角镜头</a>如果使用了过多的<a href="https://baike.baidu.com/item/滤色镜/205532" target="_blank" rel="noopener">滤色镜</a>，等价于增长了镜筒，可能造成边角暗角甚至黑角！</p><p>暗角在任何一只镜头上都存在，在MTF<a href="https://baike.baidu.com/item/透光率/1192539" target="_blank" rel="noopener">透光率</a>图上可以知道，从中心到边缘会损失不少，尤其在<a href="https://baike.baidu.com/item/大光圈/8567887" target="_blank" rel="noopener">大光圈</a>。在冲扩<a href="https://baike.baidu.com/item/负片/3897269" target="_blank" rel="noopener">负片</a>是问题不大，因为放大头也存在这个问题，会抵消掉一部分影响，当然，如果镜头太滥，失光极其明显，那就能在照片上看出来了。</p><p>对于<a href="https://baike.baidu.com/item/反转片/3897682" target="_blank" rel="noopener">反转片</a>，问题就严重一些，就需要仔细研究研究了，一般的现象是：广角比长焦明显一些，反正怎么样全看你的使用情况，缩小一下<a href="https://baike.baidu.com/item/光圈/94964" target="_blank" rel="noopener">光圈</a>就是了。 </p><p>— from baike.baidu.com</p><h2 id="实现-3"><a href="#实现-3" class="headerlink" title="实现"></a>实现</h2><p>开冷光灯：分为亮度暗角和色彩暗角。</p><p>亮度暗角：取四个角（10 * 10像素），四个角亮度与中间块做比值，需在0.3～1之间。</p><p>色彩暗角：图像被分成20 * 20块，算每块的R/G、B/G，分别除以中心的R/G，四个角比值都应在0.8～1.2之间。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;White-Balance&quot;&gt;&lt;a href=&quot;#White-Balance&quot; class=&quot;headerlink&quot; title=&quot;White Balance&quot;&gt;&lt;/a&gt;White Balance&lt;/h1&gt;&lt;h2 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h2&gt;&lt;p&gt;相机的白平衡控制，是为了让实际环境中白色的物体在你拍摄的画面中也呈现出“真正”的白色。不同性质的光源会在画面中产生不同的色彩倾向，比如说，蜡烛的光线会使画面偏橘黄色，而黄昏过后的光线则会为景物披上一层蓝色的冷调。而我们的视觉系统会自动对不同的光线作出补偿，所以无论在暖调还是冷调的光线环境下，我们看一张白纸永远还是白色的。但相机则不然，它只会直接记录呈现在它面前的色彩，这就会导致画面色彩偏暖或偏冷。&lt;/p&gt;
&lt;h2 id=&quot;实现&quot;&gt;&lt;a href=&quot;#实现&quot; class=&quot;headerlink&quot; title=&quot;实现&quot;&gt;&lt;/a&gt;实现&lt;/h2&gt;&lt;p&gt;开暖光灯：YUV -&amp;gt; RGB -&amp;gt; SV ，全图SV值S需在0～0.1之间，V需在90～255之间。&lt;/p&gt;
    
    </summary>
    
    
      <category term="CV" scheme="https://unknown.yuzhouwan.com/categories/CV/"/>
    
    
      <category term="ImageAlgorithm" scheme="https://unknown.yuzhouwan.com/tags/ImageAlgorithm/"/>
    
  </entry>
  
  <entry>
    <title>AI中的数学知识</title>
    <link href="https://unknown.yuzhouwan.com/posts/59545/"/>
    <id>https://unknown.yuzhouwan.com/posts/59545/</id>
    <published>2020-02-01T11:08:26.000Z</published>
    <updated>2020-05-07T15:41:47.096Z</updated>
    
    <content type="html"><![CDATA[<h1 id="线性代数部分"><a href="#线性代数部分" class="headerlink" title="线性代数部分"></a>线性代数部分</h1><h2 id="矩阵及其运算合集"><a href="#矩阵及其运算合集" class="headerlink" title="矩阵及其运算合集"></a>矩阵及其运算合集</h2><a id="more"></a><h2 id="矩阵的行列式"><a href="#矩阵的行列式" class="headerlink" title="矩阵的行列式"></a>矩阵的行列式</h2><h2 id="矩阵的逆"><a href="#矩阵的逆" class="headerlink" title="矩阵的逆"></a>矩阵的逆</h2><h2 id="矩阵的初等变换"><a href="#矩阵的初等变换" class="headerlink" title="矩阵的初等变换"></a>矩阵的初等变换</h2><h2 id="矩阵的秩"><a href="#矩阵的秩" class="headerlink" title="矩阵的秩"></a>矩阵的秩</h2><h2 id="矩阵的特征值和特征向量"><a href="#矩阵的特征值和特征向量" class="headerlink" title="矩阵的特征值和特征向量"></a>矩阵的特征值和特征向量</h2><h2 id="矩阵对角化二次型"><a href="#矩阵对角化二次型" class="headerlink" title="矩阵对角化二次型"></a>矩阵对角化二次型</h2><h2 id="SVD分解的证明"><a href="#SVD分解的证明" class="headerlink" title="SVD分解的证明"></a>SVD分解的证明</h2><h2 id="SVD的应用与多元线性回归"><a href="#SVD的应用与多元线性回归" class="headerlink" title="SVD的应用与多元线性回归"></a>SVD的应用与多元线性回归</h2><h1 id="微积分部分"><a href="#微积分部分" class="headerlink" title="微积分部分"></a>微积分部分</h1><h2 id="导数中的中值定理"><a href="#导数中的中值定理" class="headerlink" title="导数中的中值定理"></a>导数中的中值定理</h2><h2 id="泰勒公式函数极值定积分"><a href="#泰勒公式函数极值定积分" class="headerlink" title="泰勒公式函数极值定积分"></a>泰勒公式函数极值定积分</h2><h2 id="多元微积分"><a href="#多元微积分" class="headerlink" title="多元微积分"></a>多元微积分</h2><h1 id="概率论部分"><a href="#概率论部分" class="headerlink" title="概率论部分"></a>概率论部分</h1><h2 id="概率基础"><a href="#概率基础" class="headerlink" title="概率基础"></a>概率基础</h2><h2 id="随机变量与多维随机变量"><a href="#随机变量与多维随机变量" class="headerlink" title="随机变量与多维随机变量"></a>随机变量与多维随机变量</h2><h2 id="期望与方差"><a href="#期望与方差" class="headerlink" title="期望与方差"></a>期望与方差</h2><h2 id="参数的估计"><a href="#参数的估计" class="headerlink" title="参数的估计"></a>参数的估计</h2><h1 id="最优化理论"><a href="#最优化理论" class="headerlink" title="最优化理论"></a>最优化理论</h1><h2 id="无约束最优化"><a href="#无约束最优化" class="headerlink" title="无约束最优化"></a>无约束最优化</h2><h2 id="带约束的最优化"><a href="#带约束的最优化" class="headerlink" title="带约束的最优化"></a>带约束的最优化</h2><h2 id="对偶理论"><a href="#对偶理论" class="headerlink" title="对偶理论"></a>对偶理论</h2><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;线性代数部分&quot;&gt;&lt;a href=&quot;#线性代数部分&quot; class=&quot;headerlink&quot; title=&quot;线性代数部分&quot;&gt;&lt;/a&gt;线性代数部分&lt;/h1&gt;&lt;h2 id=&quot;矩阵及其运算合集&quot;&gt;&lt;a href=&quot;#矩阵及其运算合集&quot; class=&quot;headerlink&quot; title=&quot;矩阵及其运算合集&quot;&gt;&lt;/a&gt;矩阵及其运算合集&lt;/h2&gt;
    
    </summary>
    
    
      <category term="Math" scheme="https://unknown.yuzhouwan.com/categories/Math/"/>
    
    
      <category term="Machine Learning" scheme="https://unknown.yuzhouwan.com/tags/Machine-Learning/"/>
    
  </entry>
  
  <entry>
    <title>TensorFlow2.0 In Action</title>
    <link href="https://unknown.yuzhouwan.com/posts/29871/"/>
    <id>https://unknown.yuzhouwan.com/posts/29871/</id>
    <published>2020-02-01T00:06:06.000Z</published>
    <updated>2020-06-02T15:42:31.579Z</updated>
    
    <content type="html"><![CDATA[<h1 id="TensorFlow2-0简化的模型开发流程"><a href="#TensorFlow2-0简化的模型开发流程" class="headerlink" title="TensorFlow2.0简化的模型开发流程"></a>TensorFlow2.0简化的模型开发流程</h1><ul><li>使用tf.data加载数据</li><li>使用tf.keras构建模型，也可以使用premade estimator来验证模型（使用tesorflow hub进行迁移学习）</li><li>使用eager mode进行运行和调试</li><li>使用分发策略来进行分布式训练</li><li>导出到SavedModel</li><li>使用TesorFlow Serve、TensorFlow Lite、TensorFlow.js部署模型</li></ul><a id="more"></a><h1 id="TensorFlow-Keras"><a href="#TensorFlow-Keras" class="headerlink" title="TensorFlow-Keras"></a>TensorFlow-Keras</h1><h2 id="tf-keras和keras的区别"><a href="#tf-keras和keras的区别" class="headerlink" title="tf.keras和keras的区别"></a>tf.keras和keras的区别</h2><ul><li>tf.keras全面支持eager mode</li><li>tf.keras支持基于tf.data的模型训练</li><li>tf.keras支持TPU训练</li><li>tf.keras支持tf.distribution中的分布式策略</li><li>tf.keras可以与TensorFlow中的estimator集成</li><li>tf.keras可以保存为SavedModel</li></ul><h2 id="搭建分类模型"><a href="#搭建分类模型" class="headerlink" title="搭建分类模型"></a>搭建分类模型</h2><h3 id="数据读取与展示"><a href="#数据读取与展示" class="headerlink" title="数据读取与展示"></a>数据读取与展示</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">from</span> tensorflow <span class="keyword">import</span> keras</span><br><span class="line"></span><br><span class="line">fashion_mnist = keras.datasets.fashion_mnist</span><br><span class="line">(x_train_all, y_train_all), (x_test, y_test) = fashion_mnist.load_data()</span><br><span class="line">x_valid, x_train = x_train_all[:<span class="number">5000</span>], x_train_all[<span class="number">5000</span>:] <span class="comment">#将数据集的前5000张作为训练集，后面的作为验证集</span></span><br><span class="line">y_valid, y_train = y_train_all[:<span class="number">5000</span>], y_train_all[<span class="number">5000</span>:]</span><br><span class="line"></span><br><span class="line">print(x_valid.shape, y_valid.shape)</span><br><span class="line">print(x_train.shape, y_train.shape)</span><br><span class="line">print(x_test.shape, y_test.shape)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">(<span class="number">5000</span>, <span class="number">28</span>, <span class="number">28</span>) (<span class="number">5000</span>,)</span><br><span class="line">(<span class="number">55000</span>, <span class="number">28</span>, <span class="number">28</span>) (<span class="number">55000</span>,)</span><br><span class="line">(<span class="number">10000</span>, <span class="number">28</span>, <span class="number">28</span>) (<span class="number">10000</span>,)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 展示一张图片</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_single_image</span><span class="params">(img_arr)</span>:</span></span><br><span class="line">    plt.imshow(img_arr, cmap=<span class="string">"binary"</span>)</span><br><span class="line">    plt.show()</span><br><span class="line">show_single_image(x_train_all[<span class="number">0</span>]) <span class="comment"># 查看训练集中的第一张图片</span></span><br></pre></td></tr></tbody></table></figure><p><img data-src="/images/tensorflow/show_image.png" alt="show_image"><br></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 展示多张图片</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_imgs</span><span class="params">(n_rows, n_cols, x_data, y_data, class_names)</span>:</span></span><br><span class="line">    <span class="keyword">assert</span> len(x_data) == len(y_data)</span><br><span class="line">    <span class="keyword">assert</span> n_rows * n_cols &lt; len(x_data) <span class="comment"># 查看图片的数量不能大于原本的样本数</span></span><br><span class="line">    plt.figure(figsize = (n_cols * <span class="number">1.4</span>, n_rows * <span class="number">1.6</span>))</span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> range(n_rows):</span><br><span class="line">        <span class="keyword">for</span> col <span class="keyword">in</span> range(n_cols):</span><br><span class="line">            index = n_cols * row + col</span><br><span class="line">            plt.subplot(n_rows, n_cols, index+<span class="number">1</span>)</span><br><span class="line">            plt.imshow(x_data[index], cmap=<span class="string">"binary"</span>,</span><br><span class="line">                      interpolation = <span class="string">'nearest'</span>)</span><br><span class="line">            plt.axis(<span class="string">'off'</span>)</span><br><span class="line">            plt.title(class_names[y_data[index]])</span><br><span class="line">    plt.show()</span><br><span class="line">    </span><br><span class="line">class_names = [<span class="string">'T-shirt'</span>, <span class="string">'Trouser'</span>, <span class="string">'Pullover'</span>, <span class="string">'Dress'</span>,</span><br><span class="line">              <span class="string">'Coat'</span>, <span class="string">'Sandal'</span>, <span class="string">'Shirt'</span>,<span class="string">'Sneaker'</span>,</span><br><span class="line">              <span class="string">'Bag'</span>, <span class="string">'Ankle boot'</span>]</span><br><span class="line">show_imgs(<span class="number">3</span>, <span class="number">5</span>, x_train, y_train, class_names)</span><br></pre></td></tr></tbody></table></figure><p></p><p><img data-src="/images/tensorflow/show_images.png" alt="show_images"></p><h3 id="模型构建"><a href="#模型构建" class="headerlink" title="模型构建"></a>模型构建</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">model = keras.models.Sequential()</span><br><span class="line">model.add(keras.layers.Flatten(input_shape=[<span class="number">28</span>, <span class="number">28</span>]))</span><br><span class="line">model.add(keras.layers.Dense(<span class="number">300</span>, activation=<span class="string">"relu"</span>))</span><br><span class="line">model.add(keras.layers.Dense(<span class="number">100</span>, activation=<span class="string">"relu"</span>))</span><br><span class="line">model.add(keras.layers.Dense(<span class="number">10</span>, activation=<span class="string">"softmax"</span>))</span><br><span class="line"></span><br><span class="line">model.compile(loss=<span class="string">"sparse_categorical_crossentropy"</span>,</span><br><span class="line">             optimizer=<span class="string">"sgd"</span>,</span><br><span class="line">             metrics=[<span class="string">"accuracy"</span>])</span><br><span class="line">model.layers</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[&lt;tensorflow.python.keras.layers.core.Flatten at <span class="number">0x12e0e8a58</span>&gt;,</span><br><span class="line"> &lt;tensorflow.python.keras.layers.core.Dense at <span class="number">0x12e1777b8</span>&gt;,</span><br><span class="line"> &lt;tensorflow.python.keras.layers.core.Dense at <span class="number">0x12dfdb3c8</span>&gt;,</span><br><span class="line"> &lt;tensorflow.python.keras.layers.core.Dense at <span class="number">0x12dfdbdd8</span>&gt;]</span><br></pre></td></tr></tbody></table></figure><ul><li>查看模型层次</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">model.summary()</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Model: <span class="string">"sequential_4"</span></span><br><span class="line">_________________________________________________________________</span><br><span class="line">Layer (type)                 Output Shape              Param <span class="comment">#   </span></span><br><span class="line">=================================================================</span><br><span class="line">flatten_4 (Flatten)          (<span class="literal">None</span>, <span class="number">784</span>)               <span class="number">0</span>         </span><br><span class="line">_________________________________________________________________</span><br><span class="line">dense_12 (Dense)             (<span class="literal">None</span>, <span class="number">300</span>)               <span class="number">235500</span>    </span><br><span class="line">_________________________________________________________________</span><br><span class="line">dense_13 (Dense)             (<span class="literal">None</span>, <span class="number">100</span>)               <span class="number">30100</span>     </span><br><span class="line">_________________________________________________________________</span><br><span class="line">dense_14 (Dense)             (<span class="literal">None</span>, <span class="number">10</span>)                <span class="number">1010</span>      </span><br><span class="line">=================================================================</span><br><span class="line">Total params: <span class="number">266</span>,<span class="number">610</span></span><br><span class="line">Trainable params: <span class="number">266</span>,<span class="number">610</span></span><br><span class="line">Non-trainable params: <span class="number">0</span></span><br></pre></td></tr></tbody></table></figure><ul><li>开始训练</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">history = model.fit(x_train, y_train, epochs=<span class="number">10</span>,</span><br><span class="line">                   validation_data=(x_valid, y_valid))</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">Train on <span class="number">55000</span> samples, validate on <span class="number">5000</span> samples</span><br><span class="line">Epoch <span class="number">1</span>/<span class="number">10</span></span><br><span class="line"><span class="number">55000</span>/<span class="number">55000</span> [==============================] - <span class="number">4</span>s <span class="number">80</span>us/sample - loss: <span class="number">42355302163052.2422</span> - accuracy: <span class="number">0.0995</span> - val_loss: <span class="number">2.3028</span> - val_accuracy: <span class="number">0.0914</span></span><br><span class="line">Epoch <span class="number">2</span>/<span class="number">10</span></span><br><span class="line"><span class="number">55000</span>/<span class="number">55000</span> [==============================] - <span class="number">4</span>s <span class="number">73</span>us/sample - loss: <span class="number">2.3027</span> - accuracy: <span class="number">0.0994</span> - val_loss: <span class="number">2.3026</span> - val_accuracy: <span class="number">0.1012</span></span><br><span class="line">Epoch <span class="number">3</span>/<span class="number">10</span></span><br><span class="line"><span class="number">55000</span>/<span class="number">55000</span> [==============================] - <span class="number">4</span>s <span class="number">71</span>us/sample - loss: <span class="number">2.3027</span> - accuracy: <span class="number">0.0986</span> - val_loss: <span class="number">2.3027</span> - val_accuracy: <span class="number">0.1002</span></span><br><span class="line">Epoch <span class="number">4</span>/<span class="number">10</span></span><br><span class="line"><span class="number">55000</span>/<span class="number">55000</span> [==============================] - <span class="number">4</span>s <span class="number">70</span>us/sample - loss: <span class="number">2.3027</span> - accuracy: <span class="number">0.0977</span> - val_loss: <span class="number">2.3027</span> - val_accuracy: <span class="number">0.0986</span></span><br><span class="line">Epoch <span class="number">5</span>/<span class="number">10</span></span><br><span class="line"><span class="number">55000</span>/<span class="number">55000</span> [==============================] - <span class="number">4</span>s <span class="number">72</span>us/sample - loss: <span class="number">2.3027</span> - accuracy: <span class="number">0.0971</span> - val_loss: <span class="number">2.3029</span> - val_accuracy: <span class="number">0.0914</span></span><br><span class="line">Epoch <span class="number">6</span>/<span class="number">10</span></span><br><span class="line"><span class="number">55000</span>/<span class="number">55000</span> [==============================] - <span class="number">4</span>s <span class="number">75</span>us/sample - loss: <span class="number">2.3027</span> - accuracy: <span class="number">0.0973</span> - val_loss: <span class="number">2.3028</span> - val_accuracy: <span class="number">0.0914</span></span><br><span class="line">Epoch <span class="number">7</span>/<span class="number">10</span></span><br><span class="line"><span class="number">55000</span>/<span class="number">55000</span> [==============================] - <span class="number">4</span>s <span class="number">72</span>us/sample - loss: <span class="number">2.3027</span> - accuracy: <span class="number">0.0981</span> - val_loss: <span class="number">2.3027</span> - val_accuracy: <span class="number">0.0986</span></span><br><span class="line">Epoch <span class="number">8</span>/<span class="number">10</span></span><br><span class="line"><span class="number">55000</span>/<span class="number">55000</span> [==============================] - <span class="number">4</span>s <span class="number">72</span>us/sample - loss: <span class="number">2.3027</span> - accuracy: <span class="number">0.0968</span> - val_loss: <span class="number">2.3028</span> - val_accuracy: <span class="number">0.0914</span></span><br><span class="line">Epoch <span class="number">9</span>/<span class="number">10</span></span><br><span class="line"><span class="number">55000</span>/<span class="number">55000</span> [==============================] - <span class="number">4</span>s <span class="number">73</span>us/sample - loss: <span class="number">2.3027</span> - accuracy: <span class="number">0.0982</span> - val_loss: <span class="number">2.3029</span> - val_accuracy: <span class="number">0.0914</span></span><br><span class="line">Epoch <span class="number">10</span>/<span class="number">10</span></span><br><span class="line"><span class="number">55000</span>/<span class="number">55000</span> [==============================] - <span class="number">4</span>s <span class="number">73</span>us/sample - loss: <span class="number">2.3027</span> - accuracy: <span class="number">0.0969</span> - val_loss: <span class="number">2.3028</span> - val_accuracy: <span class="number">0.0914</span></span><br></pre></td></tr></tbody></table></figure><ul><li>画图</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plot_learning_curves</span><span class="params">(history)</span>:</span></span><br><span class="line">    pd.DataFrame(history.history).plot(figsize=(<span class="number">8</span>, <span class="number">5</span>))</span><br><span class="line">    plt.grid(<span class="literal">True</span>)</span><br><span class="line">    plt.gca().set_ylim(<span class="number">0</span>,<span class="number">1</span>)</span><br><span class="line">    plt.show()</span><br><span class="line">plot_learning_curves(history)</span><br></pre></td></tr></tbody></table></figure><p><img data-src="/images/tensorflow/loss_model.png" alt="loss_model"></p><h2 id="Keras回调函数"><a href="#Keras回调函数" class="headerlink" title="Keras回调函数"></a>Keras回调函数</h2><h2 id="搭建回归模型"><a href="#搭建回归模型" class="headerlink" title="搭建回归模型"></a>搭建回归模型</h2><h2 id="搭建深度神经网络"><a href="#搭建深度神经网络" class="headerlink" title="搭建深度神经网络"></a>搭建深度神经网络</h2><h2 id="实现wide-amp-deep模型"><a href="#实现wide-amp-deep模型" class="headerlink" title="实现wide&amp;deep模型"></a>实现wide&amp;deep模型</h2><h2 id="Keras与scikit-learn实现超参数搜索"><a href="#Keras与scikit-learn实现超参数搜索" class="headerlink" title="Keras与scikit-learn实现超参数搜索"></a>Keras与scikit-learn实现超参数搜索</h2><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;TensorFlow2-0简化的模型开发流程&quot;&gt;&lt;a href=&quot;#TensorFlow2-0简化的模型开发流程&quot; class=&quot;headerlink&quot; title=&quot;TensorFlow2.0简化的模型开发流程&quot;&gt;&lt;/a&gt;TensorFlow2.0简化的模型开发流程&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;使用tf.data加载数据&lt;/li&gt;
&lt;li&gt;使用tf.keras构建模型，也可以使用premade estimator来验证模型（使用tesorflow hub进行迁移学习）&lt;/li&gt;
&lt;li&gt;使用eager mode进行运行和调试&lt;/li&gt;
&lt;li&gt;使用分发策略来进行分布式训练&lt;/li&gt;
&lt;li&gt;导出到SavedModel&lt;/li&gt;
&lt;li&gt;使用TesorFlow Serve、TensorFlow Lite、TensorFlow.js部署模型&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Machine Learning" scheme="https://unknown.yuzhouwan.com/categories/Machine-Learning/"/>
    
    
      <category term="Neural Network" scheme="https://unknown.yuzhouwan.com/tags/Neural-Network/"/>
    
  </entry>
  
  <entry>
    <title>Python进阶</title>
    <link href="https://unknown.yuzhouwan.com/posts/23063/"/>
    <id>https://unknown.yuzhouwan.com/posts/23063/</id>
    <published>2020-01-31T23:00:01.000Z</published>
    <updated>2020-03-03T10:56:55.693Z</updated>
    
    <content type="html"><![CDATA[<h1 id="args-和-Kwargs"><a href="#args-和-Kwargs" class="headerlink" title="*args 和 **Kwargs"></a><strong>*args</strong> 和 **Kwargs</h1><ul><li>*args 是用来发送一个非键值对的可变数量的参数列表给一个函 数</li><li>kwargs 允许你将不定长度的键值对, 作为参数传递给一个函数。 如果你想要在一个函 数里处理带名字的参数, 你应该使用kwargs。</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_args_kwargs</span><span class="params">(arg1, arg2, arg3)</span>:</span></span><br><span class="line">    print(<span class="string">"arg1:"</span>, arg1)</span><br><span class="line">    print(<span class="string">"arg2:"</span>, arg2)</span><br><span class="line">    print(<span class="string">"arg3:"</span>, arg3)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Test *args</span></span><br><span class="line">args = (<span class="string">"two"</span>, <span class="number">3</span>, <span class="number">5</span>)</span><br><span class="line">test_args_kwargs(*args)</span><br><span class="line"></span><br><span class="line">arg1: two</span><br><span class="line">arg2: <span class="number">3</span></span><br><span class="line">arg3: <span class="number">5</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Test **kwargs</span></span><br><span class="line">kwargs = {<span class="string">"arg3"</span>: <span class="number">3</span>, <span class="string">"arg2"</span>: <span class="string">"two"</span>, <span class="string">"arg1"</span>: <span class="number">5</span>}</span><br><span class="line">test_args_kwargs(**kwargs)</span><br><span class="line">arg1: <span class="number">5</span></span><br><span class="line">arg2: two</span><br><span class="line">arg3: <span class="number">3</span></span><br></pre></td></tr></tbody></table></figure><a id="more"></a><h1 id="Debugging模式"><a href="#Debugging模式" class="headerlink" title="Debugging模式"></a>Debugging模式</h1><p>python提供的pdb功能可以在命令行模式下或者函数内部设置断点进行调试。</p><p>常见命令列表如下：</p><ul><li>c: 继续执行</li><li>w: 显示当前正在执行的代码行的上下文信息</li><li>a: 打印当前函数的参数列表</li><li>s: 执行当前代码行，并停在第一个能停的地方(相当于单步进入)</li><li>n: 继续执行到当前函数的下一行，或者当前行直接返回(单步跳过)</li></ul><ul><li>命令行模式</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ python -m pdb my_script.py</span><br></pre></td></tr></tbody></table></figure><ul><li>函数内部执行</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pdb</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_bread</span><span class="params">()</span>:</span> pdb.set_trace()</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"This is pdb mode"</span></span><br></pre></td></tr></tbody></table></figure><h1 id="生成器：Generator"><a href="#生成器：Generator" class="headerlink" title="生成器：Generator"></a>生成器：Generator</h1><p>生成器也是一种迭代器，但<strong>只使用一次迭代</strong>。这是因为它们并没有把所有的值存在内存中，而是在运行时生成值。你通过遍历来使用它们，要么用一个“for”循环，要么将它们传递给任意可以进行迭代的函数和结构。大多数时候生成器是以函数来实现的。然而， 它们并不返回一个值，而是<strong>yield</strong>(暂且译作“生出”)一个值。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generator_function</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">        <span class="keyword">yield</span> i</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> generator_function():</span><br><span class="line">print(item)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Output: 0 </span></span><br><span class="line"><span class="comment">#1</span></span><br><span class="line"><span class="comment">#2</span></span><br><span class="line"><span class="comment">#3</span></span><br></pre></td></tr></tbody></table></figure><p>应用场景：不同一时间将所有计算出来的大量结果集分配到内存当中，特别是结果集里还包含循环。用这种方式，不必担心会大量使用资源。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 斐波那契数列的迭代器：会大量使用内存资源（在在计算很大的输入参数时）</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fibon</span><span class="params">(n)</span>:</span> a=b=<span class="number">1</span></span><br><span class="line">result = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">result.append(a)</span><br><span class="line">a, b = b, a + b </span><br><span class="line">  <span class="keyword">return</span> result</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 斐波那契数列的生成器：不会大量使用内存资源</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fibon</span><span class="params">(n)</span>:</span></span><br><span class="line">a=b=<span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line"><span class="keyword">yield</span> a</span><br><span class="line">a, b = b, a + b</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> fibon(<span class="number">1000000</span>):</span><br><span class="line">    print(x)</span><br></pre></td></tr></tbody></table></figure><h2 id="内置函数：next"><a href="#内置函数：next" class="headerlink" title="内置函数：next()"></a>内置函数：next()</h2><p>Python内置函数:next()。允许我们获取一个序列的下一个元素。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generator_function</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line"><span class="keyword">yield</span> i</span><br><span class="line">gen = generator_function() </span><br><span class="line">print(next(gen))</span><br><span class="line"><span class="comment"># Output: 0 </span></span><br><span class="line">print(next(gen))</span><br><span class="line"><span class="comment"># Output: 1</span></span><br><span class="line">print(next(gen))</span><br><span class="line"><span class="comment"># Output: 2</span></span><br><span class="line">print(next(gen))</span><br><span class="line"><span class="comment"># Output: Traceback (most recent call last):</span></span><br><span class="line"><span class="comment">#            File "&lt;stdin&gt;", line 1, in &lt;module&gt;</span></span><br><span class="line"><span class="comment">#         StopIteration</span></span><br></pre></td></tr></tbody></table></figure><h2 id="内置函数：iter"><a href="#内置函数：iter" class="headerlink" title="内置函数：iter()"></a>内置函数：iter()</h2><p>一个可迭代对象并不是一个迭代器，如下：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">my_string = <span class="string">"Yasoob"</span></span><br><span class="line">next(my_string)</span><br><span class="line"><span class="comment"># Output: Traceback (most recent call last): </span></span><br><span class="line"><span class="comment"># File "&lt;stdin&gt;", line 1, in &lt;module&gt;</span></span><br><span class="line"><span class="comment"># TypeError: str object is not an iterator</span></span><br></pre></td></tr></tbody></table></figure><p>iter。它将根据一个可迭代对象返回一个迭代器对象。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">my_string = <span class="string">"Yasoob"</span> </span><br><span class="line">my_iter = iter(my_string) </span><br><span class="line">next(my_iter)</span><br><span class="line"><span class="comment"># Output: 'Y'</span></span><br></pre></td></tr></tbody></table></figure><h1 id="装饰器：Decorator"><a href="#装饰器：Decorator" class="headerlink" title="装饰器：Decorator"></a>装饰器：Decorator</h1><ul><li><p>作用：他们是修改其他函数的功能的函数。他们有助于让我们的代码更简短，也更Pythonic。装饰器让你在一个函数的前后去执行代码。</p></li><li><p>“@decorator_name” is meaning of</p><blockquote><p>f = decorator_name(f)</p></blockquote></li><li><p>@wraps接受一个函数来进行装饰，并加入了复制函数名称、注释文档、参数列表 等等的功能。这可以让我们在装饰器里面访问在装饰之前的函数的属性。</p></li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decorator_name</span><span class="params">(f)</span>:</span></span><br><span class="line"><span class="meta">  @wraps(f)</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">decorated</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> can_run:</span><br><span class="line">      <span class="keyword">return</span> <span class="string">"Function will not run"</span></span><br><span class="line">  <span class="keyword">return</span> f(*args, **kwargs)</span><br><span class="line">  <span class="keyword">return</span> decorated</span><br><span class="line"></span><br><span class="line"><span class="meta">@decorator_name</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span>(<span class="string">"Function is running"</span>)</span><br><span class="line"></span><br><span class="line">can_run = <span class="literal">True</span></span><br><span class="line">print(func())</span><br><span class="line"><span class="comment"># Output: Function is running</span></span><br><span class="line"></span><br><span class="line">can_run = <span class="literal">False</span></span><br><span class="line">print(func())</span><br><span class="line"><span class="comment"># Output: Function will not run</span></span><br></pre></td></tr></tbody></table></figure><h1 id="容器-Collections"><a href="#容器-Collections" class="headerlink" title="容器 Collections"></a>容器 Collections</h1><h2 id="defaultdict"><a href="#defaultdict" class="headerlink" title="defaultdict"></a>defaultdict</h2><p>与dict类型不同，defaultdict不需要检查key是否存在</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> collections</span><br><span class="line">tree = <span class="keyword">lambda</span>: collections.defaultdict(tree) </span><br><span class="line">some_dict = tree() </span><br><span class="line">some_dict[<span class="string">'colours'</span>][<span class="string">'favourite'</span>] = <span class="string">"yellow"</span></span><br><span class="line"></span><br><span class="line">print(json.dumps(some_dict))</span><br><span class="line"><span class="comment">## 输出: {"colours": {"favourite": "yellow"}}</span></span><br></pre></td></tr></tbody></table></figure><h2 id="counter"><a href="#counter" class="headerlink" title="counter"></a>counter</h2><p>Counter是一个计数器，它可以帮助我们针对某项数据进行计数。比如它可以用来计算每个人喜欢多少种颜色:</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Counter</span><br><span class="line">colours = (</span><br><span class="line">  (<span class="string">'Yasoob'</span>, <span class="string">'Yellow'</span>), </span><br><span class="line">  (<span class="string">'Ali'</span>, <span class="string">'Blue'</span>), </span><br><span class="line">  (<span class="string">'Arham'</span>, <span class="string">'Green'</span>), </span><br><span class="line">  (<span class="string">'Ali'</span>, <span class="string">'Black'</span>), </span><br><span class="line">  (<span class="string">'Yasoob'</span>, <span class="string">'Red'</span>), </span><br><span class="line">  (<span class="string">'Ahmed'</span>, <span class="string">'Silver'</span>),</span><br><span class="line">)</span><br><span class="line">favs = Counter(name <span class="keyword">for</span> name, colour <span class="keyword">in</span> colours) </span><br><span class="line">print(favs)</span><br><span class="line"></span><br><span class="line"><span class="comment">## 输出:</span></span><br><span class="line"><span class="comment">## Counter({</span></span><br><span class="line"><span class="comment">##    'Yasoob': 2,</span></span><br><span class="line"><span class="comment">## 'Ali': 2,</span></span><br><span class="line"><span class="comment">##    'Arham': 1,</span></span><br><span class="line"><span class="comment">##    'Ahmed': 1</span></span><br><span class="line"><span class="comment">##  })</span></span><br></pre></td></tr></tbody></table></figure><h2 id="deque"><a href="#deque" class="headerlink" title="deque"></a>deque</h2><p>deque提供了一个双端队列，你可以从头/尾两端添加或删除元素。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line">d = deque()</span><br><span class="line">d.append(<span class="string">'1'</span>) </span><br><span class="line">d.append(<span class="string">'2'</span>) </span><br><span class="line">d.append(<span class="string">'3'</span>)</span><br><span class="line"></span><br><span class="line">print(d[<span class="number">0</span>])</span><br><span class="line"><span class="comment">## 输出: '1'</span></span><br><span class="line">print(d[<span class="number">-1</span>])</span><br><span class="line"><span class="comment">## 输出: '3'</span></span><br><span class="line"></span><br><span class="line">d.popleft() <span class="comment">## 输出: 1</span></span><br><span class="line">d.pop() <span class="comment">## 输出: 3</span></span><br></pre></td></tr></tbody></table></figure><p>也可以限制这个列表的大小，当超出设定的限制时，数据会从对队列另一端被挤出 去(pop)。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">d = deque(maxlen=<span class="number">30</span>)</span><br></pre></td></tr></tbody></table></figure><p>还可以从任一端扩展这个队列中的数据</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">d = deque([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]) </span><br><span class="line">d.extendleft([<span class="number">0</span>]) </span><br><span class="line">d.extend([<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>]) </span><br><span class="line">print(d)</span><br><span class="line"><span class="comment">## 输出: deque([0, 1, 2, 3, 4, 5, 6, 7, 8])</span></span><br></pre></td></tr></tbody></table></figure><h2 id="namedtuple"><a href="#namedtuple" class="headerlink" title="namedtuple"></a>namedtuple</h2><p>命名元组把元组变成一个针对简单任务的容器。你不必使用整数索引来访问一个namedtuples的数据。你可以像字典(dict)一样访问namedtuples， 但namedtuples是不可变的。</p><ul><li>命名元组(namedtuple)有两个必需的参数。它们是元组名称和字段名称。</li></ul><p>下面例子中，我们的元组名称是Animal，字段名称是’name’，’age’和’type’。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> namedtuple</span><br><span class="line">Animal = namedtuple(<span class="string">'Animal'</span>, <span class="string">'name age type'</span>)</span><br><span class="line">perry = Animal(name=<span class="string">"perry"</span>, age=<span class="number">31</span>, type=<span class="string">"cat"</span>) </span><br><span class="line">print(perry)</span><br><span class="line"><span class="comment">## 输出: Animal(name='perry', age=31, type='cat')</span></span><br><span class="line"></span><br><span class="line">print(perry.name)</span><br><span class="line"><span class="comment">## 输出: 'perry'</span></span><br></pre></td></tr></tbody></table></figure><ul><li>namedtuple的每个实例没有对象字典，所以它们很轻量，与普通的元组比，并不 需要更多的内存。这使得它们比字典更快。</li><li>命名元组向后兼容于普通的元组，这意味着可以既使用整数索引，也可以使用名称来访问namedtuple:</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> namedtuple</span><br><span class="line">Animal = namedtuple(<span class="string">'Animal'</span>, <span class="string">'name age type'</span>) </span><br><span class="line">perry = Animal(name=<span class="string">"perry"</span>, age=<span class="number">31</span>, type=<span class="string">"cat"</span>) </span><br><span class="line">print(perry[<span class="number">0</span>])</span><br><span class="line"><span class="comment">## 输出: perry</span></span><br></pre></td></tr></tbody></table></figure><ul><li>可以将一个命名元组转换为字典</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> namedtuple</span><br><span class="line">Animal = namedtuple(<span class="string">'Animal'</span>, <span class="string">'name age type'</span>) </span><br><span class="line">perry = Animal(name=<span class="string">"Perry"</span>, age=<span class="number">31</span>, type=<span class="string">"cat"</span>) </span><br><span class="line">print(perry._asdict())</span><br><span class="line"><span class="comment">## 输出: OrderedDict([('name', 'Perry'), ('age', 31), ...</span></span><br></pre></td></tr></tbody></table></figure><h2 id="enum-Enum"><a href="#enum-Enum" class="headerlink" title="enum.Enum"></a>enum.Enum</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> namedtuple</span><br><span class="line"><span class="keyword">from</span> enum <span class="keyword">import</span> Enum</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Species</span><span class="params">(Enum)</span>:</span> </span><br><span class="line">  cat = <span class="number">1</span></span><br><span class="line">dog = <span class="number">2</span> </span><br><span class="line"></span><br><span class="line">Animal = namedtuple(<span class="string">'Animal'</span>, <span class="string">'name age type'</span>)</span><br><span class="line">tom = Animal(name=<span class="string">"Tom"</span>, age=<span class="number">75</span>, type=Species.cat)</span><br></pre></td></tr></tbody></table></figure><h1 id="枚举-enumerate"><a href="#枚举-enumerate" class="headerlink" title="枚举 enumerate"></a>枚举 enumerate</h1><p>enumerate()是在python2.3中引入的。它具有一定的惰性，只在需要的时候才会产生一个(index,value)。</p><blockquote><p>enumerate(sequence, start = 0)</p></blockquote><p>接受一个可迭代的对象作为输入，如list或者set，函数返回一个迭代器。可以使用next()方法获取下一个元素。枚举(enumerate)是Python内置函数，它允许我们遍历数据并自动计数。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">my_list = [<span class="string">'apple'</span>, <span class="string">'banana'</span>, <span class="string">'grapes'</span>, <span class="string">'pear'</span>] </span><br><span class="line"><span class="keyword">for</span> index,value <span class="keyword">in</span> zip(len(my_list),mylist)</span><br><span class="line">print(index,value)</span><br></pre></td></tr></tbody></table></figure><p>等价于</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">my_list = [<span class="string">'apple'</span>, <span class="string">'banana'</span>, <span class="string">'grapes'</span>, <span class="string">'pear'</span>] </span><br><span class="line"><span class="keyword">for</span> index, value <span class="keyword">in</span> enumerate(my_list, <span class="number">1</span>):</span><br><span class="line">    print(index, value)</span><br><span class="line"><span class="comment"># 输出:</span></span><br><span class="line">(<span class="number">1</span>, <span class="string">'apple'</span>) </span><br><span class="line">(<span class="number">2</span>, <span class="string">'banana'</span>) </span><br><span class="line">(<span class="number">3</span>, <span class="string">'grapes'</span>) </span><br><span class="line">(<span class="number">4</span>, <span class="string">'pear'</span>)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">my_list = [<span class="string">'apple'</span>, <span class="string">'banana'</span>, <span class="string">'grapes'</span>, <span class="string">'pear'</span>] </span><br><span class="line">e = enumerate(my_list)</span><br><span class="line">e.next()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出:</span></span><br><span class="line">(<span class="number">0</span>, <span class="string">'apple'</span>)</span><br></pre></td></tr></tbody></table></figure><p>enumerate()的函数实现非常简单，实际相当于以下代码</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">enumerate</span><span class="params">(sequence, start=<span class="number">0</span>)</span>:</span></span><br><span class="line">   n = start</span><br><span class="line">   <span class="keyword">for</span> elem <span class="keyword">in</span> sequence:</span><br><span class="line">    <span class="keyword">yield</span> n,elem</span><br><span class="line">    n += <span class="number">1</span></span><br></pre></td></tr></tbody></table></figure><h1 id="对象自省"><a href="#对象自省" class="headerlink" title="对象自省"></a>对象自省</h1><p>自省(introspection)，是指在运行时来判断一个对象的类型的能力。 它是Python的强项之一。</p><h2 id="dir"><a href="#dir" class="headerlink" title="dir"></a>dir</h2><p>dir返回一个列表，列出了一个对象所拥有的属性和方法。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">my_list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">dir(my_list)</span><br><span class="line"><span class="comment"># Output: ['__add__', '__class__', '__contains__', '__delattr__', '__delit # '__delslice__', '__doc__', '__eq__', '__format__', '__ge__', '__getattri # '__getitem__', '__getslice__', '__gt__', '__hash__', '__iadd__', '__imul # '__init__', '__iter__', '__le__', '__len__', '__lt__', '__mul__', '__ne_ # '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__reversed__', '_ # '__setattr__', '__setitem__', '__setslice__', '__sizeof__', '__str__', # '__subclasshook__', 'append', 'count', 'extend', 'index', 'insert', 'pop # 'remove', 'reverse', 'sort']</span></span><br></pre></td></tr></tbody></table></figure><h2 id="type和id"><a href="#type和id" class="headerlink" title="type和id"></a>type和id</h2><ul><li>type函数返回一个对象的类型。</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">print(type(<span class="string">''</span>))</span><br><span class="line"><span class="comment"># Output: &lt;type 'str'&gt;</span></span><br><span class="line">print(type([]))</span><br><span class="line"><span class="comment"># Output: &lt;type 'list'&gt;</span></span><br></pre></td></tr></tbody></table></figure><ul><li>id()函数返回任意不同种类对象的唯一ID。</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">"Yasoob"</span> </span><br><span class="line">print(id(name))</span><br><span class="line"><span class="comment"># Output: 139972439030304</span></span><br></pre></td></tr></tbody></table></figure><h2 id="inspect模块"><a href="#inspect模块" class="headerlink" title="inspect模块"></a>inspect模块</h2><p>inspect模块也提供了许多有用的函数，来获取活跃对象的信息。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> inspect</span><br><span class="line">print(inspect.getmembers(str))</span><br><span class="line"><span class="comment"># Output: [('__add__', &lt;slot wrapper '__add__' of ... ...</span></span><br></pre></td></tr></tbody></table></figure><h1 id="lambda表达式"><a href="#lambda表达式" class="headerlink" title="lambda表达式"></a><strong>lambda</strong>表达式</h1><p>它们在其他语言中也被称为匿名函数。如果你不想在程序中对一个函数使用两次，你也许会想用lambda表达式。</p><blockquote><p>lambda 参数:操作(参数)</p></blockquote><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">add = <span class="keyword">lambda</span> x, y: x + y </span><br><span class="line">print(add(<span class="number">3</span>, <span class="number">5</span>))</span><br><span class="line"><span class="comment"># Output: 8</span></span><br></pre></td></tr></tbody></table></figure><h1 id="Map、Filter、Reduce"><a href="#Map、Filter、Reduce" class="headerlink" title="Map、Filter、Reduce"></a>Map、Filter、Reduce</h1><h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h2><p>Map()会将一个函数映射到一个输入列表的所有元素上。</p><blockquote><p>map(function_to_apply, list_of_inputs)​</p></blockquote><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">items = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">squared = list(map(<span class="keyword">lambda</span> x: x**<span class="number">2</span>, items))</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">multiply</span><span class="params">(x)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> (x*x)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> (x+x)</span><br><span class="line">funcs = [multiply, add] </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">value = map(<span class="keyword">lambda</span> x: x(i), funcs)</span><br><span class="line">print(list(value))</span><br><span class="line"></span><br><span class="line"><span class="comment"># Output:</span></span><br><span class="line"><span class="comment"># [0, 0]</span></span><br><span class="line"><span class="comment"># [1, 2]</span></span><br><span class="line"><span class="comment"># [4, 4]</span></span><br></pre></td></tr></tbody></table></figure><h2 id="Filter"><a href="#Filter" class="headerlink" title="Filter"></a>Filter</h2><p>filter()过滤列表中的元素，并且返回一个由所有符合要求的元素所构成的列表，符合要求即函数映射到该元素时返回值为True。filter()是一个内置函数，类似于for循环，但是执行会更快。</p><blockquote><p>filter(function_to_apply, list_of_inputs)</p></blockquote><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">number_list = range(<span class="number">-5</span>, <span class="number">5</span>)</span><br><span class="line">less_than_zero = filter(<span class="keyword">lambda</span> x: x &lt; <span class="number">0</span>, number_list)</span><br><span class="line">print(list(less_than_zero))</span><br><span class="line"></span><br><span class="line"><span class="comment"># Output: [-5, -4, -3, -2, -1]</span></span><br></pre></td></tr></tbody></table></figure><h2 id="Reduce"><a href="#Reduce" class="headerlink" title="Reduce"></a>Reduce</h2><p>Reduce()用于对一个列表进行一些计算并返回结果。</p><blockquote><p>reduce(function_to_apply, list_of_inputs)</p></blockquote><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line">product = reduce((<span class="keyword">lambda</span> x, y: x * y), [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>] )</span><br><span class="line"></span><br><span class="line"><span class="comment"># 24</span></span><br></pre></td></tr></tbody></table></figure><h1 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符"></a>三元运算符</h1><p>如果条件为真，返回真 否则返回假</p><blockquote><p>condition_is_true if condition else condition_is_false</p></blockquote><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">is_fat = <span class="literal">True</span></span><br><span class="line">state = <span class="string">"fat"</span> <span class="keyword">if</span> is_fat <span class="keyword">else</span> <span class="string">"not fat"</span></span><br></pre></td></tr></tbody></table></figure><p>另一个晦涩一点的用法比较少见，它使用了元组:</p><blockquote><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(if_test_is_false, if_test_is_true)[test]</span><br></pre></td></tr></tbody></table></figure></blockquote><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fat = <span class="literal">True</span></span><br><span class="line">fitness = (<span class="string">"skinny"</span>, <span class="string">"fat"</span>)[fat] print(<span class="string">"Ali is "</span>, fitness)</span><br><span class="line"><span class="comment">#输出: Ali is fat</span></span><br></pre></td></tr></tbody></table></figure><h1 id="对象的可变-mutable-与不可变-immutable"><a href="#对象的可变-mutable-与不可变-immutable" class="headerlink" title="对象的可变( mutable)与不可变(immutable)"></a>对象的可变( mutable)与不可变(immutable)</h1><p>每当你将一个变量赋值为另一个可变类型的变量时，对这个数据的任意改动会同时反映到这两个变量上去。新变量只不过是 老变量的一个别名而已。这个情况只是针对可变数据类型。<br></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">foo = [<span class="string">'hi'</span>] print(foo)</span><br><span class="line"><span class="comment"># Output: ['hi']</span></span><br><span class="line"></span><br><span class="line">bar = foo</span><br><span class="line">bar += [<span class="string">'bye'</span>] print(foo)</span><br><span class="line"><span class="comment"># Output: ['hi', 'bye']</span></span><br></pre></td></tr></tbody></table></figure><br>在Python中当函数被定义时，默认参数只会运算一次，而不是每次被调用时都会重新运算。<br><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_to</span><span class="params">(num, target=[])</span>:</span> target.append(num) <span class="keyword">return</span> target</span><br><span class="line">add_to(<span class="number">1</span>)</span><br><span class="line"><span class="comment"># Output: [1]</span></span><br><span class="line"></span><br><span class="line">add_to(<span class="number">2</span>)</span><br><span class="line"><span class="comment"># Output: [1, 2]</span></span><br></pre></td></tr></tbody></table></figure><p></p><p>现在每当你在调用这个函数不传入target参数的时候，一个新的列表会被创建。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_to</span><span class="params">(element, target=None)</span>:</span> </span><br><span class="line">  <span class="keyword">if</span> target <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">    target = [] </span><br><span class="line">  target.append(element) </span><br><span class="line">  <span class="keyword">return</span> target</span><br><span class="line"></span><br><span class="line">add_to(<span class="number">42</span>)</span><br><span class="line"><span class="comment"># Output: [42]</span></span><br><span class="line"></span><br><span class="line">add_to(<span class="number">42</span>)</span><br><span class="line"><span class="comment"># Output: [42]</span></span><br></pre></td></tr></tbody></table></figure><h1 id="slot"><a href="#slot" class="headerlink" title="__slot__"></a>__slot__</h1><p>在Python中，每个类都有实例属性。默认情况下Python用一个字典来保存一个对象的实例属性 。然而，对于有着已知属性的小类来说，它可能是个瓶颈。这个字典浪费了很多内存。 Python不能在对象创建时直接分配一个固定量的内存来保存所有的属性。</p><p>不过还是有一个方法来规避这个问题。这个方法需要使用__slots__来告诉Python不要使用字典，而且只给一个<strong>固定集合的属性分配空间</strong>。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span><span class="params">(object)</span>:</span></span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, identifier)</span>:</span></span><br><span class="line">self.name = name </span><br><span class="line">   self.identifier = identifier </span><br><span class="line">   self.set_up()</span><br></pre></td></tr></tbody></table></figure><p>第二段代码会为你的内存减轻负担。通过这个技巧，可以看到内存占用率几乎 40%~50%的减少。<br></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span><span class="params">(object)</span>:</span></span><br><span class="line">__slots__ = [<span class="string">'name'</span>, <span class="string">'identifier'</span>] </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, identifier)</span>:</span></span><br><span class="line">self.name = name </span><br><span class="line">        self.identifier = identifier </span><br><span class="line">        self.set_up()</span><br></pre></td></tr></tbody></table></figure><p></p><h1 id="Comprehension推导式"><a href="#Comprehension推导式" class="headerlink" title="Comprehension推导式"></a>Comprehension推导式</h1><p>推导式(又称解析式)是Python的一种独有特性。推导式是可以从一个数据序列构建另一个新的数据序列的结构体。 共有三种推导：</p><ul><li>列表(list)推导式</li><li>字典(dict)推导式</li><li>集合(set)推导式</li></ul><h2 id="列表-list-推导式"><a href="#列表-list-推导式" class="headerlink" title="列表(list)推导式"></a>列表(list)推导式</h2><p>列表推导式(又称列表解析式)提供了一种简明扼要的方法来创建列表。它的结构是在一个中括号里包含一个表达式，然后是一个for语句，然后是0个或多个for 或者if语句。</p><blockquote><p>variable = [out_exp for out_exp in input_list if out_exp == 2]</p></blockquote><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">multiples = [i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">30</span>) <span class="keyword">if</span> i % <span class="number">3</span> <span class="keyword">is</span> <span class="number">0</span>] </span><br><span class="line">print(multiples)</span><br><span class="line"><span class="comment"># Output: [0, 3, 6, 9, 12, 15, 18, 21, 24, 27]</span></span><br></pre></td></tr></tbody></table></figure><h2 id="字典-dict-推导式"><a href="#字典-dict-推导式" class="headerlink" title="字典(dict)推导式"></a>字典(dict)推导式</h2><p>字典推导和列表推导的使用方法是类似的。如快速对换一个字典的键和值。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">{v: k <span class="keyword">for</span> k, v <span class="keyword">in</span> some_dict.items()}</span><br></pre></td></tr></tbody></table></figure><h2 id="集合-set-推导式"><a href="#集合-set-推导式" class="headerlink" title="集合(set)推导式"></a>集合(set)推导式</h2><p>它跟列表推导式也是类似的。 唯一的区别在于它使用大括号{}。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">squared = {x**<span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> [<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>]}</span><br><span class="line">print(squared)</span><br><span class="line"><span class="comment"># Output: {1, 4}</span></span><br></pre></td></tr></tbody></table></figure><h1 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h1><h2 id="处理异常"><a href="#处理异常" class="headerlink" title="处理异常"></a>处理异常</h2><ul><li>处理一个异常</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">  file = open(<span class="string">'test.txt'</span>, <span class="string">'rb'</span>)</span><br><span class="line"><span class="keyword">except</span> EOFError <span class="keyword">as</span> e:</span><br><span class="line">  print(<span class="string">"An EOF error occurred."</span>) <span class="keyword">raise</span> e</span><br></pre></td></tr></tbody></table></figure><ul><li>处理多个异常：在你不知道你要捕捉什么异常时，非常有用</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">  file = open(<span class="string">'test.txt'</span>, <span class="string">'rb'</span>)</span><br><span class="line"><span class="keyword">except</span> Exception:</span><br><span class="line"><span class="comment"># 打印一些异常日志，如果你想要的话 </span></span><br><span class="line"><span class="keyword">raise</span></span><br></pre></td></tr></tbody></table></figure><h2 id="Finally"><a href="#Finally" class="headerlink" title="Finally"></a>Finally</h2><p>包裹到finally从 句中的代码不管异常是否触发都将会被执行。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">file = open(<span class="string">'test.txt'</span>, <span class="string">'rb'</span>)</span><br><span class="line"><span class="keyword">except</span> IOError <span class="keyword">as</span> e:</span><br><span class="line">print(<span class="string">'An IOError occurred. {}'</span>.format(e.args[<span class="number">-1</span>]))</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    print(<span class="string">"This would be printed whether or not an exception occurred!"</span></span><br><span class="line"><span class="comment"># Output: An IOError occurred. No such file or directory</span></span><br><span class="line"><span class="comment"># This would be printed whether or not an exception occurred!</span></span><br></pre></td></tr></tbody></table></figure><h2 id="try-else"><a href="#try-else" class="headerlink" title="try/else"></a>try/else</h2><p>else从句只会在没有异常的情况下执行，而且它会在finally语句之前执行。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    print(<span class="string">'I am sure no exception is going to occur!'</span>)</span><br><span class="line"><span class="keyword">except</span> Exception:</span><br><span class="line">    print(<span class="string">'exception'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="comment"># 这里的代码只会在try语句里没有触发异常时运行,</span></span><br><span class="line"><span class="comment"># 但是这里的异常将 *不会* 被捕获</span></span><br><span class="line">print(<span class="string">'This would only run if no exception occurs. And an error here '</span></span><br><span class="line"><span class="string">'would NOT be caught.'</span>)</span><br><span class="line">print(<span class="string">'This would be printed in every case.'</span>)</span><br><span class="line"><span class="comment"># Output: I am sure no exception is going to occur! # This would only run if no exception occurs.</span></span><br><span class="line"><span class="comment"># This would be printed in every case.</span></span><br></pre></td></tr></tbody></table></figure><h1 id="一行式"><a href="#一行式" class="headerlink" title="一行式"></a>一行式</h1><h2 id="简易Web-Server"><a href="#简易Web-Server" class="headerlink" title="简易Web Server"></a>简易Web Server</h2><p>通过网络快速共享文件，进入到共享文件的目录下并在命令行中运行下面的代码:</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m http.server</span><br></pre></td></tr></tbody></table></figure><h2 id="漂亮的打印"><a href="#漂亮的打印" class="headerlink" title="漂亮的打印"></a>漂亮的打印</h2><p>Python REPL可漂亮的打印出<strong>列表和字典</strong>。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pprint <span class="keyword">import</span> pprint</span><br><span class="line">my_dict = {<span class="string">'name'</span>: <span class="string">'Yasoob'</span>, <span class="string">'age'</span>: <span class="string">'undefined'</span>}</span><br><span class="line">pprint(my_dict)</span><br></pre></td></tr></tbody></table></figure><h2 id="脚本性能分析"><a href="#脚本性能分析" class="headerlink" title="脚本性能分析"></a>脚本性能分析</h2><p>cProfile是一个比profile更快的实现，因为它是用c写的。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m cProfile my_script.py</span><br></pre></td></tr></tbody></table></figure><h2 id="CSV转换为json"><a href="#CSV转换为json" class="headerlink" title="CSV转换为json"></a><strong>CSV</strong>转换为json</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -c <span class="string">"import csv,json;print json.dumps(list(csv.reader(open('csv.csv'))))</span></span><br></pre></td></tr></tbody></table></figure><h2 id="列表辗平"><a href="#列表辗平" class="headerlink" title="列表辗平"></a>列表辗平</h2><p>通过使用itertools包中的itertools.chain.from_iterable轻松快速的辗平一个列表。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a_list = [[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>], [<span class="number">5</span>, <span class="number">6</span>]]</span><br><span class="line">print(list(itertools.chain.from_iterable(a_list)))</span><br><span class="line"><span class="comment"># Output: [1, 2, 3, 4, 5, 6]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># or</span></span><br><span class="line">print(list(itertools.chain(*a_list)))</span><br><span class="line"><span class="comment"># Output: [1, 2, 3, 4, 5, 6]</span></span><br></pre></td></tr></tbody></table></figure><h2 id="一行式的构造器"><a href="#一行式的构造器" class="headerlink" title="一行式的构造器"></a>一行式的构造器</h2><p>避免类初始化时大量重复的赋值语句</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span><span class="params">(object)</span>:</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, a, b, c, d, e, f)</span>:</span></span><br><span class="line">    self.__dict__.update({k: v <span class="keyword">for</span> k, v <span class="keyword">in</span> locals().items()})</span><br></pre></td></tr></tbody></table></figure><h1 id="For-Else"><a href="#For-Else" class="headerlink" title="For-Else"></a>For-Else</h1><p>for循环还有一个else从句，我们大多数人并不熟悉。这个else从句会在循环正常结束时执行。这意味着，循环没有遇到任何break。</p><p>有个常见的构造是跑一个循环，并查找一个元素。如果这个元素被找到了，我们使 用break来中断这个循环。有两个场景会让循环停下来。</p><ul><li>第一个是当一个元素被找到，break被触发。 </li><li>第二个场景是循环结束。</li></ul><p>现在我们也许想知道其中哪一个，才是导致循环完成的原因。一个方法是先设置一个标记，然后在循环结束时打上标记。另一个是使用else从句。</p><p><strong>简而言之：当循环自然终结（未调用break），else从句会被执行一次。</strong></p><p>以下例子会找出2到10之间的数字的因子。附加的else语句块，用来抓住质数： </p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> range(<span class="number">2</span>, <span class="number">10</span>):</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">2</span>, n):</span><br><span class="line">      <span class="keyword">if</span> n % x == <span class="number">0</span>:</span><br><span class="line">        print( n, <span class="string">'equals'</span>, x, <span class="string">'*'</span>, n/x) <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># loop fell through without finding a factor</span></span><br><span class="line">        print(n, <span class="string">'is a prime number'</span>)</span><br><span class="line">        </span><br><span class="line"><span class="comment"># output        </span></span><br><span class="line"><span class="number">2</span> <span class="keyword">is</span> a prime number</span><br><span class="line"><span class="number">3</span> <span class="keyword">is</span> a prime number</span><br><span class="line"><span class="number">4</span> equals <span class="number">2</span> * <span class="number">2.0</span></span><br><span class="line"><span class="number">5</span> <span class="keyword">is</span> a prime number</span><br><span class="line"><span class="number">6</span> equals <span class="number">2</span> * <span class="number">3.0</span></span><br><span class="line"><span class="number">7</span> <span class="keyword">is</span> a prime number</span><br><span class="line"><span class="number">8</span> equals <span class="number">2</span> * <span class="number">4.0</span></span><br><span class="line"><span class="number">9</span> equals <span class="number">3</span> * <span class="number">3.0</span></span><br></pre></td></tr></tbody></table></figure><h1 id="使用C扩展"><a href="#使用C扩展" class="headerlink" title="使用C扩展"></a>使用<strong>C</strong>扩展</h1><p>CPython使得Python可以轻松调用C代码。</p><h2 id="ctypes"><a href="#ctypes" class="headerlink" title="ctypes"></a>ctypes</h2><p>ctypes模块提供了和C语言 兼容的数据类型和函数来加载dll文件，因此在调用时不需对源文件做任何的修改。</p><ol><li>实现两数求和的C代码，保存为add.c</li></ol><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add_int</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">int</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">float</span> <span class="title">add_float</span><span class="params">(<span class="keyword">float</span>, <span class="keyword">float</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add_int</span><span class="params">(<span class="keyword">int</span> num1, <span class="keyword">int</span> num2)</span></span>{</span><br><span class="line">    <span class="keyword">return</span> num1 + num2;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">float</span> <span class="title">add_float</span><span class="params">(<span class="keyword">float</span> num1, <span class="keyword">float</span> num2)</span></span>{</span><br><span class="line">    <span class="keyword">return</span> num1 + num2;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ol><li>接下来将C文件编译为.so文件(windows下为DLL)</li></ol><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">For Linux</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> gcc -shared -Wl,-soname,adder -o adder.so -fPIC add.c</span></span><br><span class="line"><span class="meta">#</span><span class="bash">For Mac</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> gcc -shared -Wl,-install_name,adder.so -o adder.so -fPIC add.c</span></span><br></pre></td></tr></tbody></table></figure><ol><li>现在在Python代码中来调用它</li></ol><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#load the shared object file</span></span><br><span class="line">adder = CDLL(<span class="string">'./adder.so'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#Find sum of integers</span></span><br><span class="line">res_int = adder.add_int(<span class="number">4</span>,<span class="number">5</span>)</span><br><span class="line"><span class="keyword">print</span> <span class="string">"Sum of 4 and 5 = "</span> + str(res_int)</span><br><span class="line"></span><br><span class="line"><span class="comment">#Find sum of floats</span></span><br><span class="line">a = c_float(<span class="number">5.5</span>)</span><br><span class="line">b = c_float(<span class="number">4.1</span>)</span><br><span class="line">add_float = adder.add_float</span><br><span class="line">add_float.restype = c_float</span><br><span class="line"><span class="keyword">print</span> <span class="string">"Sum of 5.5 and 4.1 = "</span>, str(add_float(a, b))</span><br><span class="line"></span><br><span class="line">Sum of <span class="number">4</span> <span class="keyword">and</span> <span class="number">5</span> = <span class="number">9</span></span><br><span class="line">Sum of <span class="number">5.5</span> <span class="keyword">and</span> <span class="number">4.1</span> = <span class="number">9.60000038147</span></span><br></pre></td></tr></tbody></table></figure><p>这种方法虽然简单，清晰，但是却很受限。例如，并不能在C中对对象进行操作。</p><h2 id="SWIG"><a href="#SWIG" class="headerlink" title="SWIG"></a>SWIG</h2><p>SWIG是Simplified Wrapper and Interface Generator的缩写。是Python中调用C代码的另一种 方法。在这个方法中，开发人员必须编写一个额外的接又文件来作为SWIG(终端工具)的入口。Python开发者一般不会采用这种方法，因为大多数情况它会带来不必要的复杂。而当你有一个C/C++代码库需要被多种语言调用时，这将是个非常不错的选择。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">​```C</span><br><span class="line"><span class="comment">#include</span></span><br><span class="line">double My_variable = <span class="number">3.0</span>;</span><br><span class="line">int fact(int n) {</span><br><span class="line">  ......</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>编译它</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">unix % swig -python example.i</span><br><span class="line">unix % gcc -c example.c example_wrap.c \</span><br><span class="line"> -I/usr/local/include/python2.1</span><br><span class="line">unix % ld -shared example.o example_wrap.o -o _example.so</span><br></pre></td></tr></tbody></table></figure><p>Python的调用</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> example</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>example.fact(<span class="number">5</span>) </span><br><span class="line"><span class="number">120</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>example.my_mod(<span class="number">7</span>,<span class="number">3</span>) </span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>example.get_time()</span><br><span class="line"><span class="string">'Sun Feb 11 23:01:07 1996'</span></span><br></pre></td></tr></tbody></table></figure><h2 id="Python-C-API"><a href="#Python-C-API" class="headerlink" title="Python/C API"></a>Python/C API</h2><p>Python/C API可能是被最广泛使用的方法。它不仅简单，而且可以在C代码中操作你的Python对象。这种方法需要以特定的方式来编写C代码以供Python去调用它。所有的Python对象都被表 示为一种叫做PyObject的结构体，并且Python.h头文件中提供了各种操作它的函数。</p><ol><li>编写一个C扩展，添加所有元素到一个Python列表(所有元素都是数字)</li></ol><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Python.h has all the required function definitions to manipulate the Pyt</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Python.h&gt;</span></span></span><br><span class="line"><span class="comment">//This is the function that is called from your python code</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> PyObject* <span class="title">addList_add</span><span class="params">(PyObject* self, PyObject* args)</span></span>{</span><br><span class="line">    PyObject * listObj;</span><br><span class="line">    <span class="keyword">if</span> (! PyArg_ParseTuple( args, <span class="string">"O"</span>, &amp;listObj ))</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">long</span> length = PyList_Size(listObj); <span class="comment">//iterate over all the elements</span></span><br><span class="line"><span class="keyword">int</span> i, sum =<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; length; i++) {</span><br><span class="line">sum += elem;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">char</span> addList_docs[] =</span><br><span class="line"><span class="string">"add( ): add all elements of the list\n"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> PyMethodDef addList_funcs[] = {</span><br><span class="line">{<span class="string">"add"</span>, (PyCFunction)addList_add, METH_VARARGS, addList_docs}, {<span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="number">0</span>, <span class="literal">NULL</span>}</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="function">PyMODINIT_FUNC <span class="title">initaddList</span><span class="params">(<span class="keyword">void</span>)</span></span>{</span><br><span class="line">    Py_InitModule3(<span class="string">"addList"</span>, addList_funcs,</span><br><span class="line">            <span class="string">"Add all ze lists"</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>Python.h头文件中包含了所有需要的类型(Python对象类型的表示)和函数定义(对 Python对象的操作)<br> 接下来我们编写将要在Python调用的函数, 函数传统的命名方式由{模块名}_{函数 名}组成，所以我们将其命名为addList_add 然后填写想在模块内实现函数的相关信息表，每行一个函数，以空行作为结束 最后的模块初始化块签名为PyMODINIT_FUNC init{模块名}。</p><ol><li>现在我们已经编写完C模块了。将下列代码保存为setup.py</li></ol><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">​</span><br></pre></td></tr></tbody></table></figure><h1 id="build-the-modules"><a href="#build-the-modules" class="headerlink" title="build the modules"></a>build the modules</h1><p>​```</p><p>from distutils.core import setup, Extension</p><p>setup(name=’addList’, version=’1.0’, \ ext_modules=[Extension(‘addList’, [‘adder.c’])])<br></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">运行，现在应该已经将我们的C文件编译安装到我们的Python模块中了。</span><br><span class="line"></span><br><span class="line">```python</span><br><span class="line">python setup.py install</span><br></pre></td></tr></tbody></table></figure><p></p><ol><li>验证</li></ol><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#module that talks to the C code</span></span><br><span class="line"><span class="keyword">import</span> addList l = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="keyword">print</span> <span class="string">"Sum of List - "</span> + str(l) + <span class="string">" = "</span> + str(addList.add(l))</span><br><span class="line"></span><br><span class="line"><span class="comment"># output</span></span><br><span class="line">Sum of List - [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>] = <span class="number">15</span></span><br></pre></td></tr></tbody></table></figure><h2 id="CPython"><a href="#CPython" class="headerlink" title="CPython"></a>CPython</h2><h1 id="Open"><a href="#Open" class="headerlink" title="Open()"></a>Open()</h1><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'photo.jpg'</span>, <span class="string">'r+'</span>) <span class="keyword">as</span> f: </span><br><span class="line">  jpgdata = f.read()</span><br></pre></td></tr></tbody></table></figure><p>open的第一个参数是文件名。第二个(mode 打开模式)决定了这个文件如何被打开。</p><ul><li>如果你想读取文件，传入r </li><li>如果你想读取并写入文件，传入r+ </li><li>如果你想覆盖写入文件，传入w </li><li>如果你想在文件末尾附加内容，传入a</li></ul><p>如果不传入任意编码，一个系统 - 以及Python -指定的默认选项将被选中。你也许会·去依赖这个默认选项，但这个默认选项经常是错误的，或者默认编码实际上不能表达文件里的所有字符(这将经常发生在Python 2.x和/或Windows)。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> io</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'photo.jpg'</span>, <span class="string">'rb'</span>) <span class="keyword">as</span> inf:</span><br><span class="line">jpgdata = inf.read()</span><br><span class="line"><span class="keyword">if</span> jpgdata.startswith(<span class="string">b'\xff\xd8'</span>):</span><br><span class="line">text = <span class="string">u'This is a JPEG file (%d bytes long)\n'</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">text = <span class="string">u'This is a random file (%d bytes long)\n'</span></span><br><span class="line"><span class="keyword">with</span> io.open(<span class="string">'summary.txt'</span>, <span class="string">'w'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> outf: </span><br><span class="line">  outf.write(text % len(jpgdata))</span><br></pre></td></tr></tbody></table></figure><h1 id="Python-2-3"><a href="#Python-2-3" class="headerlink" title="Python 2+3"></a>Python 2+3</h1><h2 id="Future模块导入"><a href="#Future模块导入" class="headerlink" title="Future模块导入"></a>Future模块导入</h2><p>Future模块可以帮你在Python2中导入 Python3的功能。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> print_function </span><br><span class="line">print(<span class="keyword">print</span>)</span><br><span class="line"><span class="comment"># Output: &lt;built-in function print&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="模块重命名"><a href="#模块重命名" class="headerlink" title="模块重命名"></a>模块重命名</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line"><span class="keyword">import</span> urllib.request <span class="keyword">as</span> urllib_request <span class="comment"># for Python 3</span></span><br><span class="line"><span class="keyword">except</span> ImportError:</span><br><span class="line">  <span class="keyword">import</span> urllib2 <span class="keyword">as</span> urllib_request <span class="comment"># for Python 2</span></span><br></pre></td></tr></tbody></table></figure><h1 id="协程"><a href="#协程" class="headerlink" title="协程"></a>协程</h1><p>Python中的协程和生成器很相似但又稍有不同。主要区别在于: </p><ul><li><p>生成器是数据的生产者</p></li><li><p>协程则是数据的消费者</p></li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">grep</span><span class="params">(pattern)</span>:</span></span><br><span class="line">  print(<span class="string">"Searching for"</span>, pattern)</span><br><span class="line">  <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">line = (<span class="keyword">yield</span>)</span><br><span class="line"><span class="keyword">if</span> pattern <span class="keyword">in</span> line:</span><br><span class="line">print(line)</span><br></pre></td></tr></tbody></table></figure><p>我们可以通过send()方法向它传值。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">search = grep(<span class="string">'coroutine'</span>)</span><br><span class="line">next(search)</span><br><span class="line"><span class="comment">#output: Searching for coroutine </span></span><br><span class="line">search.send(<span class="string">"I love you"</span>) </span><br><span class="line">search.send(<span class="string">"Don't you love me?"</span>) </span><br><span class="line">search.send(<span class="string">"I love coroutine instead!"</span>) </span><br><span class="line"><span class="comment">#output: I love coroutine instead!</span></span><br></pre></td></tr></tbody></table></figure><p>发送的值会被yield接收。</p><p>next()方法启动一个协程。就像协程中包含的生成器并不是立刻执行，而是通过next()方法来响应send()方法。因此，你必须通过next()方法来执行yield表达式。</p><p>可以通过调用close()方法来关闭一个协程。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">search = grep(<span class="string">'coroutine'</span>)</span><br><span class="line">search.close()</span><br></pre></td></tr></tbody></table></figure><h1 id="函数缓存"><a href="#函数缓存" class="headerlink" title="函数缓存"></a>函数缓存</h1><p>在Python 3.2以后版本，lru_cache的装饰器，允许我们将一个函数的返回值快速地缓存或取消缓存。</p><p>实现一个斐波那契计算器，并使用lru_cache。</p><ul><li>maxsize参数是告诉lru_cache，最多缓存最近多少个返回值。</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> lru_cache</span><br><span class="line"><span class="meta">@lru_cache(maxsize=32)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> n &lt; <span class="number">2</span>:</span><br><span class="line"><span class="keyword">return</span> n</span><br><span class="line"><span class="keyword">return</span> fib(n<span class="number">-1</span>) + fib(n<span class="number">-2</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print([fib(n) <span class="keyword">for</span> n <span class="keyword">in</span> range(<span class="number">10</span>)])</span><br><span class="line"><span class="comment"># Output: [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]</span></span><br></pre></td></tr></tbody></table></figure><ul><li>也可以轻松地对返回值清空缓存</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fib.cache_clear()</span><br></pre></td></tr></tbody></table></figure><h1 id="上下文管理器"><a href="#上下文管理器" class="headerlink" title="上下文管理器"></a>上下文管理器</h1><p>上下文管理器允许你在有需要的时候，精确地分配和释放资源。with确保我们的文件会被关闭，而不用关注嵌套代码如何退出。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'some_file'</span>, <span class="string">'w'</span>) <span class="keyword">as</span> opened_file: </span><br><span class="line">  opened_file.write(<span class="string">'Hola!'</span>)</span><br></pre></td></tr></tbody></table></figure><p>等价于：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">file = open(<span class="string">'some_file'</span>, <span class="string">'w'</span>) </span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">  file.write(<span class="string">'Hola!'</span>) </span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">file.close()</span><br></pre></td></tr></tbody></table></figure><h2 id="自行实现上下文管理器-—-基于类的实现"><a href="#自行实现上下文管理器-—-基于类的实现" class="headerlink" title="自行实现上下文管理器 — 基于类的实现"></a>自行实现上下文管理器 — 基于类的实现</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">File</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, file_name, method)</span>:</span></span><br><span class="line">      self.file_obj = open(file_name, method)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__enter__</span><span class="params">(self)</span>:</span> </span><br><span class="line">  <span class="keyword">return</span> self.file_obj</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__exit__</span><span class="params">(self, type, value, traceback)</span>:</span> </span><br><span class="line">  print(<span class="string">"Exception has been handled"</span>) </span><br><span class="line">  self.file_obj.close()</span><br><span class="line"><span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></tbody></table></figure><p>通过定义enter和exit方法，我们可以在with语句里使用它。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> File(<span class="string">'demo.txt'</span>, <span class="string">'w'</span>) <span class="keyword">as</span> opened_file:</span><br><span class="line">  opened_file.write(<span class="string">'Hola!'</span>)</span><br></pre></td></tr></tbody></table></figure><p>exit函数接受三个参数。这些参数对于每个上下文管理器类中的exit方法都是必须的。</p><ol><li>with语句先暂存了File类的exit方法 </li><li>然后它调用File类的enter方法</li><li>enter__方法打开文件并返回给with语句 </li><li>打开的文件句柄被传递给opened_file参数 </li><li><p>我们使用.write()来写文件</p></li><li><p>with语句调用之前暂存的exit方法 </p></li><li><p>exit方法关闭了文件</p><p>在4与6之前，如果发生了异常，Python会将异常的type,value和traceback传递给exit方法。它让exit方法来决定如何关闭文件以及是否需要其他步骤。</p></li><li><p>如果exit返回的是True，那么这个异常就被优雅地处理了。</p></li><li>如果exit返回的是True以外的任何东西，那么这个异常将被with语句抛出。</li></ol><h2 id="自行实现上下文管理器-—-基于生成器的实现"><a href="#自行实现上下文管理器-—-基于生成器的实现" class="headerlink" title="自行实现上下文管理器 — 基于生成器的实现"></a>自行实现上下文管理器 — 基于生成器的实现</h2><p>还可以使用一个生成器函数来实现一 个上下文管理器，而不是使用一个类。</p><ol><li>Python解释器遇到了yield关键字。因为这个缘故它创建了一个生成器而不是一个普通的函数。</li><li>因为这个装饰器，contextmanager会被调用并传入函数名(open_file)作为 参数。</li><li>contextmanager函数返回一个以GeneratorContextManager对象封装过的 生成器。</li><li>这个GeneratorContextManager被赋值给open_file函数，我们实际上是在 调用GeneratorContextManager对象。</li></ol><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> contextlib <span class="keyword">import</span> contextmanager</span><br><span class="line"><span class="meta">@contextmanager</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">open_file</span><span class="params">(name)</span>:</span></span><br><span class="line">f = open(name, <span class="string">'w'</span>) </span><br><span class="line">  <span class="keyword">yield</span> f</span><br><span class="line">f.close()</span><br></pre></td></tr></tbody></table></figure><p>等价于：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open_file(<span class="string">'some_file'</span>) <span class="keyword">as</span> f: </span><br><span class="line">  f.write(<span class="string">'hola!'</span>)</span><br></pre></td></tr></tbody></table></figure><h1 id="Pythonic的代码"><a href="#Pythonic的代码" class="headerlink" title="Pythonic的代码"></a>Pythonic的代码</h1><h2 id="print-字符串格式化"><a href="#print-字符串格式化" class="headerlink" title="print 字符串格式化"></a>print 字符串格式化</h2><p>非常Pythonic的代码应该是这样：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'Hello %(name)s!'</span>%{<span class="string">'name'</span>:<span class="string">'Tom'</span>})</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'{greet} from {language}.'</span>.format(greet = <span class="string">'Hello world'</span>,language = <span class="string">'Python'</span>))</span><br></pre></td></tr></tbody></table></figure><h2 id="风格检查工具"><a href="#风格检查工具" class="headerlink" title="风格检查工具"></a>风格检查工具</h2><p>风格检查工具提出了保持代码一致性细节的要求。包括代码布局、注释、命名规范等方面的要求。这种工具有PEP8、Pychecker、Pylint等。如PEP8的安装与使用如下：</p><ul><li>安装：使用conda或者pip进行安装</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ conda install -c anaconda pycodestyle</span><br></pre></td></tr></tbody></table></figure><p>or</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pip install -U pycodestyle</span><br></pre></td></tr></tbody></table></figure><ul><li>简单的检测代码</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pycodestyle --first test.py</span><br></pre></td></tr></tbody></table></figure><ul><li>还可以使用—show-source参数让PEP8显示每一个错误和警告对应的代码</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pycodestyle --show-source --show-pep8 test.py</span><br></pre></td></tr></tbody></table></figure><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><ol><li>函数注释：给外部可访问的函数与方法添加文档注释。注释要清楚的描述方法的功能，并对参数、返回值以及可能发生的异常进行说明。</li></ol><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">FuncName</span><span class="params">(parameter1,parameter2)</span>:</span></span><br><span class="line">  <span class="string">"""Describe what this Function does:</span></span><br><span class="line"><span class="string">     # such as "Find wheter the special string is in the queue or not"</span></span><br><span class="line"><span class="string">     Args:</span></span><br><span class="line"><span class="string">     parameter1:parameter type,what is the parameter used for.</span></span><br><span class="line"><span class="string">     parameter2:parameter type,what is the parameter used for.</span></span><br><span class="line"><span class="string">      return type, return value.</span></span><br><span class="line"><span class="string">  """</span></span><br><span class="line">  function body</span><br><span class="line">  ...</span><br><span class="line">  ...</span><br></pre></td></tr></tbody></table></figure><ol><li>推荐在文件头中包含copyright申明、模块描述等，如有必要可以加入作者信息及变更记录。</li></ol><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">Licensed Materials - Property of CorpA</span></span><br><span class="line"><span class="string">(C) Copyright A Corp.1999,2011 All Right Reserved</span></span><br><span class="line"><span class="string">CopyRight statement and purpose...</span></span><br><span class="line"><span class="string">-------------------------------------------------------------</span></span><br><span class="line"><span class="string"># @Time: 2020/2/27 12:08 </span></span><br><span class="line"><span class="string"># @Author: GraceKoo</span></span><br><span class="line"><span class="string"># @File: 55_jump-game.py</span></span><br><span class="line"><span class="string"># @Desc:https://leetcode-cn.com/problems/jump-game/</span></span><br><span class="line"><span class="string">-------------------------------------------------------------</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></tbody></table></figure><h2 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h2><p>Python的内建命名空间是支持一小部分常量的，如True、Flase、None等。只是Python没有提供常量的直接方式而已。</p><ul><li>常量名所有字母应大写，用下划线连接各个单词，如：MAX_OVERFLOW</li><li>将常量集中到一个文件</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_const</span>:</span></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">ConstError</span><span class="params">(TypeError)</span>:</span><span class="keyword">pass</span></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">ConstCaseError</span><span class="params">(constError)</span>:</span><span class="keyword">pass</span></span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">_setattr_</span><span class="params">(self, name, value)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> self.__dict__.has_key(name):</span><br><span class="line">      <span class="keyword">raise</span> self.ConstError, <span class="string">"can not change const"</span> %name</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> name.isupper():</span><br><span class="line">      <span class="keyword">raise</span> self.ConstCaseError,\</span><br><span class="line">        <span class="string">'const name "%s" is not all uppercase'</span> %name</span><br><span class="line">    self.__dict__[name] = value</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">sys.modules[__name__]=_const()</span><br></pre></td></tr></tbody></table></figure><p>设置常量<br></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> const</span><br><span class="line">const.COMPANY = <span class="string">"IBM"</span></span><br></pre></td></tr></tbody></table></figure><p></p><p>使用常量</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> constant <span class="keyword">import</span> const</span><br><span class="line">print(const.COMPANY)</span><br></pre></td></tr></tbody></table></figure><h1 id="类型检查"><a href="#类型检查" class="headerlink" title="类型检查"></a>类型检查</h1><p>内建函数type() 用于返回当前对象的类型，但type()有时并不能准确返回结果。建议使用isinstance()来检测。</p><blockquote><p>isinstance(object, classinfo)</p></blockquote><p>classinfo为直接或者间接的类名，基本类型名称或者由它们组成的元组。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">isinstance(<span class="number">2</span>, float)</span><br><span class="line">isinstance(<span class="string">"a"</span>, (str.unicode))</span><br><span class="line">isinstance((<span class="number">2</span>,<span class="number">3</span>), (str, list, tuple))</span><br></pre></td></tr></tbody></table></figure><h1 id="浮点计算"><a href="#浮点计算" class="headerlink" title="浮点计算"></a>浮点计算</h1><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="number">1.1</span> + <span class="number">1.1</span> + <span class="number">1.1</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">0.30000000000003</span></span><br></pre></td></tr></tbody></table></figure><p>如果对精度要求比较高，可以用Decimal来进行处理。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Decimal <span class="keyword">import</span> *</span><br><span class="line">getcontext().prec = <span class="number">6</span></span><br><span class="line">Decimal(<span class="number">1</span>) / Decimal(<span class="number">7</span>) <span class="comment"># Decimal('0.142857') 保留6个有效数字</span></span><br><span class="line"></span><br><span class="line">Decimal(<span class="string">'50.5679'</span>).quantize(Decimal(<span class="string">'0.00'</span>)) <span class="comment"># Decimal('50.57') 四舍五入保留两位小数</span></span><br></pre></td></tr></tbody></table></figure><h1 id="官方资源地址"><a href="#官方资源地址" class="headerlink" title="官方资源地址"></a>官方资源地址</h1><p><a href="https://docs.python.org/2/library/pdb.html" target="_blank" rel="noopener">https://docs.python.org/2/library/pdb.html</a> </p><p><a href="https://docs.python.org/3/library/pdb.html" target="_blank" rel="noopener">https://docs.python.org/3/library/pdb.html</a></p><h1 id="参考书籍"><a href="#参考书籍" class="headerlink" title="参考书籍"></a>参考书籍</h1><ul><li>《Intermediate Python》</li><li>《编写高质量代码 改善Python程序的91个建议》</li><li>《Python核心编程 第三版》</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;args-和-Kwargs&quot;&gt;&lt;a href=&quot;#args-和-Kwargs&quot; class=&quot;headerlink&quot; title=&quot;*args 和 **Kwargs&quot;&gt;&lt;/a&gt;&lt;strong&gt;*args&lt;/strong&gt; 和 **Kwargs&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;*args 是用来发送一个非键值对的可变数量的参数列表给一个函 数&lt;/li&gt;
&lt;li&gt;kwargs 允许你将不定长度的键值对, 作为参数传递给一个函数。 如果你想要在一个函 数里处理带名字的参数, 你应该使用kwargs。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;test_args_kwargs&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(arg1, arg2, arg3)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    print(&lt;span class=&quot;string&quot;&gt;&quot;arg1:&quot;&lt;/span&gt;, arg1)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    print(&lt;span class=&quot;string&quot;&gt;&quot;arg2:&quot;&lt;/span&gt;, arg2)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    print(&lt;span class=&quot;string&quot;&gt;&quot;arg3:&quot;&lt;/span&gt;, arg3)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Test *args&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;args = (&lt;span class=&quot;string&quot;&gt;&quot;two&quot;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;test_args_kwargs(*args)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;arg1: two&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;arg2: &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;arg3: &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Test **kwargs&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;kwargs = {&lt;span class=&quot;string&quot;&gt;&quot;arg3&quot;&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;arg2&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;two&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;arg1&quot;&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;test_args_kwargs(**kwargs)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;arg1: &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;arg2: two&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;arg3: &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Language" scheme="https://unknown.yuzhouwan.com/categories/Language/"/>
    
    
      <category term="Python" scheme="https://unknown.yuzhouwan.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>DataStructure &amp; Algorithm</title>
    <link href="https://unknown.yuzhouwan.com/posts/57792/"/>
    <id>https://unknown.yuzhouwan.com/posts/57792/</id>
    <published>2020-01-12T23:05:00.000Z</published>
    <updated>2020-02-08T15:08:59.259Z</updated>
    
    <content type="html"><![CDATA[<h1 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h1><p><img data-src="/images/algorithm/栈.png" alt="栈"></p><h2 id="括号匹配问题"><a href="#括号匹配问题" class="headerlink" title="括号匹配问题"></a>括号匹配问题</h2><p><img data-src="/images/algorithm/括号匹配.png" alt="括号匹配"></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">LEFT = {<span class="string">'('</span>,<span class="string">'['</span>,<span class="string">'{'</span>}</span><br><span class="line">RIGHT = {<span class="string">')'</span>,<span class="string">']'</span>,<span class="string">'}'</span>}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">match</span><span class="params">(expr)</span>:</span></span><br><span class="line">    stack = []</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> expr:</span><br><span class="line">        <span class="keyword">if</span> c <span class="keyword">in</span> LEFT:</span><br><span class="line">            stack.append(c)</span><br><span class="line">        <span class="keyword">elif</span> c <span class="keyword">in</span> RIGHT:</span><br><span class="line">            <span class="comment">#为空</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> stack:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> <span class="number">1</span> &lt;= ord(c) - ord(stack[<span class="number">-1</span>]) &lt;= <span class="number">2</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            stack.pop()</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">not</span> stack</span><br><span class="line"></span><br><span class="line">print(match(<span class="string">'{{[]}}'</span>))</span><br><span class="line"></span><br><span class="line">TRUE</span><br></pre></td></tr></tbody></table></figure><h2 id="迷宫问题"><a href="#迷宫问题" class="headerlink" title="迷宫问题"></a>迷宫问题</h2><p><img data-src="/images/algorithm/迷宫问题.png" alt="宫问"></p><p>最后栈为空说明已经无路可走，如果栈不为空说明找到了一条路径。</p><a id="more"></a><p>为了让表达统一，我们初始化迷宫的时候，将迷宫四周边缘都设成1，这样我们就不用考虑一个点是边界还是非边界点，<strong>即所有点都判断上下左右点是否唯一即可。</strong></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#初始化迷宫</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">initMaze</span><span class="params">()</span>:</span></span><br><span class="line">    maze = [[<span class="number">0</span>] * <span class="number">7</span> <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">5</span> + <span class="number">2</span>)]</span><br><span class="line">    walls = [(<span class="number">1</span>,<span class="number">3</span>),(<span class="number">2</span>,<span class="number">1</span>),(<span class="number">2</span>,<span class="number">5</span>),(<span class="number">3</span>,<span class="number">3</span>),(<span class="number">3</span>,<span class="number">4</span>),(<span class="number">4</span>,<span class="number">3</span>),(<span class="number">5</span>,<span class="number">4</span>),]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>+<span class="number">2</span>):</span><br><span class="line">        maze[i][<span class="number">0</span>] = maze[i][<span class="number">-1</span>] = <span class="number">1</span></span><br><span class="line">        maze[<span class="number">0</span>][i] = maze[<span class="number">-1</span>][i] = <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i,j <span class="keyword">in</span> walls:</span><br><span class="line">        maze[i][j] = <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span> maze</span><br><span class="line"></span><br><span class="line"><span class="comment">#路径选择</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">path</span><span class="params">(maze,start,end)</span>:</span></span><br><span class="line">    </span><br><span class="line">    print(maze)</span><br><span class="line">    </span><br><span class="line">    i,j = start</span><br><span class="line">    e_i,e_j = end</span><br><span class="line">    s = [(i,j)]           <span class="comment">#用栈(列表)保存路径节点</span></span><br><span class="line">    maze[i][j] = <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> s:         <span class="comment">#如果栈不为空,证明还有路可走</span></span><br><span class="line">        i,j = s[<span class="number">-1</span>]</span><br><span class="line">        <span class="keyword">if</span> (i,j) == (e_i,e_j):  <span class="comment">#如果到达终点</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">for</span> di,dj <span class="keyword">in</span> [(<span class="number">0</span>,<span class="number">-1</span>),(<span class="number">0</span>,<span class="number">1</span>),(<span class="number">-1</span>,<span class="number">0</span>),(<span class="number">1</span>,<span class="number">0</span>)]:    <span class="comment">#上下左右四个方向 </span></span><br><span class="line">            <span class="keyword">if</span> maze[i+di][j+dj] == <span class="number">0</span>:       <span class="comment">#如果存在为0的可走路径</span></span><br><span class="line">                maze[i+di][j+di] = <span class="number">1</span></span><br><span class="line">                s.append((i+di,j+dj))       <span class="comment">#将新的路径加入</span></span><br><span class="line">                <span class="keyword">break</span>                       <span class="comment">#跳出此循环，执行i,j = s[-1]</span></span><br><span class="line">        <span class="keyword">else</span>:                           <span class="comment">#如果不存在为0的可走路径</span></span><br><span class="line">            s.pop()                     <span class="comment">#如果发现四周都为1，即无路可走了,执行i,j = s[-1]</span></span><br><span class="line">   </span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line"></span><br><span class="line">maze = initMaze()</span><br><span class="line">print(path(maze,(<span class="number">1</span>,<span class="number">1</span>),(<span class="number">5</span>,<span class="number">5</span>)))</span><br></pre></td></tr></tbody></table></figure><h2 id="后缀表达式求值"><a href="#后缀表达式求值" class="headerlink" title="后缀表达式求值"></a>后缀表达式求值</h2><p><img data-src="/images/algorithm/后缀表达式求值.png" alt="后缀表达式求值"></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">后缀表达式求值问题</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">operators = {</span><br><span class="line">    <span class="string">"+"</span>:<span class="keyword">lambda</span> op1,op2:op1 + op2,</span><br><span class="line">    <span class="string">"-"</span>:<span class="keyword">lambda</span> op1,op2:op1 - op2,</span><br><span class="line">    <span class="string">"*"</span>:<span class="keyword">lambda</span> op1,op2:op1 * op2,</span><br><span class="line">    <span class="string">"/"</span>:<span class="keyword">lambda</span> op1,op2:op1 / op2,</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">#后缀表达式求值，e是表达式</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">evalPostfix</span><span class="params">(e)</span>:</span></span><br><span class="line">    tokens = e.split()</span><br><span class="line">    s = []</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> token <span class="keyword">in</span> tokens:</span><br><span class="line">        <span class="keyword">if</span> token.isdigit():</span><br><span class="line">            s.append(int(token))</span><br><span class="line">        <span class="keyword">elif</span> token <span class="keyword">in</span> operators:</span><br><span class="line">            f = operators[token]</span><br><span class="line">            op2 = s.pop()</span><br><span class="line">            op1 = s.pop()</span><br><span class="line">            s.append(f(op1,op2))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> s.pop()</span><br><span class="line"></span><br><span class="line">print(evalPostfix(<span class="string">"2 3 4 * +"</span>))</span><br></pre></td></tr></tbody></table></figure><h2 id="背包问题"><a href="#背包问题" class="headerlink" title="背包问题"></a>背包问题</h2><p><img data-src="/images/algorithm/背包问题.png" alt="背包问题"></p><p><img data-src="/images/algorithm/背包问题2.png" alt="背包问题2"></p><p>”回溯法“就是一步一步创建解的过程。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">背包问题</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#t是求解的总重量，w是一个列表，为每个物体的重量，返回值是解</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">knapsack</span><span class="params">(t,w)</span>:</span></span><br><span class="line">    n = len(w)                 <span class="comment">#物体的个数</span></span><br><span class="line">    s = []                     <span class="comment">#存放对应物体的下标</span></span><br><span class="line">    k = <span class="number">0</span>                      <span class="comment">#物体的指针</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> s <span class="keyword">or</span> k &lt; n:   <span class="comment"># 当栈里有元素(证明可能还有解)，或者初始指针小于n -- 这两种情况下，解可能存在</span></span><br><span class="line">        <span class="keyword">while</span> t &gt; <span class="number">0</span> <span class="keyword">and</span> k &lt; n: </span><br><span class="line">            <span class="keyword">if</span> t &gt;= w[k]:      <span class="comment">#求解的重量大于某个物体的重量</span></span><br><span class="line">                s.append(k)    <span class="comment">#装入对应物体的指针</span></span><br><span class="line">                t -= w[k]      <span class="comment">#总重减小</span></span><br><span class="line">            k += <span class="number">1</span>             <span class="comment">#指向下一个物体</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> t == <span class="number">0</span>:             <span class="comment">#对应上层while不成立的条件：当t已经为0(也就是已经找到解)</span></span><br><span class="line">            print(s)</span><br><span class="line">        </span><br><span class="line">        k = s.pop()    <span class="comment">#或者指针k已经超出n时，即无解情况，回溯，k指针设为栈顶的元素指针的下一个元素指针</span></span><br><span class="line">        t += w[k]</span><br><span class="line">        k += <span class="number">1</span></span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">knapsack(<span class="number">10</span>,[<span class="number">1</span>,<span class="number">8</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">2</span>])</span><br><span class="line"></span><br><span class="line">[<span class="number">0</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>]</span><br><span class="line">[<span class="number">0</span>, <span class="number">2</span>, <span class="number">4</span>]</span><br><span class="line">[<span class="number">1</span>, <span class="number">5</span>]</span><br><span class="line">[<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br></pre></td></tr></tbody></table></figure><h1 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h1><p><img data-src="/images/algorithm/队列.png" alt="队列"></p><p>Python中队列的接口为：<img data-src="/images/algorithm/队列接口.png" alt="队列接口"></p><h2 id="Python标准库中的队列deque"><a href="#Python标准库中的队列deque" class="headerlink" title="Python标准库中的队列deque"></a>Python标准库中的队列deque</h2><p>队列的方法如下：</p><p><img data-src="/images/algorithm/队列标准库.png" alt="队列标准库"></p><p><img data-src="/images/algorithm/1.png" alt="屏幕快照 2018-04-06 下午12.34.52"></p><p><img data-src="/images/algorithm/2.png" alt="屏幕快照 2018-04-06 下午12.35.04"></p><h2 id="二项式系数"><a href="#二项式系数" class="headerlink" title="二项式系数"></a>二项式系数</h2><p><img data-src="/images/algorithm/多项式系数.png" alt="多项式系数"></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">杨辉三角形，求解多项式系数问题</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line"><span class="comment">#求解杨辉三角第k层的系数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">yanghui</span><span class="params">(k)</span>:</span> </span><br><span class="line">    <span class="comment">#从第0层，一步一步推算出第k层的系数</span></span><br><span class="line">    </span><br><span class="line">    q = deque([<span class="number">1</span>]) <span class="comment">#第0层系数是1</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(k): <span class="comment"># k次推导，i表示当前所在的层</span></span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> range(i): <span class="comment"># 第i层需要经过i次出栈操作，才能计算出来结果</span></span><br><span class="line">            </span><br><span class="line">            q.append(q.popleft() + q[<span class="number">0</span>])</span><br><span class="line">        </span><br><span class="line">        q.append(<span class="number">1</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> list(q)</span><br><span class="line"></span><br><span class="line">print(yanghui(<span class="number">4</span>))</span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">1</span>]</span><br></pre></td></tr></tbody></table></figure><h2 id="划分无冲突子集"><a href="#划分无冲突子集" class="headerlink" title="划分无冲突子集"></a>划分无冲突子集</h2><p><img data-src="/images/algorithm/划分无冲突子集.png" alt="划分无冲突子集"></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">划分无冲突子集</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">division</span><span class="params">(M,n)</span>:</span></span><br><span class="line">    res = []</span><br><span class="line">    q = deque(range(n))</span><br><span class="line">    pre = n</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> q:</span><br><span class="line">        cur = q.popleft()</span><br><span class="line">        <span class="keyword">if</span> pre &gt;= cur:</span><br><span class="line">            res.append([])</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">for</span> a <span class="keyword">in</span> res[<span class="number">-1</span>]:</span><br><span class="line">            <span class="keyword">if</span> M[cur][a]:</span><br><span class="line">                q.append(cur)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            res[<span class="number">-1</span>].append(cur)</span><br><span class="line">        pre = cur</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">N = <span class="number">9</span></span><br><span class="line">R = {</span><br><span class="line">    (<span class="number">1</span>,<span class="number">4</span>),(<span class="number">4</span>,<span class="number">8</span>),(<span class="number">1</span>,<span class="number">8</span>),(<span class="number">1</span>,<span class="number">7</span>),</span><br><span class="line">    (<span class="number">8</span>,<span class="number">3</span>),(<span class="number">1</span>,<span class="number">0</span>),(<span class="number">0</span>,<span class="number">5</span>),(<span class="number">1</span>,<span class="number">5</span>),</span><br><span class="line">    (<span class="number">3</span>,<span class="number">4</span>),(<span class="number">5</span>,<span class="number">6</span>),(<span class="number">5</span>,<span class="number">2</span>),(<span class="number">6</span>,<span class="number">2</span>),(<span class="number">6</span>,<span class="number">4</span>)</span><br><span class="line">}</span><br><span class="line">M = [[<span class="number">0</span>] * N <span class="keyword">for</span> _ <span class="keyword">in</span> range(N)]</span><br><span class="line"><span class="keyword">for</span> i,j <span class="keyword">in</span> R:</span><br><span class="line">    M[i][j] = M[j][i] = <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">print(division(M,N))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[[<span class="number">0</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">7</span>], [<span class="number">1</span>, <span class="number">6</span>], [<span class="number">4</span>, <span class="number">5</span>], [<span class="number">8</span>]]</span><br></pre></td></tr></tbody></table></figure><h2 id="数字变换-用队列实现广度优先搜索"><a href="#数字变换-用队列实现广度优先搜索" class="headerlink" title="数字变换(用队列实现广度优先搜索)"></a>数字变换(用队列实现广度优先搜索)</h2><p><img data-src="/images/algorithm/数字变换.png" alt="数字变换"></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">数字变换</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将a变成b需要经过几个步骤，使用队列存储转换时的状态</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">atob</span><span class="params">(a,b)</span>:</span></span><br><span class="line">    state_queue = deque([(a,<span class="number">0</span>)]) <span class="comment"># 使用元组作为一个元素，第一个值是计算到的数字，第二个值记录现在经过的状态，使用队列记录正在被计算的数字</span></span><br><span class="line">    checked = {a} <span class="comment"># 使用集合记录已经被检查过的数字，要是队列中又出现相同的数字，则不予计算</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        num,state = state_queue.popleft()</span><br><span class="line">        <span class="keyword">if</span> num == b:</span><br><span class="line">            <span class="keyword">break</span>   <span class="comment"># 跳出循环的条件</span></span><br><span class="line">        <span class="keyword">if</span> num &lt; b: <span class="comment"># 比b小的数只能通过“+”，“*”操作才有可能得到b，所以忽略“-”操作</span></span><br><span class="line">            <span class="keyword">if</span> num * <span class="number">2</span> <span class="keyword">not</span> <span class="keyword">in</span> checked:</span><br><span class="line">                state_queue.append((num * <span class="number">2</span>,state + <span class="number">1</span>))</span><br><span class="line">            <span class="keyword">if</span> num + <span class="number">1</span> <span class="keyword">not</span> <span class="keyword">in</span> checked:</span><br><span class="line">                state_queue.append((num + <span class="number">1</span>,state + <span class="number">1</span>))</span><br><span class="line">        <span class="keyword">if</span> num &gt; b:</span><br><span class="line">            <span class="keyword">if</span> num - <span class="number">1</span> <span class="keyword">not</span> <span class="keyword">in</span> checked:</span><br><span class="line">                state_queue.append((num - <span class="number">1</span>,state + <span class="number">1</span>))</span><br><span class="line">    <span class="keyword">return</span> state</span><br><span class="line"></span><br><span class="line">print(<span class="string">"需要通过"</span> + str(atob(<span class="number">3</span>,<span class="number">8</span>)) + <span class="string">"步"</span>)  </span><br><span class="line"></span><br><span class="line">需要通过<span class="number">2</span>步</span><br></pre></td></tr></tbody></table></figure><h1 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h1><p><img data-src="/images/algorithm/二叉树.png" alt="二叉树"></p><h2 id="创建二叉树"><a href="#创建二叉树" class="headerlink" title="创建二叉树"></a>创建二叉树</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,data,left=None,right=None)</span>:</span></span><br><span class="line">        self.data = data</span><br><span class="line">        self.left = left</span><br><span class="line">        self.right = right</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> str(self)</span><br><span class="line"></span><br><span class="line">A,B,C,D,E,F,G,H,I = [TreeNode(x) <span class="keyword">for</span> x <span class="keyword">in</span> <span class="string">"ABCDEFGHI"</span>]</span><br><span class="line">A.left = B</span><br><span class="line">A.right = C</span><br><span class="line">B.right = D</span><br><span class="line">C.left = E</span><br><span class="line">C.right = F</span><br><span class="line">E.left = G</span><br><span class="line">F.left = H</span><br><span class="line">F.right = I</span><br><span class="line"></span><br><span class="line">print(C.right.data)</span><br></pre></td></tr></tbody></table></figure><h2 id="遍历二叉树（前、中、后序）（递归、回溯-栈）"><a href="#遍历二叉树（前、中、后序）（递归、回溯-栈）" class="headerlink" title="遍历二叉树（前、中、后序）（递归、回溯-栈）"></a>遍历二叉树（前、中、后序）（递归、回溯-栈）</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,data,left=None,right=None)</span>:</span></span><br><span class="line">        self.data = data</span><br><span class="line">        self.left = left</span><br><span class="line">        self.right = right</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> str(self)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">createTree</span><span class="params">()</span>:</span></span><br><span class="line">    A,B,C,D,E,F,G,H,I = [TreeNode(x) <span class="keyword">for</span> x <span class="keyword">in</span> <span class="string">"ABCDEFGHI"</span>]</span><br><span class="line">    A.left = B</span><br><span class="line">    A.right = C</span><br><span class="line">    B.right = D</span><br><span class="line">    C.left = E</span><br><span class="line">    C.right = F</span><br><span class="line">    E.left = G</span><br><span class="line">    F.left = H</span><br><span class="line">    F.right = I</span><br><span class="line">    <span class="keyword">return</span> A</span><br><span class="line"></span><br><span class="line"><span class="comment"># 前序遍历</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">preOrder</span><span class="params">(node)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> node <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    print(node.data)</span><br><span class="line">    preOrder(node.left)</span><br><span class="line">    preOrder(node.right)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 中序遍历</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">inOrder</span><span class="params">(node)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> node <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    inOrder(node.left)</span><br><span class="line">    print(node.data)</span><br><span class="line">    inOrder(node.right)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 后续遍历</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">postOrder</span><span class="params">(node)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> node <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    postOrder(node.left)</span><br><span class="line">    postOrder(node.right)</span><br><span class="line">    print(node.data)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ ==<span class="string">"__main__"</span>:</span><br><span class="line">    root = createTree()</span><br><span class="line">    preOrder(root)</span><br><span class="line">    inOrder(root)</span><br><span class="line">    postOrder(root)</span><br></pre></td></tr></tbody></table></figure><p>使用递归的开销比较大，下面实现一个迭代版的先序遍历。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 回溯的前序遍历</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">preOrderIter</span><span class="params">(root)</span>:</span></span><br><span class="line">    node = root</span><br><span class="line">    s = [] <span class="comment"># 使用一个栈存未遍历的节点</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="comment"># 在节点左子树不为空的情况下，将其左子树一直压栈</span></span><br><span class="line">        <span class="keyword">while</span> node:</span><br><span class="line">            print(node.data)</span><br><span class="line">            s.append(node)</span><br><span class="line">            node = node.left</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 如果栈为空，则说明已经遍历完成</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> s:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 出栈操作，遍历其右子树</span></span><br><span class="line">        node = s.pop().right</span><br></pre></td></tr></tbody></table></figure><h2 id="遍历二叉树（层次遍历-队列）"><a href="#遍历二叉树（层次遍历-队列）" class="headerlink" title="遍历二叉树（层次遍历 - 队列）"></a>遍历二叉树（层次遍历 - 队列）</h2><p>一个节点出队后，才入队它的子节点。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 层次遍历</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">levelOrder</span><span class="params">(root)</span>:</span></span><br><span class="line">    q = deque([root])</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 如果队列不为空</span></span><br><span class="line">    <span class="keyword">while</span> q:</span><br><span class="line">        node = q.popleft()</span><br><span class="line">        print(node.data)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> node.left:</span><br><span class="line">            q.append(node.left)</span><br><span class="line">        <span class="keyword">if</span> node.right:</span><br><span class="line">            q.append(node.right)</span><br></pre></td></tr></tbody></table></figure><h2 id="二叉树的深度"><a href="#二叉树的深度" class="headerlink" title="二叉树的深度"></a>二叉树的深度</h2><p>采用<strong>分而治之</strong>的思路，把求一个树的深度转化为<strong>它左子树的深度</strong>加上<strong>右子树的深度</strong>。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 求二叉树的深度 -- 递归方式</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">depth</span><span class="params">(node)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> node <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    dl = depth(node.left)</span><br><span class="line">    dr = depth(node.right)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> max(dl,dr) + <span class="number">1</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 求二叉树的深度 -- 非递归方式，层次遍历，只需记录一下当前节点的深度即可</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">depth2</span><span class="params">(root)</span>:</span></span><br><span class="line">    q = deque([(root,<span class="number">1</span>)])</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> q:</span><br><span class="line">        node,d = q.popleft()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> node.left:</span><br><span class="line">            q.append((node.left,d+<span class="number">1</span>))</span><br><span class="line">        <span class="keyword">if</span> node.right:</span><br><span class="line">            q.append((node.right,d+<span class="number">1</span>))</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">return</span> d</span><br></pre></td></tr></tbody></table></figure><h2 id="拷贝二叉树"><a href="#拷贝二叉树" class="headerlink" title="拷贝二叉树"></a>拷贝二叉树</h2><p>依旧采用分治的思想，先拷贝左子树，再拷贝右子树，接着拷贝节点。</p> <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">copyTree</span><span class="params">(node)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> node <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    </span><br><span class="line">    lt = copyTree(node.left)</span><br><span class="line">    rt = copyTree(node.right)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> TreeNode(node.data,lt,rt)</span><br><span class="line"></span><br><span class="line">newTree = copyTree(root)</span><br><span class="line">levelOrder(newTree)</span><br></pre></td></tr></tbody></table></figure><h2 id="N个节点不同二叉树个数"><a href="#N个节点不同二叉树个数" class="headerlink" title="N个节点不同二叉树个数"></a>N个节点不同二叉树个数</h2><p>计算由N个节点，所构成的二叉树的个数。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">count</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="comment"># root : 1</span></span><br><span class="line">    <span class="comment"># left : K [0,n - 1]</span></span><br><span class="line">    <span class="comment"># right : n - 1 - k</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span> :  <span class="comment"># 递归的出口</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">    s = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> range(n):</span><br><span class="line">        s += count(k) * count(n - <span class="number">1</span> - k)</span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line">     </span><br><span class="line">print(count(<span class="number">3</span>))</span><br></pre></td></tr></tbody></table></figure><h2 id="二叉搜索树"><a href="#二叉搜索树" class="headerlink" title="二叉搜索树"></a>二叉搜索树</h2><p>二叉搜索树又作二叉排序树，它可以支持快速的查找。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 对于二叉搜索树的操作</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BinarySearchTree</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.root = <span class="literal">None</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">search</span><span class="params">(self,k)</span>:</span></span><br><span class="line">        node = self.root</span><br><span class="line">        <span class="keyword">while</span> node <span class="keyword">and</span> node.data != k:</span><br><span class="line">            <span class="keyword">if</span> k &lt; node.data:</span><br><span class="line">                node = node.left</span><br><span class="line">            <span class="keyword">if</span> k &gt; node.data:</span><br><span class="line">                node = node.right</span><br><span class="line">        <span class="keyword">return</span> node</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#同样的实现搜索操作，不过还要返回父节点</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">search_</span><span class="params">(self,k)</span>:</span></span><br><span class="line">        parent = <span class="literal">None</span></span><br><span class="line">        node = self.root</span><br><span class="line">        <span class="keyword">while</span> node <span class="keyword">and</span> node.data != k:</span><br><span class="line">            parent = node</span><br><span class="line">            <span class="keyword">if</span> k &lt; node.data:</span><br><span class="line">                node = node.left</span><br><span class="line">            <span class="keyword">if</span> k &gt; node.data:</span><br><span class="line">                node = node.right</span><br><span class="line">        <span class="keyword">return</span> node,parent</span><br><span class="line">        </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insert</span><span class="params">(self,k)</span>:</span></span><br><span class="line">        node,parent = self.search_(k)</span><br><span class="line">        <span class="comment"># 如果返回到了node的值，说明这个node在节点上存在，则不用执行插入操作</span></span><br><span class="line">        <span class="keyword">if</span> node:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 如果是不存在的，首先构造一个新节点</span></span><br><span class="line">        node = TreeNode(k)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 将node插入到parent上</span></span><br><span class="line">        <span class="comment"># 树为空，将整个节点插入到树上，赋为根节点</span></span><br><span class="line">        <span class="keyword">if</span> parent <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            self.root = node</span><br><span class="line">        <span class="keyword">elif</span> k &lt; parent.data:</span><br><span class="line">            parent.left = node</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            parent.right = node</span><br><span class="line">        </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(self,k)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    </span><br><span class="line">bst = BinarySearchTree()  </span><br><span class="line">bst.insert(<span class="number">10</span>)</span><br><span class="line">bst.insert(<span class="number">5</span>)</span><br><span class="line">bst.insert(<span class="number">15</span>)</span><br><span class="line">levelOrder(bst.root)</span><br></pre></td></tr></tbody></table></figure><h1 id="图"><a href="#图" class="headerlink" title="图"></a>图</h1><p><img data-src="/images/algorithm/图.png" alt="图"></p><h2 id="在Python中使用图"><a href="#在Python中使用图" class="headerlink" title="在Python中使用图"></a>在Python中使用图</h2><p><strong>邻接矩阵表示法（有向图、无向图）：</strong></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 用二维数组表示</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 两个点确定一条边</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Vertical</span><span class="params">(G,n1,n2)</span>:</span></span><br><span class="line">    Graph[n1][n2] = Graph[n2][n1] = <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">N = <span class="number">5</span>   <span class="comment"># 一共5个点</span></span><br><span class="line">a,b,c,d,e = range(<span class="number">5</span>)</span><br><span class="line">Graph = [[<span class="number">0</span>] * N <span class="keyword">for</span> _ <span class="keyword">in</span> range(N)] <span class="comment"># 建立一个二维数组保存图</span></span><br><span class="line">Vertical(Graph,a,b)</span><br><span class="line">print(Graph)</span><br><span class="line"></span><br><span class="line">[[<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>], </span><br><span class="line"> [<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>], </span><br><span class="line"> [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>], </span><br><span class="line"> [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>], </span><br><span class="line"> [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]]</span><br></pre></td></tr></tbody></table></figure><p>邻接矩阵的缺点：</p><p>1.如果图中节点个数很多，边的条数很少，则会浪费资源。</p><p>2.访问一个节点的邻接节点，需要遍历一个列表才可以。</p><p><strong>邻接集合表示法（有向图和无向图）：</strong></p><p>用一个列表存储集合的形式保存节点和边的关系，第一个集合保存节点1，第一个集合保存节点2，以此类推。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">邻接集合表示有向图和无向图</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 每一个集合表示对应点相邻的点</span></span><br><span class="line">G2 = [{b,e},{c,d,e},{b,d},{b,c,e},{a,b,d}]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对于b点来说</span></span><br><span class="line">G2[b]</span><br><span class="line"></span><br><span class="line">{<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>}</span><br></pre></td></tr></tbody></table></figure><p>邻接列表就是把集合换成列表。</p><p><strong>对于带权的边，可以使用邻接字典。</strong></p><p>不再使用集合存储，而使用字典存储，其中字典的值表示边的长度。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">G3 = [{b:<span class="number">4</span>,e:<span class="number">2</span>},{c:<span class="number">5</span>,d:<span class="number">6</span>,e:<span class="number">3</span>}]</span><br><span class="line">G3</span><br><span class="line"></span><br><span class="line">[{<span class="number">1</span>: <span class="number">4</span>, <span class="number">4</span>: <span class="number">2</span>}, {<span class="number">2</span>: <span class="number">5</span>, <span class="number">3</span>: <span class="number">6</span>, <span class="number">4</span>: <span class="number">3</span>}]</span><br></pre></td></tr></tbody></table></figure><h2 id="图的深度优先遍历算法DFS"><a href="#图的深度优先遍历算法DFS" class="headerlink" title="图的深度优先遍历算法DFS"></a>图的深度优先遍历算法DFS</h2><p><img data-src="/images/algorithm/图1.png" alt="图1"></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">G = [</span><br><span class="line">    {<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>}, <span class="comment"># 0的邻接节点</span></span><br><span class="line">    {<span class="number">0</span>,<span class="number">4</span>,<span class="number">6</span>}, <span class="comment"># 1</span></span><br><span class="line">    {<span class="number">0</span>,<span class="number">3</span>},   <span class="comment"># 2</span></span><br><span class="line">    {<span class="number">0</span>,<span class="number">2</span>,<span class="number">4</span>}, <span class="comment"># 3</span></span><br><span class="line">    {<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>},<span class="comment"># 4 </span></span><br><span class="line">    {<span class="number">4</span>,<span class="number">7</span>},   <span class="comment"># 5</span></span><br><span class="line">    {<span class="number">1</span>,<span class="number">4</span>},   <span class="comment"># 6</span></span><br><span class="line">    {<span class="number">5</span>},      <span class="comment"># 7</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 递归深度优先遍历</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(G,v,visited=set<span class="params">()</span>)</span>:</span></span><br><span class="line">    print(v)</span><br><span class="line">    visited.add(v)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> u <span class="keyword">in</span> G[v]:</span><br><span class="line">        <span class="keyword">if</span> u <span class="keyword">not</span> <span class="keyword">in</span> visited:</span><br><span class="line">            dfs(G,u,visited)</span><br><span class="line">            </span><br><span class="line">dfs(G,<span class="number">0</span>)</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line"><span class="comment"># 非递归 --  循环实现深度优先遍历    </span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dfsIter</span><span class="params">(G,v)</span>:</span></span><br><span class="line">    visited = set()</span><br><span class="line">    <span class="comment"># 使用栈</span></span><br><span class="line">    s = [v]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> s:</span><br><span class="line">        u = s.pop()</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> u <span class="keyword">not</span> <span class="keyword">in</span> visited:</span><br><span class="line">            visited.add(u)</span><br><span class="line">            print(u)</span><br><span class="line">            s.extend(G[u])</span><br><span class="line"></span><br><span class="line">dfsIter(G,<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></tbody></table></figure><h2 id="图的广度优先遍历算法BFS"><a href="#图的广度优先遍历算法BFS" class="headerlink" title="图的广度优先遍历算法BFS"></a>图的广度优先遍历算法BFS</h2><p><img data-src="/images/algorithm/图1.png" alt="图1"></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">G = [</span><br><span class="line">    {<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>}, <span class="comment"># 0的邻接节点</span></span><br><span class="line">    {<span class="number">0</span>,<span class="number">4</span>,<span class="number">6</span>}, <span class="comment"># 1</span></span><br><span class="line">    {<span class="number">0</span>,<span class="number">3</span>},   <span class="comment"># 2</span></span><br><span class="line">    {<span class="number">0</span>,<span class="number">2</span>,<span class="number">4</span>}, <span class="comment"># 3</span></span><br><span class="line">    {<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>},<span class="comment"># 4 </span></span><br><span class="line">    {<span class="number">4</span>,<span class="number">7</span>},   <span class="comment"># 5</span></span><br><span class="line">    {<span class="number">1</span>,<span class="number">4</span>},   <span class="comment"># 6</span></span><br><span class="line">    {<span class="number">5</span>},      <span class="comment"># 7</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bfs</span><span class="params">(G,v)</span>:</span></span><br><span class="line">    <span class="comment"># 队列里放未被访问过的元素</span></span><br><span class="line">    q = deque([v])</span><br><span class="line">    visited = {v}</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> q:</span><br><span class="line">        u = q.popleft()</span><br><span class="line">        print(u)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> w <span class="keyword">in</span> G[u]:</span><br><span class="line">            <span class="keyword">if</span> w <span class="keyword">not</span> <span class="keyword">in</span> visited:</span><br><span class="line">                q.append(w)</span><br><span class="line">                visited.add(w)</span><br><span class="line"></span><br><span class="line">bfs(G,<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">7</span></span><br></pre></td></tr></tbody></table></figure><h2 id="最小生成树算法（Prim算法）"><a href="#最小生成树算法（Prim算法）" class="headerlink" title="最小生成树算法（Prim算法）"></a>最小生成树算法（Prim算法）</h2><p>图的生成树：<strong>包含所有顶点不能有回环的图。</strong></p><p>最小生成树：代价（边的权值）最小的生成树。</p><p><img data-src="/images/algorithm/最小生成树.png" alt="最小生成树"></p><p><img data-src="/images/algorithm/Prim.png" alt="Prim"></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">G = [</span><br><span class="line">    {<span class="number">1</span>:<span class="number">28</span>,<span class="number">5</span>:<span class="number">10</span>},     <span class="comment"># 0</span></span><br><span class="line">    {<span class="number">0</span>:<span class="number">28</span>,<span class="number">2</span>:<span class="number">16</span>,<span class="number">6</span>:<span class="number">14</span>},<span class="comment"># 1</span></span><br><span class="line">    {<span class="number">1</span>:<span class="number">16</span>,<span class="number">3</span>:<span class="number">12</span>},     <span class="comment"># 2</span></span><br><span class="line">    {<span class="number">2</span>:<span class="number">12</span>,<span class="number">4</span>:<span class="number">22</span>,<span class="number">6</span>:<span class="number">18</span>},<span class="comment"># 3</span></span><br><span class="line">    {<span class="number">3</span>:<span class="number">22</span>,<span class="number">5</span>:<span class="number">25</span>,<span class="number">6</span>:<span class="number">24</span>},<span class="comment"># 4</span></span><br><span class="line">    {<span class="number">0</span>:<span class="number">10</span>,<span class="number">4</span>:<span class="number">25</span>},     <span class="comment"># 5</span></span><br><span class="line">    {<span class="number">1</span>:<span class="number">14</span>,<span class="number">3</span>:<span class="number">18</span>,<span class="number">4</span>:<span class="number">24</span>},<span class="comment"># 6</span></span><br><span class="line">]</span><br><span class="line"><span class="keyword">import</span> heapq</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">prim</span><span class="params">(G)</span>:</span></span><br><span class="line">    n = len(G)</span><br><span class="line">    v = <span class="number">0</span>  <span class="comment"># 初始顶点设为0</span></span><br><span class="line">    s = {v}</span><br><span class="line">    </span><br><span class="line">    edges = []</span><br><span class="line">    res = []</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> range(n - <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> u,w <span class="keyword">in</span> G[v].items():</span><br><span class="line">            heapq.heappush(edges,(w,v,u))</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">while</span> edges:</span><br><span class="line">            w,p,q = heapq.heappop(edges)</span><br><span class="line">            <span class="keyword">if</span> q <span class="keyword">not</span> <span class="keyword">in</span> s:</span><br><span class="line">                s.add(q)</span><br><span class="line">                res.append(((p,q),w))</span><br><span class="line">                v = q</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> Exception(<span class="string">"not connected gram!"</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">prim(G)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[((<span class="number">0</span>, <span class="number">5</span>), <span class="number">10</span>),</span><br><span class="line"> ((<span class="number">5</span>, <span class="number">4</span>), <span class="number">25</span>),</span><br><span class="line"> ((<span class="number">4</span>, <span class="number">3</span>), <span class="number">22</span>),</span><br><span class="line"> ((<span class="number">3</span>, <span class="number">2</span>), <span class="number">12</span>),</span><br><span class="line"> ((<span class="number">2</span>, <span class="number">1</span>), <span class="number">16</span>),</span><br><span class="line"> ((<span class="number">1</span>, <span class="number">6</span>), <span class="number">14</span>)]</span><br></pre></td></tr></tbody></table></figure><h2 id="最短路径算法（Dijkstra算法）"><a href="#最短路径算法（Dijkstra算法）" class="headerlink" title="最短路径算法（Dijkstra算法）"></a>最短路径算法（Dijkstra算法）</h2><p><img data-src="/images/algorithm/3.png" alt="屏幕快照 2018-04-23 下午9.04.07"></p><p><img data-src="/images/algorithm/Dijkstra算法.png" alt="Dijkstra算法"></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">a,b,c,d,e,f = range(<span class="number">6</span>)</span><br><span class="line">G = {</span><br><span class="line">    a:{b:<span class="number">2</span>,c:<span class="number">1</span>,d:<span class="number">4</span>,f:<span class="number">10</span>},</span><br><span class="line">    b:{a:<span class="number">2</span>,c:<span class="number">4</span>,e:<span class="number">3</span>},</span><br><span class="line">    c:{a:<span class="number">1</span>,b:<span class="number">4</span>,d:<span class="number">2</span>,f:<span class="number">8</span>},</span><br><span class="line">    d:{a:<span class="number">4</span>,c:<span class="number">2</span>,e:<span class="number">1</span>},</span><br><span class="line">    e:{b:<span class="number">3</span>,d:<span class="number">1</span>,f:<span class="number">7</span>},</span><br><span class="line">    f:{a:<span class="number">10</span>,c:<span class="number">8</span>,e:<span class="number">7</span>},</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> heapq</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dijkstra</span><span class="params">(G,s)</span>:</span></span><br><span class="line">    <span class="comment"># D = {},D[c],D[e]</span></span><br><span class="line">    <span class="comment"># 将顶点到其他点的距离初始化为正无穷大</span></span><br><span class="line">    inf = float(<span class="string">'inf'</span>)</span><br><span class="line">    D = {v: inf <span class="keyword">for</span> v <span class="keyword">in</span> G} <span class="comment"># 每个点的距离设成无穷大</span></span><br><span class="line">    D[s] = <span class="number">0</span>    <span class="comment"># 除了到自己本身，到其余各点距离都是无穷</span></span><br><span class="line">    P = {}      <span class="comment"># 建立父节点的路径</span></span><br><span class="line">    S = {s}     <span class="comment"># 已访问节点</span></span><br><span class="line">    q = []      <span class="comment"># 优先队列</span></span><br><span class="line">    v = s       <span class="comment"># 当前点</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 循环次数</span></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> range(len(G)<span class="number">-1</span>):</span><br><span class="line">        <span class="keyword">for</span> u,w <span class="keyword">in</span> G[v].items():</span><br><span class="line">            d = D[v] + G[u][v]</span><br><span class="line">            <span class="keyword">if</span> D[u] &gt; d:</span><br><span class="line">                D[u] = d</span><br><span class="line">                P[u] = v</span><br><span class="line">                heapq.heappush(q,(d,u))</span><br><span class="line">        <span class="keyword">while</span> q:</span><br><span class="line">            _,v = heapq.heappop(q)</span><br><span class="line">            <span class="keyword">if</span> v <span class="keyword">not</span> <span class="keyword">in</span> S:</span><br><span class="line">                S.add(v)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> D,P</span><br><span class="line"></span><br><span class="line">D,P = dijkstra(G,a)</span><br><span class="line">print(D,P)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">{<span class="number">0</span>: <span class="number">0</span>, <span class="number">1</span>: <span class="number">2</span>, <span class="number">2</span>: <span class="number">1</span>, <span class="number">3</span>: <span class="number">3</span>, <span class="number">4</span>: <span class="number">4</span>, <span class="number">5</span>: <span class="number">9</span>} {<span class="number">1</span>: <span class="number">0</span>, <span class="number">2</span>: <span class="number">0</span>, <span class="number">3</span>: <span class="number">2</span>, <span class="number">4</span>: <span class="number">3</span>, <span class="number">5</span>: <span class="number">2</span>}</span><br></pre></td></tr></tbody></table></figure><h2 id="拓扑排序算法"><a href="#拓扑排序算法" class="headerlink" title="拓扑排序算法"></a>拓扑排序算法</h2><p><img data-src="/images/algorithm/拓扑排序算法.png" alt="拓扑排序算法"></p><p>首先寻找入度为0的点。添加到队列中，删除其出度的边，再次寻找入度为0的点，添加到队列中。依此类推。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">G = {</span><br><span class="line">    <span class="string">'C1'</span>:[<span class="string">'C3'</span>,<span class="string">'C8'</span>],</span><br><span class="line">    <span class="string">'C2'</span>:[<span class="string">'C3'</span>,<span class="string">'C4'</span>,<span class="string">'C5'</span>],</span><br><span class="line">    <span class="string">'C3'</span>:[<span class="string">'C4'</span>],</span><br><span class="line">    <span class="string">'C4'</span>:[<span class="string">'C6'</span>,<span class="string">'C7'</span>],</span><br><span class="line">    <span class="string">'C5'</span>:[<span class="string">'C6'</span>],</span><br><span class="line">    <span class="string">'C6'</span>:[],</span><br><span class="line">    <span class="string">'C7'</span>:[],</span><br><span class="line">    <span class="string">'C8'</span>:[<span class="string">'C9'</span>],</span><br><span class="line">    <span class="string">'C9'</span>:[<span class="string">'C7'</span>],</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">topsort</span><span class="params">(G)</span>:</span></span><br><span class="line">    indegrees = {v:<span class="number">0</span> <span class="keyword">for</span> v <span class="keyword">in</span> G}</span><br><span class="line">    <span class="keyword">for</span> al <span class="keyword">in</span> G.values():</span><br><span class="line">        <span class="keyword">for</span> v <span class="keyword">in</span> al:</span><br><span class="line">            indegrees[v] += <span class="number">1</span></span><br><span class="line">    q = [v <span class="keyword">for</span> v <span class="keyword">in</span> G <span class="keyword">if</span> indegrees[v] == <span class="number">0</span>] <span class="comment"># 选出所有入度为0的点</span></span><br><span class="line">    i = <span class="number">0</span> <span class="comment"># 队头</span></span><br><span class="line">    <span class="keyword">while</span> i &lt; len(q):</span><br><span class="line">        <span class="keyword">for</span> v <span class="keyword">in</span> G[q[i]]:</span><br><span class="line">            indegrees[v] -= <span class="number">1</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 判断是否已经入度为0了，若是，则添加到队列中</span></span><br><span class="line">            <span class="keyword">if</span> indegrees[v] ==  <span class="number">0</span>:</span><br><span class="line">                q.append(v)</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> q <span class="keyword">if</span> i == len(G) <span class="keyword">else</span> <span class="literal">None</span> <span class="comment"># 如果有相互依赖的情况，则返回None</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">topsort(G)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[<span class="string">'C1'</span>, <span class="string">'C2'</span>, <span class="string">'C8'</span>, <span class="string">'C3'</span>, <span class="string">'C5'</span>, <span class="string">'C9'</span>, <span class="string">'C4'</span>, <span class="string">'C6'</span>, <span class="string">'C7'</span>]</span><br></pre></td></tr></tbody></table></figure><h1 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h1><h2 id="枚举简介"><a href="#枚举简介" class="headerlink" title="枚举简介"></a>枚举简介</h2><p>将可能的解逐一列出。</p><h2 id="熄灯问题"><a href="#熄灯问题" class="headerlink" title="熄灯问题"></a>熄灯问题</h2><h1 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h1><h2 id="贪心算法"><a href="#贪心算法" class="headerlink" title="贪心算法"></a>贪心算法</h2><ul><li>问题求解时，总是做出在当前来看最好的选择。即，不保证全局最优，仅是在某种意义上的<strong>局部最优解</strong>。</li><li>自顶向下的计算，将原问题归结为<strong>子问题</strong>。</li></ul><p>f(m,n) = f(m-1,n) + f(m,n-1)</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;栈&quot;&gt;&lt;a href=&quot;#栈&quot; class=&quot;headerlink&quot; title=&quot;栈&quot;&gt;&lt;/a&gt;栈&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/images/algorithm/栈.png&quot; alt=&quot;栈&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;括号匹配问题&quot;&gt;&lt;a href=&quot;#括号匹配问题&quot; class=&quot;headerlink&quot; title=&quot;括号匹配问题&quot;&gt;&lt;/a&gt;括号匹配问题&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/images/algorithm/括号匹配.png&quot; alt=&quot;括号匹配&quot;&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;LEFT = {&lt;span class=&quot;string&quot;&gt;&#39;(&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;[&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;{&#39;&lt;/span&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;RIGHT = {&lt;span class=&quot;string&quot;&gt;&#39;)&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;]&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;}&#39;&lt;/span&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(expr)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    stack = []&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; c &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; expr:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; c &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; LEFT:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            stack.append(c)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;elif&lt;/span&gt; c &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; RIGHT:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;#为空&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;not&lt;/span&gt; stack:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;False&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &amp;lt;= ord(c) - ord(stack[&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;]) &amp;lt;= &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;False&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            stack.pop()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;not&lt;/span&gt; stack&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(match(&lt;span class=&quot;string&quot;&gt;&#39;{{[]}}&#39;&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;TRUE&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;迷宫问题&quot;&gt;&lt;a href=&quot;#迷宫问题&quot; class=&quot;headerlink&quot; title=&quot;迷宫问题&quot;&gt;&lt;/a&gt;迷宫问题&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/images/algorithm/迷宫问题.png&quot; alt=&quot;宫问&quot;&gt;&lt;/p&gt;
&lt;p&gt;最后栈为空说明已经无路可走，如果栈不为空说明找到了一条路径。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Algorithm" scheme="https://unknown.yuzhouwan.com/categories/Algorithm/"/>
    
    
      <category term="Algorithm" scheme="https://unknown.yuzhouwan.com/tags/Algorithm/"/>
    
      <category term="Python" scheme="https://unknown.yuzhouwan.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Mardown</title>
    <link href="https://unknown.yuzhouwan.com/posts/20260/"/>
    <id>https://unknown.yuzhouwan.com/posts/20260/</id>
    <published>2020-01-07T00:02:00.000Z</published>
    <updated>2020-03-03T15:51:12.502Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Markdown语法"><a href="#Markdown语法" class="headerlink" title="Markdown语法"></a>Markdown语法</h1><h2 id="数学表达式"><a href="#数学表达式" class="headerlink" title="数学表达式"></a>数学表达式</h2><p>要启用这个功能，首先到<code>Preference</code>-&gt;<code>Editor</code>中启用。然后使用<script type="math/tex">`符号包裹Tex命令，例如：`$lim_{x \to \infty} \ exp(-x)=0</script>将产生如下的数学表达式：</p><p>$\lim_{x \to \infty} \exp(-x)=0$</p><h2 id="下标"><a href="#下标" class="headerlink" title="下标"></a>下标</h2><p>下标使用<code>~</code>包裹，例如：<code>H~2~O</code>将产生H~2~O, 即水的分子式。</p><h2 id="上标"><a href="#上标" class="headerlink" title="上标"></a>上标</h2><p>上标使用<code>^</code>包裹，例如：<code>y^2^=4</code>将产生表达式y^2^ = 4</p><h2 id="插入表情-happy"><a href="#插入表情-happy" class="headerlink" title="插入表情:happy:"></a>插入表情:happy:</h2><p>使用<code>:happy:</code>输入表情:happy:,使用<code>:sad:</code>输入表情:sad:,使用<code>:cry:</code>输入表情:cry:等。以此类推！</p><h2 id="下划线"><a href="#下划线" class="headerlink" title="下划线"></a>下划线</h2><p>用HTML的语法<code>&lt;u&gt;Underline&lt;/u&gt;</code>将产生下划线<u>Underline</u>.</p><h2 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h2><p>GFM添加了删除文本的语法，这是标准的Markdown语法木有的。使用<code>~~</code>包裹的文本将会具有删除的样式，例如<code>~删除文本~</code>将产生<del>删除文本</del>的样式。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><ul><li>使用`包裹的内容将会以代码样式显示，例如</li></ul><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">使用`printf()`</span><br></pre></td></tr></tbody></table></figure><p>则会产生<code>printf()</code>样式。</p><a id="more"></a><ul><li>输入<code>``或者</code>然后回车，可以输入代码块，并且可以选择代码的语言。例如：</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Class HelloWorld{</span><br><span class="line">System.out.println(<span class="string">"Hello World!"</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>将会产生</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Class HelloWorld{</span><br><span class="line">System.out.println(<span class="string">"Hello World!"</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="强调"><a href="#强调" class="headerlink" title="强调"></a>强调</h2><p>使用两个<code>*</code>号或者两个<code>_</code>包裹的内容将会被强调。例如</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">**使用两个*号强调内容**</span><br><span class="line">__使用两个下划线强调内容__</span><br></pre></td></tr></tbody></table></figure><p>将会输出</p><p><strong>使用两个*号强调内容</strong><br><strong>使用两个下划线强调内容</strong><br>Typroa 推荐使用两个*号。</p><h2 id="斜体"><a href="#斜体" class="headerlink" title="斜体"></a>斜体</h2><p>  在标准的Markdown语法中，*和_包裹的内容会是斜体显示，但是GFM下划线一般用来分隔人名和代码变量名，因此我们推荐是用星号来包裹斜体内容。如果要显示星号，则使用转义：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\*</span><br></pre></td></tr></tbody></table></figure><h2 id="插入URL连接"><a href="#插入URL连接" class="headerlink" title="插入URL连接"></a>插入URL连接</h2><p>使用尖括号包裹的url将产生一个连接，例如：<code>&lt;www.baidu.com&gt;</code>将产生连接:<www.baidu.com>.</www.baidu.com></p><p>如果是标准的url，则会自动产生连接，例如:www.google.com</p><h2 id="目录列表Table-of-Contents（TOC）"><a href="#目录列表Table-of-Contents（TOC）" class="headerlink" title="目录列表Table of Contents（TOC）"></a>目录列表Table of Contents（TOC）</h2><p>输入[toc]然后回车，将会产生一个目录，这个目录抽取了文章的所有标题，自动更新内容。</p><h2 id="水平分割线"><a href="#水平分割线" class="headerlink" title="水平分割线"></a>水平分割线</h2><p>使用<code>***</code>或者<code>---</code>，然后回车，来产生水平分割线。</p><hr><h2 id="标注"><a href="#标注" class="headerlink" title="标注"></a>标注</h2><p>我们可以对某一个词语进行标注。例如</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">某些人用过了才知道[^注释]</span><br><span class="line">[^注释]:Somebody that I used to know.</span><br></pre></td></tr></tbody></table></figure><p>将产生：</p><p>某些人用过了才知道<sup><a href="#fn_注释" id="reffn_注释">注释</a></sup><br><sup><a href="#fn_注释" id="reffn_注释">注释</a></sup>: Somebody that I used to know.</p><p>把鼠标放在<code>注释</code>上，将会有提示内容。</p><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">|姓名|性别|毕业学校|工资|</span><br><span class="line">|:---|:---:|:---:|---:|</span><br><span class="line">|杨洋|男|重庆交通大学|3200|</span><br><span class="line">|峰哥|男|贵州大学|5000|</span><br><span class="line">|小阳|女|北京大学|2000|</span><br></pre></td></tr></tbody></table></figure><p>将产生:</p><div class="table-container"><table><thead><tr><th style="text-align:left">姓名</th><th style="text-align:center">性别</th><th style="text-align:center">毕业学校</th><th style="text-align:right">工资</th></tr></thead><tbody><tr><td style="text-align:left">杨洋</td><td style="text-align:center">男</td><td style="text-align:center">重庆交通大学</td><td style="text-align:right">3200</td></tr><tr><td style="text-align:left">峰哥</td><td style="text-align:center">男</td><td style="text-align:center">贵州大学</td><td style="text-align:right">5000</td></tr><tr><td style="text-align:left">小阳</td><td style="text-align:center">女</td><td style="text-align:center">北京大学</td><td style="text-align:right">2000</td></tr></tbody></table></div><p>其中代码的第二行指定对齐的方式，第一个是左对齐，第二个和第三个是居中，最后一个是右对齐。</p><h2 id="数学表达式块"><a href="#数学表达式块" class="headerlink" title="数学表达式块"></a>数学表达式块</h2><p>输入两个美元符号，然后回车，就可以输入数学表达式块了。例如：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$$\mathbf{V}_1 \times \mathbf{V}_2 =  \begin{vmatrix} \mathbf{i} &amp; \mathbf{j} &amp; \mathbf{k} \\\frac{\partial X}{\partial u} &amp;  \frac{\partial Y}{\partial u} &amp; 0 \\\frac{\partial X}{\partial v} &amp;  \frac{\partial Y}{\partial v} &amp; 0 \\\end{vmatrix}$$</span><br></pre></td></tr></tbody></table></figure><p>将会产生:</p><script type="math/tex; mode=display">\mathbf{V}_1 \times \mathbf{V}_2 =  \begin{vmatrix} \mathbf{i} & \mathbf{j} & \mathbf{k} \\\frac{\partial X}{\partial u} &  \frac{\partial Y}{\partial u} & 0 \\\frac{\partial X}{\partial v} &  \frac{\partial Y}{\partial v} & 0 \\\end{vmatrix}</script><h2 id="任务列表"><a href="#任务列表" class="headerlink" title="任务列表"></a>任务列表</h2><p>使用如下的代码创建任务列表，在[]中输入x表示完成，也可以通过点击选择完成或者没完成。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- [ ] 吃饭</span><br><span class="line">- [ ] 逛街</span><br><span class="line">- [ ] 看电影</span><br></pre></td></tr></tbody></table></figure><ul><li><p>[x] 吃饭</p></li><li><p>[x] 逛街</p></li><li><p>[x] 看电影</p></li><li><p>[x] </p></li></ul><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><p>输入+, -, *,创建无序的列表，使用任意数字开头，创建有序列表，例如：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">**无序的列表**</span><br><span class="line">* tfboys</span><br><span class="line">* 杨洋</span><br><span class="line">* Mr.Smith</span><br></pre></td></tr></tbody></table></figure><p><strong>无序的列表</strong></p><ul><li>tfboys</li><li>杨洋</li><li>Mr.Smith</li></ul><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">**有序的列表**</span><br><span class="line">1. 苹果</span><br><span class="line">6. 香蕉</span><br><span class="line">10. 我都不喜欢</span><br></pre></td></tr></tbody></table></figure><p><strong>有序的列表</strong></p><ol><li>苹果</li><li>香蕉</li><li>我都不喜欢</li></ol><h2 id="块引用"><a href="#块引用" class="headerlink" title="块引用"></a>块引用</h2><p>使用&gt;来插入块引用。例如：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;这是一个块引用！</span><br></pre></td></tr></tbody></table></figure><p>将产生：</p><blockquote><p>这是一个块引用！</p></blockquote><h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><p>使用#表示一级标题，##表示二级标题，以此类推，有6个标题。</p><h1 id="Markdown插件"><a href="#Markdown插件" class="headerlink" title="Markdown插件"></a>Markdown插件</h1><h2 id="画图"><a href="#画图" class="headerlink" title="画图"></a>画图</h2><h3 id="Sequence-Diagrams"><a href="#Sequence-Diagrams" class="headerlink" title="Sequence Diagrams"></a>Sequence Diagrams</h3><ul><li><a href="https://bramp.github.io/js-sequence-diagrams/" target="_blank" rel="noopener">官网链接</a></li></ul><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Andrew-&gt;China: Says Hello</span><br><span class="line">Note right of China: China thinks\nabout it</span><br><span class="line">China--&gt;Andrew: How are you?</span><br><span class="line">Andrew-&gt;&gt;China: I am good thanks!</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Andrew-&gt;China: Says Hello</span><br><span class="line">Note right of China: China thinks\nabout it</span><br><span class="line">China--&gt;Andrew: How are you?</span><br><span class="line">Andrew-&gt;&gt;China: I am good thanks!</span><br></pre></td></tr></tbody></table></figure><h3 id="Flowcharts"><a href="#Flowcharts" class="headerlink" title="Flowcharts"></a>Flowcharts</h3><ul><li><a href="http://flowchart.js.org/" target="_blank" rel="noopener">官网链接</a></li></ul><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">st=&gt;start: Start</span><br><span class="line">op=&gt;operation: Your Operation</span><br><span class="line">cond=&gt;condition: Yes or No?</span><br><span class="line">e=&gt;end</span><br><span class="line"></span><br><span class="line">st-&gt;op-&gt;cond</span><br><span class="line">cond(yes)-&gt;e</span><br><span class="line">cond(no)-&gt;op</span><br></pre></td></tr></tbody></table></figure><div id="flowchart-0" class="flow-chart"></div><h3 id="Mermaid"><a href="#Mermaid" class="headerlink" title="Mermaid"></a>Mermaid</h3><ul><li><a href="https://knsv.github.io/mermaid/#/" target="_blank" rel="noopener">官网链接</a>：支持时序图、流程图、甘特图、 类图、 状态图、派图</li></ul><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">%% Example with selection of syntaxes</span><br><span class="line">gantt</span><br><span class="line">dateFormat  YYYY-MM-DD</span><br><span class="line">title Adding GANTT diagram functionality to mermaid</span><br><span class="line"></span><br><span class="line">section A section</span><br><span class="line">Completed task            :done,    des1, 2014-01-06,2014-01-08</span><br><span class="line">Active task               :active,  des2, 2014-01-09, 3d</span><br><span class="line">Future task               :         des3, after des2, 5d</span><br><span class="line">Future task2               :         des4, after des3, 5d</span><br><span class="line"></span><br><span class="line">section Critical tasks</span><br><span class="line">Completed task in the critical line :crit, done, 2014-01-06,24h</span><br><span class="line">Implement parser and jison          :crit, done, after des1, 2d</span><br><span class="line">Create tests for parser             :crit, active, 3d</span><br><span class="line">Future task in critical line        :crit, 5d</span><br><span class="line">Create tests for renderer           :2d</span><br><span class="line">Add to mermaid                      :1d</span><br><span class="line"></span><br><span class="line">section Documentation</span><br><span class="line">Describe gantt syntax               :active, a1, after des1, 3d</span><br><span class="line">Add gantt diagram to demo page      :after a1  , 20h</span><br><span class="line">Add another diagram to demo page    :doc1, after a1  , 48h</span><br><span class="line"></span><br><span class="line">section Last section</span><br><span class="line">Describe gantt syntax               :after doc1, 3d</span><br><span class="line">Add gantt diagram to demo page      : 20h</span><br><span class="line">Add another diagram to demo page    : 48h</span><br></pre></td></tr></tbody></table></figure><pre class="mermaid">%% Example with selection of syntaxesganttdateFormat  YYYY-MM-DDtitle Adding GANTT diagram functionality to mermaidsection A sectionCompleted task            :done,    des1, 2014-01-06,2014-01-08Active task               :active,  des2, 2014-01-09, 3dFuture task               :         des3, after des2, 5dFuture task2               :         des4, after des3, 5dsection Critical tasksCompleted task in the critical line :crit, done, 2014-01-06,24hImplement parser and jison          :crit, done, after des1, 2dCreate tests for parser             :crit, active, 3dFuture task in critical line        :crit, 5dCreate tests for renderer           :2dAdd to mermaid                      :1dsection DocumentationDescribe gantt syntax               :active, a1, after des1, 3dAdd gantt diagram to demo page      :after a1  , 20hAdd another diagram to demo page    :doc1, after a1  , 48hsection Last sectionDescribe gantt syntax               :after doc1, 3dAdd gantt diagram to demo page      : 20hAdd another diagram to demo page    : 48h</pre><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">classDiagram</span><br><span class="line">Animal <span class="xml"><span class="tag">&lt;<span class="name">|--</span> <span class="attr">Duck</span></span></span></span><br><span class="line"><span class="xml">Animal <span class="tag">&lt;<span class="name">|--</span> <span class="attr">Fish</span></span></span></span><br><span class="line"><span class="xml">Animal <span class="tag">&lt;<span class="name">|--</span> <span class="attr">Zebra</span></span></span></span><br><span class="line"><span class="xml">Animal : +int age</span></span><br><span class="line"><span class="xml">Animal : +String gender</span></span><br><span class="line"><span class="xml">Animal: +isMammal()</span></span><br><span class="line"><span class="xml">Animal: +mate()</span></span><br><span class="line"><span class="xml">class Duck{</span></span><br><span class="line"><span class="xml">+String beakColor</span></span><br><span class="line"><span class="xml">+swim()</span></span><br><span class="line"><span class="xml">+quack()</span></span><br><span class="line"><span class="xml">}</span></span><br><span class="line"><span class="xml">class Fish{</span></span><br><span class="line"><span class="xml">-int sizeInFeet</span></span><br><span class="line"><span class="xml">-canEat()</span></span><br><span class="line"><span class="xml">}</span></span><br><span class="line"><span class="xml">class Zebra{</span></span><br><span class="line"><span class="xml">+bool is_wild</span></span><br><span class="line"><span class="xml">+run()</span></span><br><span class="line"><span class="xml">}</span></span><br></pre></td></tr></tbody></table></figure><pre class="mermaid">classDiagram      Animal &lt;|-- Duck      Animal &lt;|-- Fish      Animal &lt;|-- Zebra      Animal : +int age      Animal : +String gender      Animal: +isMammal()      Animal: +mate()      class Duck{          +String beakColor          +swim()          +quack()      }      class Fish{          -int sizeInFeet          -canEat()      }      class Zebra{          +bool is_wild          +run()      }</pre><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pie</span><br><span class="line"><span class="code">    title Pie Chart</span></span><br><span class="line"><span class="code">    "Dogs" : 386</span></span><br><span class="line"><span class="code">    "Cats" : 85</span></span><br><span class="line"><span class="code">    "Rats" : 150</span></span><br></pre></td></tr></tbody></table></figure><pre class="mermaid">pie    title Pie Chart    "Dogs" : 386    "Cats" : 85    "Rats" : 150</pre><p><script src="https://cdnjs.cloudflare.com/ajax/libs/raphael/2.2.7/raphael.min.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/flowchart/1.6.5/flowchart.min.js"></script><textarea id="flowchart-0-code" style="display: none">st=&gt;start: Startop=&gt;operation: Your Operationcond=&gt;condition: Yes or No?e=&gt;endst-&gt;op-&gt;condcond(yes)-&gt;econd(no)-&gt;op</textarea><textarea id="flowchart-0-options" style="display: none">{"scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12}</textarea><script>  var code = document.getElementById("flowchart-0-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("flowchart-0-options").value));  var diagram = flowchart.parse(code);  diagram.drawSVG("flowchart-0", options);</script></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Markdown语法&quot;&gt;&lt;a href=&quot;#Markdown语法&quot; class=&quot;headerlink&quot; title=&quot;Markdown语法&quot;&gt;&lt;/a&gt;Markdown语法&lt;/h1&gt;&lt;h2 id=&quot;数学表达式&quot;&gt;&lt;a href=&quot;#数学表达式&quot; class=&quot;headerlink&quot; title=&quot;数学表达式&quot;&gt;&lt;/a&gt;数学表达式&lt;/h2&gt;&lt;p&gt;要启用这个功能，首先到&lt;code&gt;Preference&lt;/code&gt;-&amp;gt;&lt;code&gt;Editor&lt;/code&gt;中启用。然后使用&lt;script type=&quot;math/tex&quot;&gt;`符号包裹Tex命令，例如：`$lim_{x \to \infty} \ exp(-x)=0&lt;/script&gt;将产生如下的数学表达式：&lt;/p&gt;
&lt;p&gt;$\lim_{x \to \infty} \exp(-x)=0$&lt;/p&gt;
&lt;h2 id=&quot;下标&quot;&gt;&lt;a href=&quot;#下标&quot; class=&quot;headerlink&quot; title=&quot;下标&quot;&gt;&lt;/a&gt;下标&lt;/h2&gt;&lt;p&gt;下标使用&lt;code&gt;~&lt;/code&gt;包裹，例如：&lt;code&gt;H~2~O&lt;/code&gt;将产生H~2~O, 即水的分子式。&lt;/p&gt;
&lt;h2 id=&quot;上标&quot;&gt;&lt;a href=&quot;#上标&quot; class=&quot;headerlink&quot; title=&quot;上标&quot;&gt;&lt;/a&gt;上标&lt;/h2&gt;&lt;p&gt;上标使用&lt;code&gt;^&lt;/code&gt;包裹，例如：&lt;code&gt;y^2^=4&lt;/code&gt;将产生表达式y^2^ = 4&lt;/p&gt;
&lt;h2 id=&quot;插入表情-happy&quot;&gt;&lt;a href=&quot;#插入表情-happy&quot; class=&quot;headerlink&quot; title=&quot;插入表情:happy:&quot;&gt;&lt;/a&gt;插入表情:happy:&lt;/h2&gt;&lt;p&gt;使用&lt;code&gt;:happy:&lt;/code&gt;输入表情:happy:,使用&lt;code&gt;:sad:&lt;/code&gt;输入表情:sad:,使用&lt;code&gt;:cry:&lt;/code&gt;输入表情&lt;span class=&quot;github-emoji&quot; style=&quot;color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f622.png?v8) center/contain&quot; data-src=&quot;https://github.githubassets.com/images/icons/emoji/unicode/1f622.png?v8&quot;&gt;😢&lt;/span&gt;等。以此类推！&lt;/p&gt;
&lt;h2 id=&quot;下划线&quot;&gt;&lt;a href=&quot;#下划线&quot; class=&quot;headerlink&quot; title=&quot;下划线&quot;&gt;&lt;/a&gt;下划线&lt;/h2&gt;&lt;p&gt;用HTML的语法&lt;code&gt;&amp;lt;u&amp;gt;Underline&amp;lt;/u&amp;gt;&lt;/code&gt;将产生下划线&lt;u&gt;Underline&lt;/u&gt;.&lt;/p&gt;
&lt;h2 id=&quot;删除线&quot;&gt;&lt;a href=&quot;#删除线&quot; class=&quot;headerlink&quot; title=&quot;删除线&quot;&gt;&lt;/a&gt;删除线&lt;/h2&gt;&lt;p&gt;GFM添加了删除文本的语法，这是标准的Markdown语法木有的。使用&lt;code&gt;~~&lt;/code&gt;包裹的文本将会具有删除的样式，例如&lt;code&gt;~删除文本~&lt;/code&gt;将产生&lt;del&gt;删除文本&lt;/del&gt;的样式。&lt;/p&gt;
&lt;h2 id=&quot;代码&quot;&gt;&lt;a href=&quot;#代码&quot; class=&quot;headerlink&quot; title=&quot;代码&quot;&gt;&lt;/a&gt;代码&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;使用`包裹的内容将会以代码样式显示，例如&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;使用`printf()`&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;则会产生&lt;code&gt;printf()&lt;/code&gt;样式。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Tools" scheme="https://unknown.yuzhouwan.com/categories/Tools/"/>
    
    
      <category term="markdown" scheme="https://unknown.yuzhouwan.com/tags/markdown/"/>
    
  </entry>
  
  <entry>
    <title>Git</title>
    <link href="https://unknown.yuzhouwan.com/posts/25246/"/>
    <id>https://unknown.yuzhouwan.com/posts/25246/</id>
    <published>2020-01-06T23:55:00.000Z</published>
    <updated>2020-03-01T13:10:07.629Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Git配置"><a href="#Git配置" class="headerlink" title="Git配置"></a>Git配置</h1><h2 id="config文件"><a href="#config文件" class="headerlink" title="config文件"></a>config文件</h2><ul><li><p>/etc/gitconfig文件：系统中对所有的用户都普遍适用的配置。若使用git config —system选项，读写就是这个文件</p></li><li><p>～/.gitconfig文件：用户目录下的配置文件，只适用于该用户。若使用config —global选项，读写就是这个文件</p></li><li><p>当前Git仓库的git文件（.git/config），这里配置只对当前项目有效，每个配置级别都会覆盖上层的配置，所以.git/config会覆盖/etc/gitconfig里的文件</p><p>在Windows系统上，Git会找主目录下的.gitconfig文件，主目录即$HOME变量指定的目录，一般在C:\Documents and Settings$USER中</p><p>此外，Git还会尝试找寻/etc/gitconfig文件，只不过看当初Git装在什么目录，就以此作为根目录来定位</p></li></ul><h2 id="配置用户信息"><a href="#配置用户信息" class="headerlink" title="配置用户信息"></a>配置用户信息</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --<span class="keyword">global</span> user.name <span class="string">"loen"</span></span><br><span class="line">$ git config --<span class="keyword">global</span> user.email loen@qq.com</span><br></pre></td></tr></tbody></table></figure><p>利用gloabal选项，更改用户主目录下的config文件，以后所有项目都会默认使用这里配置的用户信息</p><p>如果要在某个特定项目里使用其他名字或者邮件，只要去掉—global选项重新配置即可，新的设定保存在当前目录的.git/config 文件里</p><h2 id="查看配置信息"><a href="#查看配置信息" class="headerlink" title="查看配置信息"></a>查看配置信息</h2> <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git config --list</span><br></pre></td></tr></tbody></table></figure><p>有时候会看到重复的变量名，那就说明它们来自不同的配置文件( 比如/etc/gitconfig和~./gitconfig)，不过Git实际采用的是最后一个</p><p>也可以在/etc/gitconfig和~./gitconfig里看到</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vim ~/.gitconfig</span><br></pre></td></tr></tbody></table></figure><h2 id="忽略特殊文件-gitignore"><a href="#忽略特殊文件-gitignore" class="headerlink" title="忽略特殊文件.gitignore"></a>忽略特殊文件.gitignore</h2><p>有时必须把某些文件放入Git工作目录中，但是又不能将其提交，如存储了数据库密码的配置文件。</p><p>只需在Git工作区的根目录下创建一个名为.gitignore的文件，写入过滤规则就可以了</p><p>.gitignore不需要从头写，所有配置文件可以直接在线浏览<a href="https://github.com/github/.gitignore" target="_blank" rel="noopener">https://github.com/github/.gitignore</a></p><p>忽略文件的原则是：</p><p>1.忽略系统自动生成的文件</p><p>2.忽略编译生成的中间文件</p><p>3.忽略用户带有敏感信息的配置文件</p><h1 id="Git工作流程"><a href="#Git工作流程" class="headerlink" title="Git工作流程"></a>Git工作流程</h1><p>Git（Global Information Tracker）是一个开源的分布式版本控制系统，是Linus Torvalds为了帮助管理Linux内核开发而开发的一个开放源代码的软件。</p><p>Git一般的工作流程如下：</p><a id="more"></a><ul><li><p>克隆Git资源作为本地的工作目录</p></li><li><p>在工作目录上添加或者修改文件</p></li><li><p>提交修改</p></li><li><p>可以撤回提交并再次修改</p><p><img data-src="/images/git/git_1.png" alt="屏幕快照 2019-08-18 下午9.21.01"></p></li></ul><h1 id="快速入门Git"><a href="#快速入门Git" class="headerlink" title="快速入门Git"></a>快速入门Git</h1><h2 id="创建版本库：git-init"><a href="#创建版本库：git-init" class="headerlink" title="创建版本库：git init"></a>创建版本库：git init</h2><p>在本地目录中执行git init，创建一个新的Git仓库FirstGit。.git用于跟踪管理版本库。</p><p><img data-src="/images/git/git_0.png" alt="屏幕快照 2019-08-18 下午9.34.53"></p><h2 id="添加到暂存区：git-add"><a href="#添加到暂存区：git-add" class="headerlink" title="添加到暂存区：git add"></a>添加到暂存区：git add</h2><p>在FirstGit目录下添加文件README.md</p><p><img data-src="/images/git/git_2.png" alt="屏幕快照 2019-08-18 下午9.43.56"></p><ul><li>git status用于查看项目的当前状态，-s表示查看简要信息</li><li>git add命令将其添加到暂存区，也可以使用git add . 用于添加当前目录下的所有文件</li></ul><p>改动README.md，再次执行git status</p><p><img data-src="/images/git/git_3.png" alt="屏幕快照 2019-08-18 下午9.50.02"></p><ul><li>“AM”状态表示这个文件在被添加到暂存区后进行了修改</li><li>再次执行git add命令将其添加到暂存区（缓存）</li></ul><p>再次改动README.md</p><p><img data-src="/images/git/git_4.png" alt="屏幕快照 2019-08-18 下午10.04.07"></p><p><img data-src="/images/git/git_5.png" alt="屏幕快照 2019-08-18 下午10.04.47"></p><ul><li>git diff：查看写入缓存与已修改但尚未写入缓存的区别</li><li>git diff —cached：查看已缓存的改动</li><li>git diff HEAD：查看已缓存的与未缓存的所有改动</li><li>git diff —stat：显示摘要而非整个diff</li></ul><h2 id="向仓库提交代码：git-commit"><a href="#向仓库提交代码：git-commit" class="headerlink" title="向仓库提交代码：git commit"></a>向仓库提交代码：git commit</h2><p>git add将快照内容写入缓存区，git commit则是将缓存区的内容添加到远程仓库中</p><p><img data-src="/images/git/git_6.png" alt="屏幕快照 2019-08-18 下午10.18.43"></p><p><img data-src="/images/git/git_7.png" alt="屏幕快照 2019-08-18 下午10.22.09"></p><ul><li>-m 选项表示提交的注释</li><li>再次执行git status，输出表示在上次提交之后，没有作出任何更改</li><li>也可以利用git commit -am “lala”来替代git add  . 与 git commit -m “lala”</li></ul><h2 id="取消已缓存的内容：git-reset-HEAD"><a href="#取消已缓存的内容：git-reset-HEAD" class="headerlink" title="取消已缓存的内容：git reset HEAD"></a>取消已缓存的内容：git reset HEAD</h2><p><img data-src="/images/git/git_8.png" alt="屏幕快照 2019-08-18 下午10.47.03"></p><p>可以看到git add后将README文件添加到了缓存区，利用git reset命令取消了README的缓存，HEAD表示指向的版本为当前版本</p><h2 id="删除文件：git-rm"><a href="#删除文件：git-rm" class="headerlink" title="删除文件：git rm"></a>删除文件：git rm</h2><ul><li>git rm <file>：从版本库中删除文件</file></li><li>git rm -f <file>：从暂存区中删除文件（必须进行强制删除）</file></li><li>git rm —cached <file>：从暂存区中删除文件，保留工作区中的文件</file></li><li>git rm -r test：递归删除test目录下的所有目录与文件</li></ul><h2 id="恢复文件：git-checkout"><a href="#恢复文件：git-checkout" class="headerlink" title="恢复文件：git checkout"></a>恢复文件：git checkout</h2><p>git checkout —file：工作区的文件替换为版本库的文件</p><h2 id="移动-重命名：git-mv"><a href="#移动-重命名：git-mv" class="headerlink" title="移动/重命名：git mv"></a>移动/重命名：git mv</h2><p>git mv ：用于移动或者重命名一个文件、目录</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git add README</span><br><span class="line">$ git mv README README.md </span><br><span class="line">$ ls</span><br><span class="line">README.md</span><br></pre></td></tr></tbody></table></figure><h1 id="远程仓库GitHub"><a href="#远程仓库GitHub" class="headerlink" title="远程仓库GitHub"></a>远程仓库GitHub</h1><p>GitHub是一个面向开源及私有软件项目的托管平台，仅支持git作为唯一的版本库格式进行托管。</p><h2 id="关联远程仓库"><a href="#关联远程仓库" class="headerlink" title="关联远程仓库"></a>关联远程仓库</h2><p>本地创建新的仓库并与GitHub进行关联</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br><span class="line">git add README.md</span><br><span class="line">git commit -m <span class="string">"first commit"</span></span><br><span class="line">git remote add origin https://github.com/gracekoo/gitlearn.git</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></tbody></table></figure><p>或者将本地已有仓库与之关联</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin https://github.com/gracekoo/gitlearn.git</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></tbody></table></figure><h2 id="克隆远程仓库"><a href="#克隆远程仓库" class="headerlink" title="克隆远程仓库"></a>克隆远程仓库</h2><p>git clone：拷贝一个git仓库到本地，还可以在命令末尾加上自己想要的名字</p> <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git clone https://github.com/gracekoo/gitlearn.git mygit</span><br></pre></td></tr></tbody></table></figure><h2 id="更新数据：git-fetch"><a href="#更新数据：git-fetch" class="headerlink" title="更新数据：git fetch"></a>更新数据：git fetch</h2><p>git fetch：从远程获取最新版本到本地，不会自动merge</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout issue12 </span><br><span class="line">$ git fetch origin issue12 </span><br><span class="line">$ git log -p issue12..origin/issue12</span><br><span class="line">$ git merge origin/issue12</span><br></pre></td></tr></tbody></table></figure><p>(1) 换到issue12分支</p><p>(2)从远程的origin的issue12分支下载最新版本到issue12分支上</p><p>(3)比较本地issue12分支和origin/issue12分支的差别</p><p>(4)将origin/issue12分支合并到issue12</p><h2 id="更新数据：git-pull"><a href="#更新数据：git-pull" class="headerlink" title="更新数据：git pull"></a>更新数据：git pull</h2><p>git pull：从远程获取最新版本并merge到本地</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout issue12</span><br><span class="line">$ git pull origin issue12 // git fetch + git merge</span><br></pre></td></tr></tbody></table></figure><h1 id="Git分支管理"><a href="#Git分支管理" class="headerlink" title="Git分支管理"></a>Git分支管理</h1><h2 id="分支原理"><a href="#分支原理" class="headerlink" title="分支原理"></a>分支原理</h2><ul><li><p>执行git init时，缺省情况下Git会创建“master”分支</p></li><li><p>master指向提交，HEAD指向当前分支</p></li><li><p>每次提交，master分支都会向前移动一步。当创建新的分支，如dev时，Git新建一个指针dev，指向与master相同的<strong>提交</strong>，再把HEAD指向dev，表示现在分支在dev上</p><p><img data-src="/images/git/git_9.jpeg" alt="WechatIMG265"></p></li><li><p>从现在开始，对工作区的修改和提交就是针对dev分支了，比如一次新提交后，dev指针向前移动一步，而master指针不变</p><p><img data-src="/images/git/git_10.jpeg" alt="WechatIMG263"></p></li><li><p>在dev上完成相应的开发后，将其合并到master分支上</p><p><img data-src="/images/git/git_11.jpeg" alt="WechatIMG264"></p></li></ul><h2 id="基础命令"><a href="#基础命令" class="headerlink" title="基础命令"></a>基础命令</h2><p>使用分支意味着从开发主线上分离开，然后在不影响主线的同时继续工作</p><ul><li>创建新分支new_branch</li></ul><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git branch new_branch</span><br></pre></td></tr></tbody></table></figure><ul><li>切换到新分支new_branch：当切换到新分支时，Git会用该分支的最后提交的快照替换工作目录的内容</li></ul><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout new_branch //切换到new_branch</span><br><span class="line">$ git checkout -b new_branch //创建并切换到new_branch</span><br></pre></td></tr></tbody></table></figure><ul><li>合并分支</li></ul><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git merge</span><br></pre></td></tr></tbody></table></figure><p>通常Git在合并分支时会用Fast Forward模式，这样删除分支后，会丢失分支信息。</p><p>因此在合并分支时可以使用—no-ff，强制禁用Fast Forward模式，这样Git在合并时会生成一个新的commit，然后就可以在历史分支上看到分支信息。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git merge --no-ff -m <span class="string">"merge with no-ff"</span> dev2</span><br><span class="line">$ git log --graph --pretty=oneline --abbrev-commit</span><br></pre></td></tr></tbody></table></figure><ul><li>删除分支</li></ul><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git branch -d new_branch</span><br></pre></td></tr></tbody></table></figure><ul><li>查看分支</li></ul><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git branch </span><br><span class="line">$ git branch -r //查看远程分支</span><br><span class="line">$ git branch -a //查看远程和本地的所有分支</span><br></pre></td></tr></tbody></table></figure><h2 id="解决冲突"><a href="#解决冲突" class="headerlink" title="解决冲突"></a>解决冲突</h2><p>在两个分支中修改了同一个文件的同一行代码，在合并时就会发生冲突，使用git status可以显示存在冲突的文件和文件名</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git status</span><br></pre></td></tr></tbody></table></figure><p>当发生冲突时，必须手动解决冲突，并再次提交</p><p>利用带参数的git log也可以看到合并后的情况</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git log --graph --pretty=oneline --abbrev-commit</span><br></pre></td></tr></tbody></table></figure><p>实际开发中，应该按照以下基本原则来进行分支管理</p><ul><li>master分支应该是非常稳定的，也就是仅用来发布新版本，平时不用于开发</li><li>团队成员在dev上开发，时不时的往dev上进行合并，等到发布新版本时，再将dev往master上合并</li></ul><h2 id="查看远程库信息"><a href="#查看远程库信息" class="headerlink" title="查看远程库信息"></a>查看远程库信息</h2><p>当从远程仓库克隆时，实际上Git自动把本地的master分支和远程的master分支对应起来了</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ git remote //查看远程库信息，远程仓库默认名字是origin</span><br><span class="line">origin</span><br><span class="line">$ git remote -v //更详细的信息</span><br><span class="line">origin</span><br><span class="line">https://github.com/asdf2014/algorithm.git</span><br></pre></td></tr></tbody></table></figure><h2 id="推送分支"><a href="#推送分支" class="headerlink" title="推送分支"></a>推送分支</h2><p>将本地的master分支推送到远程库origin</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push origin master</span><br></pre></td></tr></tbody></table></figure><p>将本地的dev2分支推送到远程库origin</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push origin dev2</span><br></pre></td></tr></tbody></table></figure><h2 id="拉取分支"><a href="#拉取分支" class="headerlink" title="拉取分支"></a>拉取分支</h2><p>将origin最新的提交拉取下来</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git pull</span><br></pre></td></tr></tbody></table></figure><p>关联本地dev分支与远程origin/dev分支</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git branch --set-upstream dev origin/dev</span><br></pre></td></tr></tbody></table></figure><h1 id="回退与撤销"><a href="#回退与撤销" class="headerlink" title="回退与撤销"></a>回退与撤销</h1><h2 id="撤销修改：git-checkout-file"><a href="#撤销修改：git-checkout-file" class="headerlink" title="撤销修改：git checkout - - file"></a>撤销修改：git checkout - - file</h2><p>把该文件在工作区的修改全部撤销，如果文件修改后还没有放到暂存区，撤销修改就是用版本库里的替代工作区内的。如果文件已经被添加到暂存区，那么撤销修改就是用暂存区里的文件替代当前文件。</p><p>总之就是让这个文件回到最近一次git commit或git add时的状态。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -- file</span><br></pre></td></tr></tbody></table></figure><h2 id="历史记录：git-log"><a href="#历史记录：git-log" class="headerlink" title="历史记录：git log"></a>历史记录：git log</h2><p>git log显示从最近到最远的提交日志。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git log</span><br></pre></td></tr></tbody></table></figure><p>显示简要的commit历史记录。commit ID用SHA1计算出的16进制表示。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git log --pretty=online</span><br></pre></td></tr></tbody></table></figure><h2 id="版本回退：git-reset"><a href="#版本回退：git-reset" class="headerlink" title="版本回退：git reset"></a>版本回退：git reset</h2><p>利用git log来查看当前的历史记录</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git log --pretty=online</span><br></pre></td></tr></tbody></table></figure><p>使用git reset回退到上一个版本</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard HEAD^</span><br></pre></td></tr></tbody></table></figure><p>Git中，用HEAD表示当前的版本，上一个版本就是HEAD^，上上个版本就是HEAD^^,前100个版本可以用HEAD~100表示。</p><p>如果回退失误，想要改回原来的版本，就必须通过git log命令找到版本的commit id</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git log --pretty=online</span><br></pre></td></tr></tbody></table></figure><p>假如ID为asdhasdjfnaslkgnsd，利用git reset命令进行版本回退</p> <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard asdhasdjfnaslkgnsd</span><br></pre></td></tr></tbody></table></figure><p>git reflog命令用于显示整个本地库的commit，包括所有branch 的commit，甚至包括已经撤销的commit，只要HEAD发生了变化，就会在reflog中看到。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reflog</span><br></pre></td></tr></tbody></table></figure><h1 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h1><h2 id="创建标签：git-tag"><a href="#创建标签：git-tag" class="headerlink" title="创建标签：git tag"></a>创建标签：git tag</h2><p>标签是默认打在最新提交的commit id上的</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ git branch</span><br><span class="line">* dev</span><br><span class="line">  master</span><br><span class="line">$ git checkout master</span><br><span class="line">Switch to branch <span class="string">'master'</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git tag v1<span class="number">.0</span></span><br></pre></td></tr></tbody></table></figure><p>也可以直接在某个commit id上打标签</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ git log --pretty=online --abbrev-commit //找到历史的commit id</span><br><span class="line">a923sad1 You <span class="keyword">is</span> pig</span><br><span class="line">a923sad2 You <span class="keyword">is</span> cat</span><br><span class="line">$ git tag v0<span class="number">.8</span> a923sad2 //给You <span class="keyword">is</span> cat打标签</span><br><span class="line">$ git tag //查看当前标签</span><br><span class="line">v0<span class="number">.8</span></span><br></pre></td></tr></tbody></table></figure><p>也可以创建带有说明的标签：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git tag -a v0<span class="number">.9</span> -m <span class="string">"This is v0.9"</span></span><br></pre></td></tr></tbody></table></figure><h2 id="查看标签"><a href="#查看标签" class="headerlink" title="查看标签"></a>查看标签</h2><p>可以使用git tag来查看所有的标签</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git tag</span><br><span class="line">v1<span class="number">.0</span></span><br></pre></td></tr></tbody></table></figure><p>查看标签信息</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git show v0<span class="number">.9</span></span><br></pre></td></tr></tbody></table></figure><h2 id="删除标签"><a href="#删除标签" class="headerlink" title="删除标签"></a>删除标签</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git tag -d v0<span class="number">.9</span></span><br></pre></td></tr></tbody></table></figure><h2 id="推送标签到远程"><a href="#推送标签到远程" class="headerlink" title="推送标签到远程"></a>推送标签到远程</h2><p>推送某个标签到远程</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push origin v1<span class="number">.0</span></span><br></pre></td></tr></tbody></table></figure><p>一次性推送全部尚未送到远程的本地标签</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push origin --tags</span><br></pre></td></tr></tbody></table></figure><p>如果标签已经推送到远程，要删除远程标签，先从本地删除</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git tag -d v0<span class="number">.9</span></span><br></pre></td></tr></tbody></table></figure><p>然后从远程删除</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push origin :refs/tags/v0<span class="number">.9</span> To https://github.com/liming/gitlearn.git</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Git配置&quot;&gt;&lt;a href=&quot;#Git配置&quot; class=&quot;headerlink&quot; title=&quot;Git配置&quot;&gt;&lt;/a&gt;Git配置&lt;/h1&gt;&lt;h2 id=&quot;config文件&quot;&gt;&lt;a href=&quot;#config文件&quot; class=&quot;headerlink&quot; title=&quot;config文件&quot;&gt;&lt;/a&gt;config文件&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;/etc/gitconfig文件：系统中对所有的用户都普遍适用的配置。若使用git config —system选项，读写就是这个文件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;～/.gitconfig文件：用户目录下的配置文件，只适用于该用户。若使用config —global选项，读写就是这个文件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;当前Git仓库的git文件（.git/config），这里配置只对当前项目有效，每个配置级别都会覆盖上层的配置，所以.git/config会覆盖/etc/gitconfig里的文件&lt;/p&gt;
&lt;p&gt;在Windows系统上，Git会找主目录下的.gitconfig文件，主目录即$HOME变量指定的目录，一般在C:\Documents and Settings$USER中&lt;/p&gt;
&lt;p&gt;此外，Git还会尝试找寻/etc/gitconfig文件，只不过看当初Git装在什么目录，就以此作为根目录来定位&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;配置用户信息&quot;&gt;&lt;a href=&quot;#配置用户信息&quot; class=&quot;headerlink&quot; title=&quot;配置用户信息&quot;&gt;&lt;/a&gt;配置用户信息&lt;/h2&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ git config --&lt;span class=&quot;keyword&quot;&gt;global&lt;/span&gt; user.name &lt;span class=&quot;string&quot;&gt;&quot;loen&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ git config --&lt;span class=&quot;keyword&quot;&gt;global&lt;/span&gt; user.email loen@qq.com&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;利用gloabal选项，更改用户主目录下的config文件，以后所有项目都会默认使用这里配置的用户信息&lt;/p&gt;
&lt;p&gt;如果要在某个特定项目里使用其他名字或者邮件，只要去掉—global选项重新配置即可，新的设定保存在当前目录的.git/config 文件里&lt;/p&gt;
&lt;h2 id=&quot;查看配置信息&quot;&gt;&lt;a href=&quot;#查看配置信息&quot; class=&quot;headerlink&quot; title=&quot;查看配置信息&quot;&gt;&lt;/a&gt;查看配置信息&lt;/h2&gt; &lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ git config --list&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;有时候会看到重复的变量名，那就说明它们来自不同的配置文件( 比如/etc/gitconfig和~./gitconfig)，不过Git实际采用的是最后一个&lt;/p&gt;
&lt;p&gt;也可以在/etc/gitconfig和~./gitconfig里看到&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ vim ~/.gitconfig&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;忽略特殊文件-gitignore&quot;&gt;&lt;a href=&quot;#忽略特殊文件-gitignore&quot; class=&quot;headerlink&quot; title=&quot;忽略特殊文件.gitignore&quot;&gt;&lt;/a&gt;忽略特殊文件.gitignore&lt;/h2&gt;&lt;p&gt;有时必须把某些文件放入Git工作目录中，但是又不能将其提交，如存储了数据库密码的配置文件。&lt;/p&gt;
&lt;p&gt;只需在Git工作区的根目录下创建一个名为.gitignore的文件，写入过滤规则就可以了&lt;/p&gt;
&lt;p&gt;.gitignore不需要从头写，所有配置文件可以直接在线浏览&lt;a href=&quot;https://github.com/github/.gitignore&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/github/.gitignore&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;忽略文件的原则是：&lt;/p&gt;
&lt;p&gt;1.忽略系统自动生成的文件&lt;/p&gt;
&lt;p&gt;2.忽略编译生成的中间文件&lt;/p&gt;
&lt;p&gt;3.忽略用户带有敏感信息的配置文件&lt;/p&gt;
&lt;h1 id=&quot;Git工作流程&quot;&gt;&lt;a href=&quot;#Git工作流程&quot; class=&quot;headerlink&quot; title=&quot;Git工作流程&quot;&gt;&lt;/a&gt;Git工作流程&lt;/h1&gt;&lt;p&gt;Git（Global Information Tracker）是一个开源的分布式版本控制系统，是Linus Torvalds为了帮助管理Linux内核开发而开发的一个开放源代码的软件。&lt;/p&gt;
&lt;p&gt;Git一般的工作流程如下：&lt;/p&gt;
    
    </summary>
    
    
      <category term="Tools" scheme="https://unknown.yuzhouwan.com/categories/Tools/"/>
    
    
      <category term="Git" scheme="https://unknown.yuzhouwan.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>OpenCV-Base</title>
    <link href="https://unknown.yuzhouwan.com/posts/16645/"/>
    <id>https://unknown.yuzhouwan.com/posts/16645/</id>
    <published>2020-01-01T00:06:00.000Z</published>
    <updated>2020-05-28T03:11:39.004Z</updated>
    
    <content type="html"><![CDATA[<h1 id="OpenCV的安装"><a href="#OpenCV的安装" class="headerlink" title="OpenCV的安装"></a>OpenCV的安装</h1><p>国内一些pip的镜像源：</p><p>阿里云 <a href="https://mirrors.aliyun.com/pypi/simple/" target="_blank" rel="noopener">https://mirrors.aliyun.com/pypi/simple/</a><br>中国科技大学 <a href="https://pypi.mirrors.ustc.edu.cn/simple/" target="_blank" rel="noopener">https://pypi.mirrors.ustc.edu.cn/simple/</a><br>豆瓣(douban) <a href="http://pypi.douban.com/simple/" target="_blank" rel="noopener">http://pypi.douban.com/simple/</a><br>清华大学 <a href="https://pypi.tuna.tsinghua.edu.cn/simple/" target="_blank" rel="noopener">https://pypi.tuna.tsinghua.edu.cn/simple/</a><br>中国科学技术大学 <a href="http://pypi.mirrors.ustc.edu.cn/simple/" target="_blank" rel="noopener">http://pypi.mirrors.ustc.edu.cn/simple/</a></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(base)$ conda create -n py365 python=<span class="number">3.6</span><span class="number">.5</span>   <span class="comment"># anaconda中创建python版本为3.7.3的虚拟环境</span></span><br><span class="line">(base)$ conda activate py365                 <span class="comment"># 激活该环境</span></span><br><span class="line">pip install opencv-python==<span class="number">3.4</span><span class="number">.1</span><span class="number">.15</span> -i http://pypi.douban.com/simple --trusted-host pypi.douban.com                              <span class="comment"># 安装opencv-python 3.4.1.15，同时还会加载相应的依赖库</span></span><br></pre></td></tr></tbody></table></figure><p>内容完善中……</p><a id="more"></a><h1 id="图像金字塔"><a href="#图像金字塔" class="headerlink" title="图像金字塔"></a>图像金字塔</h1><h2 id="高斯金字塔"><a href="#高斯金字塔" class="headerlink" title="高斯金字塔"></a>高斯金字塔</h2><p><img data-src="/images/opencv/Pyramid_1.png" alt="Pyramid_1"></p><p><strong>高斯金字塔：向下采样法（缩小）</strong></p><p><img data-src="/images/opencv/Pyramid_2.png" alt="Pyramid_2"></p><p>实例：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">img = cv2.imread(<span class="string">"A.png"</span>)</span><br><span class="line">down = cv2.pyrDown(img)</span><br><span class="line">cv2.imshow(<span class="string">"down"</span>,down)</span><br></pre></td></tr></tbody></table></figure><p><strong>高斯金字塔：向上采样法（放大）</strong></p><p><img data-src="/images/opencv/Pyramid_3.png" alt="Pyramid_3"></p><p>实例：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">img = cv2.imread(<span class="string">"A.png"</span>)</span><br><span class="line">up = cv2.pyrUp(img)</span><br><span class="line">cv2.imshow(<span class="string">"up"</span>,up)</span><br></pre></td></tr></tbody></table></figure><h2 id="拉普拉斯金字塔"><a href="#拉普拉斯金字塔" class="headerlink" title="拉普拉斯金字塔"></a>拉普拉斯金字塔</h2><p><img data-src="/images/opencv/Pyramid_4.png" alt="Pyramid_4"></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">down=cv2.pyrDown(img)</span><br><span class="line">down_up=cv2.pyrUp(down)</span><br><span class="line">l_img=img-down_up</span><br><span class="line">cv2.imshow(l_img,<span class="string">'l_1'</span>)</span><br></pre></td></tr></tbody></table></figure><h1 id="轮廓检测"><a href="#轮廓检测" class="headerlink" title="轮廓检测"></a>轮廓检测</h1><p><strong>cv2.findContours(img,mode,method)</strong></p><p>mode:轮廓检索模式</p><ul><li>RETR_EXTERNAL ：只检索最外面的轮廓；</li><li>RETR_LIST：检索所有的轮廓，并将其保存到一条链表当中；</li><li>RETR_CCOMP：检索所有的轮廓，并将他们组织为两层：顶层是各部分的外部边界，第二层是空洞的边界;</li><li>RETR_TREE：检索所有的轮廓，并重构嵌套轮廓的整个层次;</li></ul><p>method:轮廓逼近方法</p><ul><li>CHAIN_APPROX_NONE：以Freeman链码的方式输出轮廓，所有其他方法输出多边形（顶点的序列）。</li><li>CHAIN_APPROX_SIMPLE:压缩水平的、垂直的和斜的部分，也就是，函数只保留他们的终点部分。</li></ul><p>为了得到更高的准确率，使用二值图像。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">img = cv2.imread(<span class="string">'contours.png'</span>)</span><br><span class="line">gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)</span><br><span class="line">ret, thresh = cv2.threshold(gray, <span class="number">127</span>, <span class="number">255</span>, cv2.THRESH_BINARY)</span><br><span class="line">cv2.imshow(thresh,<span class="string">'thresh'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># binary 输出的二值图；contours 边缘；hierarchy 层次结构</span></span><br><span class="line">binary, contours, hierarchy = cv2.findContours(thresh, cv2.RETR_TREE, cv2.CHAIN_APPROX_NONE)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制轮廓：参数分别为，轮廓，轮廓索引（-1表示所有轮廓），颜色，线条厚度</span></span><br><span class="line">draw_img = img.copy()</span><br><span class="line">res = cv2.drawContours(draw_img, contours, <span class="number">-1</span>, (<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>), <span class="number">2</span>)</span><br><span class="line">cv_show(res,<span class="string">'res'</span>)</span><br></pre></td></tr></tbody></table></figure><h2 id="轮廓特征"><a href="#轮廓特征" class="headerlink" title="轮廓特征"></a>轮廓特征</h2><h3 id="炬"><a href="#炬" class="headerlink" title="炬"></a>炬</h3><h3 id="面积"><a href="#面积" class="headerlink" title="面积"></a>面积</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cnt = contours[<span class="number">0</span>]</span><br><span class="line"><span class="comment">#面积</span></span><br><span class="line">cv2.contourArea(cnt)</span><br></pre></td></tr></tbody></table></figure><h3 id="周长"><a href="#周长" class="headerlink" title="周长"></a>周长</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cnt = contours[<span class="number">0</span>]</span><br><span class="line">cv2.arcLength(cnt,<span class="literal">True</span>) <span class="comment"># True表示闭合</span></span><br></pre></td></tr></tbody></table></figure><h3 id="轮廓近似"><a href="#轮廓近似" class="headerlink" title="轮廓近似"></a>轮廓近似</h3><p><img data-src="/images/opencv/contours3.png" alt="contours3"></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 找轮廓</span></span><br><span class="line">img = cv2.imread(<span class="string">'contours2.png'</span>)</span><br><span class="line"></span><br><span class="line">gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)</span><br><span class="line">ret, thresh = cv2.threshold(gray, <span class="number">127</span>, <span class="number">255</span>, cv2.THRESH_BINARY)</span><br><span class="line">binary, contours, hierarchy = cv2.findContours(thresh, cv2.RETR_TREE, cv2.CHAIN_APPROX_NONE)</span><br><span class="line">cnt = contours[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">draw_img = img.copy()</span><br><span class="line">res = cv2.drawContours(draw_img, [cnt], <span class="number">-1</span>, (<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>), <span class="number">2</span>)</span><br><span class="line">cv_show(res,<span class="string">'res'</span>)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">epsilon = <span class="number">0.15</span>*cv2.arcLength(cnt,<span class="literal">True</span>)  <span class="comment"># epsilon一般按照周长的百分比进行设置，越小，轮廓近似值越大</span></span><br><span class="line">approx = cv2.approxPolyDP(cnt,epsilon,<span class="literal">True</span>) </span><br><span class="line"></span><br><span class="line">draw_img = img.copy()</span><br><span class="line">res = cv2.drawContours(draw_img, [approx], <span class="number">-1</span>, (<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>), <span class="number">2</span>)</span><br><span class="line">cv_show(res,<span class="string">'res'</span>)</span><br></pre></td></tr></tbody></table></figure><h3 id="边界矩形"><a href="#边界矩形" class="headerlink" title="边界矩形"></a>边界矩形</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">img = cv2.imread(<span class="string">'contours.png'</span>)</span><br><span class="line"></span><br><span class="line">gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)</span><br><span class="line">ret, thresh = cv2.threshold(gray, <span class="number">127</span>, <span class="number">255</span>, cv2.THRESH_BINARY)</span><br><span class="line">binary, contours, hierarchy = cv2.findContours(thresh, cv2.RETR_TREE, cv2.CHAIN_APPROX_NONE)</span><br><span class="line">cnt = contours[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">x,y,w,h = cv2.boundingRect(cnt)</span><br><span class="line">img = cv2.rectangle(img,(x,y),(x+w,y+h),(<span class="number">0</span>,<span class="number">255</span>,<span class="number">0</span>),<span class="number">2</span>)</span><br><span class="line">cv_show(img,<span class="string">'img'</span>)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">area = cv2.contourArea(cnt)</span><br><span class="line">x, y, w, h = cv2.boundingRect(cnt)</span><br><span class="line">rect_area = w * h</span><br><span class="line">extent = float(area) / rect_area</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'轮廓面积与边界矩形比'</span>,extent)</span><br></pre></td></tr></tbody></table></figure><h3 id="最小外接圆"><a href="#最小外接圆" class="headerlink" title="最小外接圆"></a>最小外接圆</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(x,y),radius = cv2.minEnclosingCircle(cnt) </span><br><span class="line">center = (int(x),int(y)) </span><br><span class="line">radius = int(radius) </span><br><span class="line">img = cv2.circle(img,center,radius,(<span class="number">0</span>,<span class="number">255</span>,<span class="number">0</span>),<span class="number">2</span>)</span><br><span class="line">cv_show(img,<span class="string">'img'</span>)</span><br></pre></td></tr></tbody></table></figure><h2 id="轮廓的性质"><a href="#轮廓的性质" class="headerlink" title="轮廓的性质"></a>轮廓的性质</h2><h3 id="Solidty"><a href="#Solidty" class="headerlink" title="Solidty"></a>Solidty</h3><h3 id="Equivalent-Diameter"><a href="#Equivalent-Diameter" class="headerlink" title="Equivalent Diameter"></a>Equivalent Diameter</h3><h3 id="方向"><a href="#方向" class="headerlink" title="方向"></a>方向</h3><h3 id="掩模和像素点"><a href="#掩模和像素点" class="headerlink" title="掩模和像素点"></a>掩模和像素点</h3><h3 id="平均颜色和平均灰度"><a href="#平均颜色和平均灰度" class="headerlink" title="平均颜色和平均灰度"></a>平均颜色和平均灰度</h3><h3 id="极点"><a href="#极点" class="headerlink" title="极点"></a>极点</h3><h1 id="模版匹配"><a href="#模版匹配" class="headerlink" title="模版匹配"></a>模版匹配</h1><p>模版匹配和卷积原理很像，模版在原图上从原点开始滑动，计算模版与（图像被模版覆盖的地方）的差别程度，这个差别程度的计算方法在opencv里有6种。然后将每次计算的结果放入一个矩阵里，作为结果输出。假如原图形是A✖️B大小，而模版是a✖️b的大小，则输出结果的矩阵是（A-a+1）✖️（B-b+1）的大小。</p><ul><li>TM_SQDIFF：计算平方差，计算出来的值越小，越相关</li><li>TM_CCORR：计算相关性，计算出来的值越大，越相关</li><li>TM_CCOEFF：计算相关系数，计算出来的值越大，越相关</li><li>TM_SQDIFF_NORMED：计算归一化平方差，计算出来的值越接近0，越相关</li><li><p>TM_CCORR_NORMED：计算归一化相关性，计算出来的值越接近1，越相关</p></li><li><p>TM_CCOEFF_NORMED：计算归一化相关系数，计算出来的值越接近1，越相关</p></li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">img = cv2.imread(<span class="string">"lena.jpg"</span>,<span class="number">0</span>)</span><br><span class="line">h,w = img.shape[:<span class="number">2</span>][::<span class="number">-1</span>]</span><br><span class="line">template = cv2.imread(<span class="string">"face"</span>,<span class="number">0</span>)</span><br><span class="line">methods = [<span class="string">'cv2.TM_CCOEFF'</span>,<span class="string">'cv2.TM_CCORR_NORME'</span>,<span class="string">'cv2.TM_CCORR'</span>,<span class="string">'cv2.TM_CCORR_NORMED'</span>,<span class="string">'cv2.TM_SQDIFF'</span>,<span class="string">'cv2.TM_SQDIFF_NORMED'</span>]</span><br><span class="line">res = cv2.matchTemplate(img,template,<span class="number">1</span>) <span class="comment"># 模版匹配</span></span><br><span class="line">min_val,max_val,min_loc,max_loc = cv2.minMacLoc(res) <span class="comment"># 返回最小最大值的坐标和位置</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> meth <span class="keyword">in</span> methods:</span><br><span class="line">  img2 = img.copy()</span><br><span class="line">  </span><br><span class="line">  <span class="comment"># 匹配方法的真值</span></span><br><span class="line">  method = eval(meth)</span><br><span class="line">  res = cv2.matchTemplate(img,template,<span class="number">1</span>) <span class="comment"># 模版匹配</span></span><br><span class="line">  min_val,max_val,min_loc,max_loc = cv2.minMacLoc(res) <span class="comment"># 返回最小最大值的坐标和位置</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment"># 如果是平方差匹配TM_SQDIFF或者归一化平方差匹配TM_SQDIFF_NORMED，取最小值</span></span><br><span class="line">  <span class="keyword">if</span> method <span class="keyword">in</span> [cv2.TM_SQDIFF,cv2.TM_SQDIFF_NORMED]:</span><br><span class="line">    top_left = min_loc</span><br><span class="line">  <span class="keyword">else</span>:</span><br><span class="line">    top_left = max_loc</span><br><span class="line">  bottom_right = (top_left[<span class="number">0</span>]+w,top_left[<span class="number">1</span>]+h)</span><br><span class="line">  </span><br><span class="line">  cv2.rectangle(img2,top_left,bottom_right,<span class="number">255</span>,<span class="number">2</span>)</span><br><span class="line">  </span><br><span class="line">  plt.subplot(<span class="number">121</span>),plt.imshow(res,cmap=<span class="string">'gray'</span>)</span><br><span class="line">  plt.sticks([]),plt.yticks([])</span><br><span class="line">  plt.subplot(<span class="number">122</span>),plt.imshow(img2,cmap=<span class="string">'gray'</span>)</span><br><span class="line">  plt.sticks([]),plt.yticks([])</span><br><span class="line">  plt.subtitle(meth)</span><br><span class="line">  plt.show()</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 匹配多个对象</span></span><br><span class="line">img = cv2.imread(<span class="string">"lena.jpg"</span>,<span class="number">0</span>)</span><br><span class="line">h,w = img.shape[:<span class="number">2</span>][::<span class="number">-1</span>]</span><br><span class="line">template = cv2.imread(<span class="string">"face"</span>,<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">res = cv2.matchTemplate(img,template,cv2.TM_CCORR_NORME) <span class="comment"># 模版匹配</span></span><br><span class="line">threshold = <span class="number">0.8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取匹配程度大于0.8的坐标</span></span><br><span class="line">loc = np.where(res &gt;= threshold)</span><br><span class="line"><span class="keyword">for</span> pt <span class="keyword">in</span> zip(*loc[::<span class="number">-1</span>]): <span class="comment">#*号表示可选参数</span></span><br><span class="line">  bottom_right = (pt[<span class="number">0</span>] + w, pt[<span class="number">1</span>] + h)</span><br><span class="line">  cv2.rectangle(img,pt,bottom_right,(<span class="number">0</span>,<span class="number">0</span>,<span class="number">255</span>),<span class="number">2</span>)</span><br><span class="line">  </span><br><span class="line">cv2.imshow(<span class="string">"img"</span>,img)</span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br></pre></td></tr></tbody></table></figure><h1 id="直方图"><a href="#直方图" class="headerlink" title="直方图"></a>直方图</h1><p>统计图中的像素点分布。</p><h2 id="直方图的计算、绘制与分析"><a href="#直方图的计算、绘制与分析" class="headerlink" title="直方图的计算、绘制与分析"></a>直方图的计算、绘制与分析</h2><p>cv2.calcHist(images, channels,mask,histSize,range)</p><ul><li>images:原图像格式为uint8或float32，当传入函数时应用中括号，例如[img]</li><li>channels:同样用中括号，如果图像时灰度图，它的值是[0]，如果是彩色图像，那传入的参数可以是【0】【1】【2】</li><li>mask:掩模图像，统计整幅图像就将它设为None，但是如果只想统计一部分，就制作一个掩模。</li><li>histSize:BIN的数目，也用中括号</li><li>ranges:像素值范围，为[0,256]</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">img = cv2.imread(<span class="string">"cat.png"</span>,<span class="number">0</span>)</span><br><span class="line">hist = cv2.calcHist([img],[<span class="number">0</span>],<span class="literal">None</span>,[<span class="number">256</span>],[<span class="number">0</span>,<span class="number">256</span>])</span><br><span class="line">plt.hist(img.ravel(),<span class="number">256</span>))</span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><h2 id="mask操作"><a href="#mask操作" class="headerlink" title="mask操作"></a>mask操作</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建mask</span></span><br><span class="line">mask = np.zeros(img.shape[:<span class="number">2</span>],np.uint8)</span><br><span class="line">mask[<span class="number">100</span>:<span class="number">300</span>,<span class="number">100</span>:<span class="number">400</span>] = <span class="number">255</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 操作mask</span></span><br><span class="line">mask_img = cv2.bitwise_and(img,img,mask=mask) <span class="comment">#与操作</span></span><br><span class="line">cv2.imshow(<span class="string">"img"</span>,img)</span><br><span class="line"></span><br><span class="line">hist_full = cv2.calHist([img],[<span class="number">0</span>],<span class="literal">None</span>,[<span class="number">256</span>],[<span class="number">0</span>,<span class="number">256</span>])</span><br><span class="line">hist_mask = cv2.calHist([img],[<span class="number">0</span>],mask,[<span class="number">256</span>],[<span class="number">0</span>,<span class="number">256</span>])</span><br></pre></td></tr></tbody></table></figure><h2 id="直方图均衡化"><a href="#直方图均衡化" class="headerlink" title="直方图均衡化"></a>直方图均衡化</h2><p>均衡后，色彩和亮度能够稍微的提升。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">equ = cv2.equalizeHist(img)</span><br><span class="line">plt.hist(equ,ravel(<span class="number">0</span>,<span class="number">256</span>))</span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><ul><li>自适应直方图均衡化</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">clahe = cv2.createCLAHE(clipLimit=<span class="number">2.0</span>,tilerGridSize(<span class="number">8</span>,<span class="number">8</span>))</span><br><span class="line">res_clahe = clahe.apple(img)</span><br></pre></td></tr></tbody></table></figure><h1 id="傅立叶变换"><a href="#傅立叶变换" class="headerlink" title="傅立叶变换"></a>傅立叶变换</h1><p>中心思想：<strong>任何函数都能通过傅立叶堆叠出来。</strong></p><p>以时间为参照就是时域分析。</p><p><strong>傅立叶变换的作用：</strong></p><ul><li>高频：变化剧烈的灰度分量，例如边界</li><li>低频：变化缓慢的灰度分量，例如一片大海</li></ul><p>可以找到图像中的高频与低频部分。</p><p><strong>滤波：</strong></p><ul><li>低通滤波器：只保留低频，会使图像模糊</li><li>高通滤波器：只保留高频，会使图像细节增强</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line">img = cv2.imread(<span class="string">"lena.jpg"</span>,<span class="number">0</span>)</span><br><span class="line">img_float32 = np.float32(img)</span><br><span class="line"></span><br><span class="line">dft = cv2.dft(img_float32,flags = cv2.DFT_COMPLEX_OUTPUT)</span><br><span class="line">dft_shift = np.fft.fftshift(dft) <span class="comment">#将低频值转换到中间的位置</span></span><br><span class="line"><span class="comment"># 得到灰度图能够表示的形式</span></span><br><span class="line">magnitude_spectrum = <span class="number">20</span>*np.log(cv2.magnitude(dft_shift[:,:,<span class="number">0</span>],dft_shift[:,:,<span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line">plt.subplot((<span class="number">121</span>),plt.imshow(img,cmap=<span class="string">'gray'</span>)</span><br><span class="line">plt.title(<span class="string">"Input image"</span>),plt.xticks([]),plt.yticks([])</span><br><span class="line">plt.subplot(<span class="number">122</span>),plt.imshow(magnitude_spectrum,cmap=<span class="string">'gray'</span>)</span><br><span class="line">plt.title(<span class="string">'magnitude_spectrum'</span>),plt.xticks([]),plt.yticks([])</span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><h1 id="图像特征"><a href="#图像特征" class="headerlink" title="图像特征"></a>图像特征</h1><h2 id="Harris角点检测"><a href="#Harris角点检测" class="headerlink" title="Harris角点检测"></a>Harris角点检测</h2><p>边界：一个特征值大，一个特征值小，自相关函数值在某一方向上大，在其他方向上小。</p><p>平面：两个特征值都小，且近似相等，自相关函数数值在各个方向上都小。</p><p>角点：两个特征值都大，且近似相等，自相关函数在所有方向都增大。</p><h3 id="cv2-cornerHarris"><a href="#cv2-cornerHarris" class="headerlink" title="cv2.cornerHarris()"></a>cv2.cornerHarris()</h3><ul><li>img： 数据类型为 ﬂoat32 的入图像</li><li>blockSize： 角点检测中指定区域的大小</li><li>ksize： Sobel求导中使用的窗口大小</li><li>k： 取值参数为 [0,04,0.06]</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dst = cv2.cornerHarris(gray, <span class="number">2</span>, <span class="number">3</span>, <span class="number">0.04</span>)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'dst.shape:'</span>,dst.shape)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">img[dst&gt;<span class="number">0.01</span>*dst.max()]=[<span class="number">0</span>,<span class="number">0</span>,<span class="number">255</span>] <span class="comment">#大于最大值的0.01倍，就认为是一个角点</span></span><br><span class="line">cv2.imshow(<span class="string">'dst'</span>,img) </span><br><span class="line">cv2.waitKey(<span class="number">0</span>) </span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></tbody></table></figure><h2 id="Sift特征"><a href="#Sift特征" class="headerlink" title="Sift特征"></a>Sift特征</h2><p>Scale Invariant Feature Transform</p><h3 id="图像尺度空间"><a href="#图像尺度空间" class="headerlink" title="图像尺度空间"></a>图像尺度空间</h3><p>在一定的范围内，无论物体是大还是小，人眼都可以分辨出来，然而计算机要有相同的能力却很难，所以要让机器能够对物体在不同尺度下有一个统一的认知，就需要考虑图像在不同的尺度下都存在的特点。</p><p>尺度空间的获取通常使用高斯模糊来实现。</p><p><img data-src="/images/opencv/sift_3.png" alt="sift_3"></p><p><img data-src="/images/opencv/sift_2.png" alt="sift_2"></p><p>不同σ的高斯函数决定了对图像的平滑程度，越大的σ值对应的图像越模糊。</p><h3 id="多分辨率金字塔"><a href="#多分辨率金字塔" class="headerlink" title="多分辨率金字塔"></a>多分辨率金字塔</h3><p><img data-src="/images/opencv/sift_4.png" alt="sift_4"></p><h3 id="高斯差分金字塔（DOG）"><a href="#高斯差分金字塔（DOG）" class="headerlink" title="高斯差分金字塔（DOG）"></a>高斯差分金字塔（DOG）</h3><p><img data-src="/images/opencv/sift_5.png" alt="sift_5"></p><p><img data-src="/images/opencv/sift_6.png" alt="sift_6"></p><h3 id="DoG空间极值检测"><a href="#DoG空间极值检测" class="headerlink" title="DoG空间极值检测"></a>DoG空间极值检测</h3><p>为了寻找尺度空间的极值点，每个像素点要和其图像域（同一尺度空间）和尺度域（相邻的尺度空间）的所有相邻点进行比较，当其大于（或者小于）所有相邻点时，该点就是极值点。如下图所示，中间的检测点要和其所在图像的3×3邻域8个像素点，以及其相邻的上下两层的3×3领域18个像素点，共26个像素点进行比较。</p><p><img data-src="/images/opencv/sift_7.png" alt="sift_7"></p><h3 id="关键点的精确定位"><a href="#关键点的精确定位" class="headerlink" title="关键点的精确定位"></a>关键点的精确定位</h3><p>这些候选关键点是DOG空间的局部极值点，而且这些极值点均为离散的点，精确定位极值点的一种方法是，对尺度空间DoG函数进行曲线拟合，计算其极值点，从而实现关键点的精确定位。</p><p><img data-src="/images/opencv/sift_8.png" alt="sift_8"></p><p><img data-src="/images/opencv/sift_9.png" alt="sift_9"></p><h3 id="消除边界响应"><a href="#消除边界响应" class="headerlink" title="消除边界响应"></a>消除边界响应</h3><p><img data-src="/images/opencv/sift_10.png" alt="sift_10"></p><h3 id="特征点的主方向"><a href="#特征点的主方向" class="headerlink" title="特征点的主方向"></a>特征点的主方向</h3><p><img data-src="/images/opencv/sift_11.png" alt="sift_11"></p><p>每个特征点可以得到三个信息(x,y,σ,θ)，即位置、尺度和方向。具有多个方向的关键点可以被复制成多份，然后将方向值分别赋给复制后的特征点，一个特征点就产生了多个坐标、尺度相等，但是方向不同的特征点。</p><h3 id="生成特征描述"><a href="#生成特征描述" class="headerlink" title="生成特征描述"></a>生成特征描述</h3><p>在完成关键点的梯度计算后，使用直方图统计邻域内像素的梯度和方向。</p><p><img data-src="/images/opencv/sift_12.png" alt="sift_12"></p><p>为了保证特征矢量的旋转不变性，要以特征点为中心，在附近邻域内将坐标轴旋转θ角度，即将坐标轴旋转为特征点的主方向。</p><p><img data-src="/images/opencv/sift_14.png" alt="sift_14"></p><p>旋转之后的主方向为中心取8x8的窗口，求每个像素的梯度幅值和方向，箭头方向代表梯度方向，长度代表梯度幅值，然后利用高斯窗口对其进行加权运算，最后在每个4x4的小块上绘制8个方向的梯度直方图，计算每个梯度方向的累加值，即可形成一个种子点，即每个特征的由4个种子点组成，每个种子点有8个方向的向量信息。</p><p><img data-src="/images/opencv/sift_15.png" alt="sift_15"></p><p>论文中建议对每个关键点使用4x4共16个种子点来描述，这样一个关键点就会产生128维的SIFT特征向量。</p><p><img data-src="/images/opencv/sift_17.png" alt="sift_17"></p><h3 id="OpenCV-SIFT函数"><a href="#OpenCV-SIFT函数" class="headerlink" title="OpenCV SIFT函数"></a>OpenCV SIFT函数</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">img = cv2.imread(<span class="string">'test_1.jpg'</span>)</span><br><span class="line">gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)</span><br><span class="line"></span><br><span class="line">sift = cv2.xfeatures2d.SIFT_create()</span><br><span class="line">kp = sift.detect(gray, <span class="literal">None</span>) <span class="comment"># kp：关键点</span></span><br><span class="line"></span><br><span class="line">img = cv2.drawKeypoints(gray, kp, img)</span><br><span class="line"></span><br><span class="line">cv2.imshow(<span class="string">'drawKeypoints'</span>, img)</span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></tbody></table></figure><p>计算特征</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kp, des = sift.compute(gray, kp)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">print</span> (np.array(kp).shape)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">des.shape</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">des[<span class="number">0</span>]</span><br></pre></td></tr></tbody></table></figure><h1 id="背景建模"><a href="#背景建模" class="headerlink" title="背景建模"></a>背景建模</h1><h2 id="帧差法"><a href="#帧差法" class="headerlink" title="帧差法"></a><strong>帧差法</strong></h2><p>由于场景中的目标在运动，目标的影像在不同图像帧中的位置不同。该类算法对时间上连续的两帧图像进行差分运算，不同帧对应的像素点相减，判断灰度差的绝对值，当绝对值超过一定阈值时，即可判断为运动目标，从而实现目标的检测功能。</p><p><img data-src="/images/opencv/bg_2.png" alt="bg_2"></p><p>帧差法非常简单，但是会引入噪音和空洞问题。</p><h2 id="混合高斯模型"><a href="#混合高斯模型" class="headerlink" title="混合高斯模型"></a>混合高斯模型</h2><p>（视频变化趋势应该是符合高斯分布的）</p><p>在进行前景检测前，先对背景进行训练，对图像中每个背景采用一个混合高斯模型进行模拟，每个背景的混合高斯的个数可以自适应。然后在测试阶段，对新来的像素进行GMM匹配，如果该像素值能够匹配其中一个高斯，则认为是背景，否则认为是前景。由于整个过程GMM模型在不断更新学习中，所以对动态背景有一定的鲁棒性。最后通过对一个有树枝摇摆的动态背景进行前景检测，取得了较好的效果。</p><p>在视频中对于像素点的变化情况应当是符合高斯分布。</p><p><img data-src="/images/opencv/bg_3.png" alt="bg_3"></p><p>背景的实际分布应当是多个高斯分布混合在一起，每个高斯模型也可以带有权重。</p><p><img data-src="/images/opencv/bg_4.png" alt="bg_4"></p><p><strong>混合高斯模型学习方法</strong></p><ul><li>1.首先初始化每个高斯模型矩阵参数。</li><li>2.取视频中T帧数据图像用来训练高斯混合模型。来了第一个像素之后用它来当做第一个高斯分布。</li><li>3.当后面来的像素值时，与前面已有的高斯的均值比较，如果该像素点的值与其模型均值差在3倍的方差内，则属于该分布，并对其进行参数更新。</li><li>4.如果下一次来的像素不满足当前高斯分布，用它来创建一个新的高斯分布。</li></ul><p><strong>混合高斯模型测试方法</strong></p><p>在测试阶段，对新来像素点的值与混合高斯模型中的每一个均值进行比较，如果其差值在2倍的方差之间的话，则认为是背景，否则认为是前景。将前景赋值为255，背景赋值为0。这样就形成了一副前景二值图。</p><p><img data-src="/images/opencv/bg_5.png" alt="bg_5"></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"></span><br><span class="line"><span class="comment">#经典的测试视频</span></span><br><span class="line">cap = cv2.VideoCapture(<span class="string">'test.avi'</span>)</span><br><span class="line"><span class="comment">#形态学操作需要使用</span></span><br><span class="line">kernel = cv2.getStructuringElement(cv2.MORPH_ELLIPSE,(<span class="number">3</span>,<span class="number">3</span>))</span><br><span class="line"><span class="comment">#创建混合高斯模型用于背景建模</span></span><br><span class="line">fgbg = cv2.createBackgroundSubtractorMOG2()</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="literal">True</span>):</span><br><span class="line">    ret, frame = cap.read()</span><br><span class="line">    fgmask = fgbg.apply(frame)</span><br><span class="line">    <span class="comment">#形态学开运算去噪点</span></span><br><span class="line">    fgmask = cv2.morphologyEx(fgmask, cv2.MORPH_OPEN, kernel)</span><br><span class="line">    <span class="comment">#寻找视频中的轮廓</span></span><br><span class="line">    im, contours, hierarchy = cv2.findContours(fgmask, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> contours:</span><br><span class="line">        <span class="comment">#计算各轮廓的周长</span></span><br><span class="line">        perimeter = cv2.arcLength(c,<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">if</span> perimeter &gt; <span class="number">188</span>:</span><br><span class="line">            <span class="comment">#找到一个直矩形（不会旋转）</span></span><br><span class="line">            x,y,w,h = cv2.boundingRect(c)</span><br><span class="line">            <span class="comment">#画出这个矩形</span></span><br><span class="line">            cv2.rectangle(frame,(x,y),(x+w,y+h),(<span class="number">0</span>,<span class="number">255</span>,<span class="number">0</span>),<span class="number">2</span>)    </span><br><span class="line"></span><br><span class="line">    cv2.imshow(<span class="string">'frame'</span>,frame)</span><br><span class="line">    cv2.imshow(<span class="string">'fgmask'</span>, fgmask)</span><br><span class="line">    k = cv2.waitKey(<span class="number">150</span>) &amp; <span class="number">0xff</span></span><br><span class="line">    <span class="keyword">if</span> k == <span class="number">27</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">cap.release()</span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></tbody></table></figure><h1 id="光流估计"><a href="#光流估计" class="headerlink" title="光流估计"></a>光流估计</h1><p>光流是空间运动物体在观测成像平面上的<strong>像素运动的“瞬时速度”，</strong>根据各个像素点的速度矢量特征，可以<strong>对图像进行动态分析，例如目标跟踪。</strong></p><ul><li>亮度恒定：同一点随着时间的变化，其亮度不会发生改变。</li><li>小运动：随着时间的变化不会引起位置的剧烈变化，只有小运动情况下才能用前后帧之间单位位置变化引起的灰度变化去近似灰度对位置的偏导数。</li><li>空间一致：一个场景上邻近的点投影到图像上也是邻近点，且邻近点速度一致。因为光流法基本方程约束只有一个，而要求x，y方向的速度，有两个未知变量。所以需要连立n多个方程求解。</li></ul><p><img data-src="/images/opencv/lk_2.png" alt="lk_2"></p><p><img data-src="/images/opencv/lk_1.png" alt="lk_1"></p><h2 id="Lucas-Kanade-算法"><a href="#Lucas-Kanade-算法" class="headerlink" title="Lucas-Kanade 算法"></a>Lucas-Kanade 算法</h2><p><img data-src="/images/opencv/lk_3.png" alt="lk_3"></p><p>如何求解方程组呢？看起来一个像素点根本不够，在物体移动过程中还有哪些特性呢？</p><p><img data-src="/images/opencv/lk_4.png" alt="lk_4"></p><p><strong>cv2.calcOpticalFlowPyrLK():</strong></p><p>参数：</p><ul><li>prevImage 前一帧图像</li><li>nextImage 当前帧图像</li><li>prevPts 待跟踪的特征点向量</li><li>winSize 搜索窗口的大小</li><li>maxLevel 最大的金字塔层数</li></ul><p>返回：</p><ul><li>nextPts 输出跟踪特征点向量</li><li>status 特征点是否找到，找到的状态为1，未找到的状态为0</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"></span><br><span class="line">cap = cv2.VideoCapture(<span class="string">'test.avi'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 角点检测所需参数</span></span><br><span class="line">feature_params = dict( maxCorners = <span class="number">100</span>,</span><br><span class="line">                       qualityLevel = <span class="number">0.3</span>,</span><br><span class="line">                       minDistance = <span class="number">7</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># lucas kanade参数</span></span><br><span class="line">lk_params = dict( winSize  = (<span class="number">15</span>,<span class="number">15</span>),</span><br><span class="line">                  maxLevel = <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 随机颜色条</span></span><br><span class="line">color = np.random.randint(<span class="number">0</span>,<span class="number">255</span>,(<span class="number">100</span>,<span class="number">3</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 拿到第一帧图像</span></span><br><span class="line">ret, old_frame = cap.read()</span><br><span class="line">old_gray = cv2.cvtColor(old_frame, cv2.COLOR_BGR2GRAY)</span><br><span class="line"><span class="comment"># 返回所有检测特征点，需要输入图像，角点最大数量（效率），品质因子（特征值越大的越好，来筛选）</span></span><br><span class="line"><span class="comment"># 距离相当于这区间有比这个角点强的，就不要这个弱的了</span></span><br><span class="line">p0 = cv2.goodFeaturesToTrack(old_gray, mask = <span class="literal">None</span>, **feature_params)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个mask</span></span><br><span class="line">mask = np.zeros_like(old_frame)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="literal">True</span>):</span><br><span class="line">    ret,frame = cap.read()</span><br><span class="line">    frame_gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 需要传入前一帧和当前图像以及前一帧检测到的角点</span></span><br><span class="line">    p1, st, err = cv2.calcOpticalFlowPyrLK(old_gray, frame_gray, p0, <span class="literal">None</span>, **lk_params)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># st=1表示</span></span><br><span class="line">    good_new = p1[st==<span class="number">1</span>]</span><br><span class="line">    good_old = p0[st==<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 绘制轨迹</span></span><br><span class="line">    <span class="keyword">for</span> i,(new,old) <span class="keyword">in</span> enumerate(zip(good_new,good_old)):</span><br><span class="line">        a,b = new.ravel()</span><br><span class="line">        c,d = old.ravel()</span><br><span class="line">        mask = cv2.line(mask, (a,b),(c,d), color[i].tolist(), <span class="number">2</span>)</span><br><span class="line">        frame = cv2.circle(frame,(a,b),<span class="number">5</span>,color[i].tolist(),<span class="number">-1</span>)</span><br><span class="line">    img = cv2.add(frame,mask)</span><br><span class="line"></span><br><span class="line">    cv2.imshow(<span class="string">'frame'</span>,img)</span><br><span class="line">    k = cv2.waitKey(<span class="number">150</span>) &amp; <span class="number">0xff</span></span><br><span class="line">    <span class="keyword">if</span> k == <span class="number">27</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 更新</span></span><br><span class="line">    old_gray = frame_gray.copy()</span><br><span class="line">    p0 = good_new.reshape(<span class="number">-1</span>,<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">cv2.destroyAllWindows()</span><br><span class="line">cap.release()</span><br></pre></td></tr></tbody></table></figure><h1 id="DNN模块"><a href="#DNN模块" class="headerlink" title="DNN模块"></a>DNN模块</h1><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">blob_from_images.py</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入工具包</span></span><br><span class="line"><span class="keyword">import</span> utils_paths</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 标签文件处理</span></span><br><span class="line">rows = open(<span class="string">"synset_words.txt"</span>).read().strip().split(<span class="string">"\n"</span>)</span><br><span class="line">classes = [r[r.find(<span class="string">" "</span>) + <span class="number">1</span>:].split(<span class="string">","</span>)[<span class="number">0</span>] <span class="keyword">for</span> r <span class="keyword">in</span> rows]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Caffe所需配置文件</span></span><br><span class="line">net = cv2.dnn.readNetFromCaffe(<span class="string">"bvlc_googlenet.prototxt"</span>,</span><br><span class="line"><span class="string">"bvlc_googlenet.caffemodel"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 图像路径</span></span><br><span class="line">imagePaths = sorted(list(utils_paths.list_images(<span class="string">"images/"</span>)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 图像数据预处理</span></span><br><span class="line">image = cv2.imread(imagePaths[<span class="number">0</span>])</span><br><span class="line">resized = cv2.resize(image, (<span class="number">224</span>, <span class="number">224</span>))</span><br><span class="line"><span class="comment"># image scalefactor size mean swapRB </span></span><br><span class="line">blob = cv2.dnn.blobFromImage(resized, <span class="number">1</span>, (<span class="number">224</span>, <span class="number">224</span>), (<span class="number">104</span>, <span class="number">117</span>, <span class="number">123</span>))</span><br><span class="line">print(<span class="string">"First Blob: {}"</span>.format(blob.shape))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 得到预测结果</span></span><br><span class="line">net.setInput(blob)</span><br><span class="line">preds = net.forward()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 排序，取分类可能性最大的</span></span><br><span class="line">idx = np.argsort(preds[<span class="number">0</span>])[::<span class="number">-1</span>][<span class="number">0</span>]</span><br><span class="line">text = <span class="string">"Label: {}, {:.2f}%"</span>.format(classes[idx],</span><br><span class="line">preds[<span class="number">0</span>][idx] * <span class="number">100</span>)</span><br><span class="line">cv2.putText(image, text, (<span class="number">5</span>, <span class="number">25</span>),  cv2.FONT_HERSHEY_SIMPLEX,</span><br><span class="line"><span class="number">0.7</span>, (<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>), <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示</span></span><br><span class="line">cv2.imshow(<span class="string">"Image"</span>, image)</span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Batch数据制作</span></span><br><span class="line">images = []</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法一样，数据是一个batch</span></span><br><span class="line"><span class="keyword">for</span> p <span class="keyword">in</span> imagePaths[<span class="number">1</span>:]:</span><br><span class="line">image = cv2.imread(p)</span><br><span class="line">image = cv2.resize(image, (<span class="number">224</span>, <span class="number">224</span>))</span><br><span class="line">images.append(image)</span><br><span class="line"></span><br><span class="line"><span class="comment"># blobFromImages函数，注意有s</span></span><br><span class="line">blob = cv2.dnn.blobFromImages(images, <span class="number">1</span>, (<span class="number">224</span>, <span class="number">224</span>), (<span class="number">104</span>, <span class="number">117</span>, <span class="number">123</span>))</span><br><span class="line">print(<span class="string">"Second Blob: {}"</span>.format(blob.shape))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取预测结果</span></span><br><span class="line">net.setInput(blob)</span><br><span class="line">preds = net.forward()</span><br><span class="line"><span class="keyword">for</span> (i, p) <span class="keyword">in</span> enumerate(imagePaths[<span class="number">1</span>:]):</span><br><span class="line">image = cv2.imread(p)</span><br><span class="line">idx = np.argsort(preds[i])[::<span class="number">-1</span>][<span class="number">0</span>]</span><br><span class="line">text = <span class="string">"Label: {}, {:.2f}%"</span>.format(classes[idx],</span><br><span class="line">preds[i][idx] * <span class="number">100</span>)</span><br><span class="line">cv2.putText(image, text, (<span class="number">5</span>, <span class="number">25</span>),  cv2.FONT_HERSHEY_SIMPLEX,</span><br><span class="line"><span class="number">0.7</span>, (<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>), <span class="number">2</span>)</span><br><span class="line">cv2.imshow(<span class="string">"Image"</span>, image)</span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br></pre></td></tr></tbody></table></figure><h1 id="图像基本操作"><a href="#图像基本操作" class="headerlink" title="图像基本操作"></a>图像基本操作</h1><h1 id="图像阈值"><a href="#图像阈值" class="headerlink" title="图像阈值"></a>图像阈值</h1><h2 id="简单阈值"><a href="#简单阈值" class="headerlink" title="简单阈值"></a>简单阈值</h2><h2 id="自适应阈值"><a href="#自适应阈值" class="headerlink" title="自适应阈值"></a>自适应阈值</h2><h2 id="Otsu‘s-二值化"><a href="#Otsu‘s-二值化" class="headerlink" title="Otsu‘s 二值化"></a>Otsu‘s 二值化</h2><h1 id="平滑处理"><a href="#平滑处理" class="headerlink" title="平滑处理"></a>平滑处理</h1><h2 id="平均"><a href="#平均" class="headerlink" title="平均"></a>平均</h2><h2 id="高斯模糊"><a href="#高斯模糊" class="headerlink" title="高斯模糊"></a>高斯模糊</h2><h2 id="中值模糊"><a href="#中值模糊" class="headerlink" title="中值模糊"></a>中值模糊</h2><h2 id="双边滤波"><a href="#双边滤波" class="headerlink" title="双边滤波"></a>双边滤波</h2><h1 id="形态学处理"><a href="#形态学处理" class="headerlink" title="形态学处理"></a>形态学处理</h1><h2 id="腐蚀"><a href="#腐蚀" class="headerlink" title="腐蚀"></a>腐蚀</h2><h2 id="膨胀"><a href="#膨胀" class="headerlink" title="膨胀"></a>膨胀</h2><h2 id="开运算"><a href="#开运算" class="headerlink" title="开运算"></a>开运算</h2><h2 id="闭运算"><a href="#闭运算" class="headerlink" title="闭运算"></a>闭运算</h2><h2 id="梯度"><a href="#梯度" class="headerlink" title="梯度"></a>梯度</h2><h2 id="礼帽"><a href="#礼帽" class="headerlink" title="礼帽"></a>礼帽</h2><h2 id="黑帽"><a href="#黑帽" class="headerlink" title="黑帽"></a>黑帽</h2><h1 id="梯度处理"><a href="#梯度处理" class="headerlink" title="梯度处理"></a>梯度处理</h1><h2 id="Sobel算子和Scharr算子"><a href="#Sobel算子和Scharr算子" class="headerlink" title="Sobel算子和Scharr算子"></a>Sobel算子和Scharr算子</h2><h2 id="laplacian算子"><a href="#laplacian算子" class="headerlink" title="laplacian算子"></a>laplacian算子</h2><h1 id="边缘检测"><a href="#边缘检测" class="headerlink" title="边缘检测"></a>边缘检测</h1><h1 id="Hough变换"><a href="#Hough变换" class="headerlink" title="Hough变换"></a>Hough变换</h1><h2 id="直线变换"><a href="#直线变换" class="headerlink" title="直线变换"></a>直线变换</h2><h2 id="圆形变换"><a href="#圆形变换" class="headerlink" title="圆形变换"></a>圆形变换</h2><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;OpenCV的安装&quot;&gt;&lt;a href=&quot;#OpenCV的安装&quot; class=&quot;headerlink&quot; title=&quot;OpenCV的安装&quot;&gt;&lt;/a&gt;OpenCV的安装&lt;/h1&gt;&lt;p&gt;国内一些pip的镜像源：&lt;/p&gt;
&lt;p&gt;阿里云 &lt;a href=&quot;https://mirrors.aliyun.com/pypi/simple/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://mirrors.aliyun.com/pypi/simple/&lt;/a&gt;&lt;br&gt;中国科技大学 &lt;a href=&quot;https://pypi.mirrors.ustc.edu.cn/simple/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://pypi.mirrors.ustc.edu.cn/simple/&lt;/a&gt;&lt;br&gt;豆瓣(douban) &lt;a href=&quot;http://pypi.douban.com/simple/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://pypi.douban.com/simple/&lt;/a&gt;&lt;br&gt;清华大学 &lt;a href=&quot;https://pypi.tuna.tsinghua.edu.cn/simple/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://pypi.tuna.tsinghua.edu.cn/simple/&lt;/a&gt;&lt;br&gt;中国科学技术大学 &lt;a href=&quot;http://pypi.mirrors.ustc.edu.cn/simple/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://pypi.mirrors.ustc.edu.cn/simple/&lt;/a&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(base)$ conda create -n py365 python=&lt;span class=&quot;number&quot;&gt;3.6&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.5&lt;/span&gt;   &lt;span class=&quot;comment&quot;&gt;# anaconda中创建python版本为3.7.3的虚拟环境&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(base)$ conda activate py365                 &lt;span class=&quot;comment&quot;&gt;# 激活该环境&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pip install opencv-python==&lt;span class=&quot;number&quot;&gt;3.4&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.1&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.15&lt;/span&gt; -i http://pypi.douban.com/simple --trusted-host pypi.douban.com                              &lt;span class=&quot;comment&quot;&gt;# 安装opencv-python 3.4.1.15，同时还会加载相应的依赖库&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;内容完善中……&lt;/p&gt;
    
    </summary>
    
    
      <category term="CV" scheme="https://unknown.yuzhouwan.com/categories/CV/"/>
    
    
      <category term="Python" scheme="https://unknown.yuzhouwan.com/tags/Python/"/>
    
      <category term="OpenCV" scheme="https://unknown.yuzhouwan.com/tags/OpenCV/"/>
    
  </entry>
  
  <entry>
    <title>快捷键汇总</title>
    <link href="https://unknown.yuzhouwan.com/posts/26313/"/>
    <id>https://unknown.yuzhouwan.com/posts/26313/</id>
    <published>2019-01-30T12:00:00.000Z</published>
    <updated>2020-03-01T13:10:54.301Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MacBook"><a href="#MacBook" class="headerlink" title="MacBook"></a>MacBook</h1><h1 id="PyCharm"><a href="#PyCharm" class="headerlink" title="PyCharm"></a>PyCharm</h1><h1 id="VIM"><a href="#VIM" class="headerlink" title="VIM"></a>VIM</h1><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;MacBook&quot;&gt;&lt;a href=&quot;#MacBook&quot; class=&quot;headerlink&quot; title=&quot;MacBook&quot;&gt;&lt;/a&gt;MacBook&lt;/h1&gt;&lt;h1 id=&quot;PyCharm&quot;&gt;&lt;a href=&quot;#PyCharm&quot; class=&quot;headerlink
      
    
    </summary>
    
    
      <category term="Tools" scheme="https://unknown.yuzhouwan.com/categories/Tools/"/>
    
    
      <category term="Shortcut Key" scheme="https://unknown.yuzhouwan.com/tags/Shortcut-Key/"/>
    
  </entry>
  
  <entry>
    <title>CNN</title>
    <link href="https://unknown.yuzhouwan.com/posts/16452/"/>
    <id>https://unknown.yuzhouwan.com/posts/16452/</id>
    <published>2018-03-18T20:50:00.000Z</published>
    <updated>2020-04-25T15:05:15.535Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Convolutional-Neural-Networks"><a href="#Convolutional-Neural-Networks" class="headerlink" title="Convolutional Neural Networks"></a>Convolutional Neural Networks</h1><h2 id="Edge-Detection"><a href="#Edge-Detection" class="headerlink" title="Edge Detection"></a>Edge Detection</h2><p>卷积运算是卷积神经网络最基本的组成成分，使用边缘检测作为入门样例。下面介绍卷积计算是如何实现的。</p><p>使用一个3✖️3的<strong>过滤器(核)</strong>与原始矩阵进行元素相乘，再相加，最后和的结果为<strong>卷积运算</strong>后的第一个元素值，然后依次计算，下面例子中，做一次卷积运算后结果为一个4✖️4的矩阵。</p><p>这种卷积运算可以理解成为，<strong>垂直边缘检测器。</strong></p><p><img data-src="/images/picturesof-4/CNN_1.png" alt="屏幕快照 2018-02-09 下午12.25.09"></p><p>在不同的编程环境中可以使用不同的函数来实现卷积运算。</p><p><img data-src="/images/picturesof-4/CNN_2.png" alt="屏幕快照 2018-02-09 下午12.38.47"></p><p>那么为什么这个可以用作垂直检测呢？来看下面的例子。</p><a id="more"></a><p>这是一个简单的6✖️6的图像，图像左边一半是10，右边一半是0，如果你把它看成一个图像，那么是左白右灰的，10代表比较亮的颜色，0代表比较黑的颜色。图片里，有一个特别明显的垂直边缘在图像中间，这条直线是从黑到白的过度线。<strong>所以当你使用一个3✖️3的过滤器进行卷积运算的时候，这个过滤器可视化成下面这个样子</strong>，在左边有明亮的像素，然后有一个过滤段0在中间，右边是黑色的。使用过滤器进行卷积元算，得到的是右边的矩阵，可视化样子如下，在中间有段亮一点的区域，对应检查到这个6✖️6的图像中间的垂直边缘，这里的维数似乎有点不正确，检测到的边缘太粗了，因为这个例子中的图片太小了，如果你用一个1000✖️1000的图像，而不是6✖️6的图像，你会发现，它可以很好的检测出图像中的垂直边缘。在这个例子中，在输出图像中间区域的亮出，表示在图像中间，有一个特别明显的垂直边缘。</p><p>从垂直边缘检测中可以得到的启发是，因为我们使用的是3✖️3的矩阵，所以垂直边缘是一个3✖️3的区域，左边是明亮的像素，中间的的并不需要考虑，右边是深色像素。在这个6✖️6图像中，明亮的像素在左边，深色的像素在右边，这样的话就会被视为一个垂直边缘。卷积运算提供了一个方便的方法，来发现图像中的垂直边缘。</p><p><img data-src="/images/picturesof-4/CNN_3.png" alt="屏幕快照 2018-02-09 下午1.05.04"></p><h2 id="More-Edge-Detection"><a href="#More-Edge-Detection" class="headerlink" title="More Edge Detection"></a>More Edge Detection</h2><p>使用相同的过滤器过滤两个颜色刚好相反的图片，可以看到，第一个是30，第二个是-30，<strong>其中正数(30)代表第一幅图是由亮向暗过度，负数(-30)代表第二张图片是由暗向亮过度。</strong></p><p><img data-src="/images/picturesof-4/CNN_4.png" alt="屏幕快照 2018-03-01 上午9.41.33"></p><p>有垂直过滤器，就会有水平过滤器。下面举一个更为复杂的例子，在下图的这个图片矩阵中，我们使用水平过滤器进行边缘检测，得到的卷积结果如右下方所示，<strong>用绿色方框圈出的”+30”，代表原始图片中用绿色圈出的3✖️3矩阵的卷积结果，可以看到，这块矩阵的水平边缘确实是由亮到暗过度的，所以卷积结果为正。</strong></p><p><img data-src="/images/picturesof-4/CNN_5.png" alt="屏幕快照 2018-03-01 上午9.56.15"></p><p>事实上，对于这个3✖️3的滤波器来说，我们只使用了其中一种数字组合，但在历史上的计算机视觉的文献中，曾经公平的争论过，怎样的数字组合才是最好的，所以你还可以使用如下图所示的过滤器，<strong>如Sobel过滤器</strong>，它的优点在于，增加了中间一行元素的权重，也就是处在图像中央的像素点，这使得结果的健壮性更高一些。<strong>Scharr过滤器。</strong></p><p>实际上是，当你在做复杂图像的边缘检测时，并不一定要使用刚刚我们提到的9个数字，但是你可以从中学习，把<strong>这矩阵中的9个数字当成9个参数，并且在之后可以使用反向传播算法，学习这9个参数。</strong>得到的结果与原始图片进行卷积，将会得到一个出色的边缘检测结果。</p><p>相比这种单纯的垂直边缘与水平边缘检测，它可以检测出45度、70度、73度，甚至是任何角度的边缘。</p><p><img data-src="/images/picturesof-4/CNN_6.png" alt="屏幕快照 2018-03-01 上午10.19.16"></p><h2 id="Padding"><a href="#Padding" class="headerlink" title="Padding"></a>Padding</h2><p>为了构建深度神经网络，你需要学会使用的一个基本的卷积操作就是Padding。Padding出现的原因是，当你在做卷积操作的时候，像素矩阵中，中间的矩阵是被卷积计算多次的，也就是多次使用到了这个矩阵的信息，而边缘的像素矩阵，则会被使用较少次，比如说对角的矩阵，则只是被卷积了一次。这样则会导致会忽略边缘矩阵的信息。<strong>采取的措施是使用“填充(Padding)”方法，进行像素填充。使得边缘像素矩阵信息可以被卷积多次。</strong>填充之后的矩阵再进行卷积操作后，就会得到一个和原始矩阵一样大的矩阵，而不是缩小。</p><p>习惯上，你可以使用”0”去填充。</p><p><img data-src="/images/picturesof-4/CNN_7.png" alt="屏幕快照 2018-03-01 上午11.25.36"></p><p>至于选择填充多少像素，通常有两个选择，<strong>分别叫做Valid卷积和Same卷积。</strong>Valid卷积：意味着不填充，所以得到的输出矩阵会比原始矩阵小。要想和原始矩阵得到的一样大，则使用Same卷积，你可以使用下面的计算公式来计算需要Pad多少个像素。<strong>n是原始图片的维数，f是过滤器的维数，最后得到的输出矩阵大小为n-f+1维。（f通常是奇数，如果为偶数，则会导致左右填充不均匀的情况）</strong></p><p><img data-src="/images/picturesof-4/CNN_8.png" alt="屏幕快照 2018-03-01 上午11.59.32"></p><h2 id="Strided-Convolutions-卷积步长"><a href="#Strided-Convolutions-卷积步长" class="headerlink" title="Strided Convolutions 卷积步长"></a>Strided Convolutions 卷积步长</h2><p>卷积中的步幅是另一个构建卷积神经网络的基本操作。每次卷积移动步长个单位，而不是我们之前提到的1个步长。这时候，计算输出函数的维数公式变成了如下情况。</p><p>如果求得的商不是一个整数怎么办？这里采用向下取整。</p><p><img data-src="/images/picturesof-4/CNN_9.png" alt="屏幕快照 2018-03-01 下午1.59.37"></p><h2 id="Convolutions-Over-Volume"><a href="#Convolutions-Over-Volume" class="headerlink" title="Convolutions Over Volume"></a>Convolutions Over Volume</h2><p>之前讨论的卷积操作是在二维图像上进行的，现在讨论如何在三维立体(RGB)上做卷积操作。注意，图像的通道数和过滤器的通道数需一致。</p><p>和一维图形中类似，使用三层过滤器依次与相对应层级中的元素相乘，每层得到9个数字，3层就是27个数字，将这27个数字相加后，就可以得到输出矩阵中的每个元素值。</p><p><img data-src="/images/picturesof-4/CNN_10.png" alt="屏幕快照 2018-03-01 下午2.30.40"></p><h2 id="One-Layer-of-a-Convolutional-Network-单层卷积网络"><a href="#One-Layer-of-a-Convolutional-Network-单层卷积网络" class="headerlink" title="One Layer of a Convolutional Network 单层卷积网络"></a>One Layer of a Convolutional Network 单层卷积网络</h2><p>下图演示了利用两个过滤器将6✖️6✖️3的矩阵转化为4✖️4✖️2的矩阵的过程，这个4✖️4✖️2的矩阵就是卷积中的一层结果。利用n个过滤器来提取特征，如垂直边缘，水平边缘或者其他特征。</p><p><img data-src="/images/picturesof-4/CNN_11.png" alt="屏幕快照 2018-03-01 下午3.38.38"></p><p>对于一些标识及每层的数量，总结如下：</p><p><img data-src="/images/picturesof-4/CNN_12.png" alt="屏幕快照 2018-03-01 下午4.16.42"></p><h2 id="Simple-Convolutional-Network-Example"><a href="#Simple-Convolutional-Network-Example" class="headerlink" title="Simple Convolutional Network Example"></a>Simple Convolutional Network Example</h2><p>下图是模拟一个卷积神经网络的计算过程。最后我们得到一个7✖️7✖️40的矩阵，也就是1960个元素值，将这1960个元素展开，使用逻辑回归或者SoftMax，进行图片的分类判断。</p><p>可以看到，高度和宽度会在某一时间段内保持一致，然后随着网络深度的加深而逐渐减少，而信道数量在增加。</p><p><img data-src="/images/picturesof-4/CNN_13.png" alt="屏幕快照 2018-03-01 下午4.50.51"></p><p>典型的神经网络通常由三层组成，第一个是卷积层(convolution Layer)，第二个是池化层(Pooling Layer)，最后一个是全连接层(Fully Connect Layer)。虽然仅用卷积层也有可能构建出很好的神经网络，但大部分神经网络架构师依然会添加池化层和全连接层。</p><p><img data-src="/images/picturesof-4/CNN_14.png" alt="屏幕快照 2018-03-01 下午5.06.05"></p><h2 id="Pooling-Layers"><a href="#Pooling-Layers" class="headerlink" title="Pooling Layers"></a>Pooling Layers</h2><p>除了卷积层，卷积网络也经常使用池化层，来缩减模型的大小，提高计算速度，同时提高所提取特征的健壮性。</p><p>所谓<strong>最大池化层</strong>，即将原始矩阵分成四个区域，输出的每个元素都是其对应颜色区域中的最大元素值。</p><p>最大化操作的功能就是只要在任何一个象限内提取到某个特征，他都会保留在最大池化的输出里。最大化运算的实际作用就是，如果在过滤器中提取到某个特征，那么保留其最大值。必须承认，人们使用最大池化的主要原因是，此法在很多实验中，效果都很好。<strong>其中有一个有意思的特点就是，它有一组超级参数，但是并没有参数需要学习，一旦确定了f和s，它就是一个固定运算。</strong></p><p><img data-src="/images/picturesof-4/CNN_15.png" alt="屏幕快照 2018-03-01 下午6.00.49"></p><p>下图是最大池化的演示。</p><p><img data-src="/images/picturesof-4/CNN_16.png" alt="屏幕快照 2018-03-01 下午6.02.50"></p><p>另外还有一种类型的池化，—<strong>平均池化</strong>，它不太常用。这种运算顾名思义，选取的不是每个过滤器的最大值，而是平均值。当建立一个深度很深的神经网络时，你可以利用平均池化来分解规模为7✖️7✖️1000的网络的表示层。但是在神经网络中，最大池化比平均池化用的更多。</p><p><img data-src="/images/picturesof-4/CNN_17.png" alt="屏幕快照 2018-03-01 下午6.18.08"></p><p>总结一下，池化的超级参数包括过滤器大小f和步长s。常用的参数值为f=2，s=2，或者f=3，s=3。你也可以根据自己的意愿来决定是否使用padding，<strong>但是在最大池化操作中，很少使用padding。</strong></p><p><strong>最大池化只是计算神经网络某一层的静态属性，它的超参是不需要学习的。</strong></p><p><img data-src="/images/picturesof-4/CNN_18.png" alt="屏幕快照 2018-03-01 下午6.25.52"></p><h2 id="CNN-Example"><a href="#CNN-Example" class="headerlink" title="CNN Example"></a>CNN Example</h2><p> 我们将卷积层和池化层有时会合并起来看作神经网络中的某一层，因为池化层是不需要权重的，它只有超参数。通过卷积和池化，我们得到一个5✖️5✖️16(=400)的矩阵，现在将POOL2平整化为一个大小为400的一维向量。然后利用这400个单元构建下一层，下一层含有120个单元，<strong>这就是我们第一个全连接层，这400个单元与120个单元紧密相连。它很像一个单神经网络层，这是一个标准的神经网络。</strong>它在120✖️400的维度上具有一个权重矩阵W，这就是全连接层。</p><p>然后我们对这120个单元再添加一个全连接层，这层更小，假设有84个单元。最后，用这84个单元填充一个SoftMax单元，如果你想识别0～9的数字，那么这个SoftMax输出层则会有10个输出。</p><p>在对于超级参数的选择问题上，建议不要自己凭空设定，而是查看文献中别人采取了哪些超级参数，选一个在别人任务重，效果很好的架构。</p><p><img data-src="/images/picturesof-4/CNN_19.png" alt="屏幕快照 2018-03-02 上午10.58.49"></p><p>还有一种在CNN中，另一种常见的模式是，一个或者多个卷积层后跟随一个池化层，然后是几个全连接层，最后是SoftMax层。从下面的表格中可以看出，第一，池化层和最大池化层没有参数。第二，卷积层的参数相对来说比较少。其实许多参数都存在于CNN中的全连接层。观察可发现，随着神经网络的加深，激活值会逐渐变小，如果激活值下降过快，也会影响网络性能。</p><p><strong>（parameters208来源：第一个卷积层中，过滤器维度为5✖️5，每个过滤器有1个bias，一共有8个过滤器，即5✖️5 + 1 ✖️ 8 = 208，所以第一层的weights是208）</strong></p><p><img data-src="/images/picturesof-4/CNN_20.png" alt="屏幕快照 2018-03-02 上午11.17.15"></p><h2 id="Why-Convolutions"><a href="#Why-Convolutions" class="headerlink" title="Why Convolutions?"></a>Why Convolutions?</h2><p>与传统的神经网络相比，CNN的主要两个优势在于：<strong>参数共享、稀疏连接</strong></p><p>参数共享：通过观察发现，特征检测如垂直边缘检测如果适用于图片的某个区域，那么它可能适用于图片的其他区域。<strong>也就是说，如果你用一个3✖️3的过滤器检测垂直边缘，那么图片的左上角区域以及旁边的各个区域都可以使用这个3✖️3的过滤器。每个特征检测器及输出都可以在输入图片的的不同区域中使用相同的参数。以便提取垂直边缘或者其他特征。</strong>它不仅适用于边缘特征这样的低阶特征，同样适用于高阶特征，例如提取脸上的眼睛，猫或者其他特征对象。</p><p>神经网络可以通过这两种机制减少参数，以便于我们用更小的训练集来训练它， 从而预防过度拟合。</p><p><img data-src="/images/picturesof-4/CNN_21.png" alt="屏幕快照 2018-03-02 下午12.04.13"></p><p>计算损失，使用优化算法来优化权重。</p><p><img data-src="/images/picturesof-4/CNN_22.png" alt="屏幕快照 2018-03-02 下午12.11.50"></p><h1 id="Case-studies"><a href="#Case-studies" class="headerlink" title="Case studies"></a>Case studies</h1><h2 id="Classic-Networks-经典网络"><a href="#Classic-Networks-经典网络" class="headerlink" title="Classic Networks 经典网络"></a>Classic Networks 经典网络</h2><p>下面是一些经典的网络。</p><p><img data-src="/images/picturesof-4/CNN_23.png" alt="屏幕快照 2018-03-07 上午10.41.57"></p><p><img data-src="/images/picturesof-4/CNN_24.png" alt="屏幕快照 2018-03-07 上午10.56.07"></p><p><img data-src="/images/picturesof-4/CNN_25.png" alt="屏幕快照 2018-03-07 上午11.02.34"></p><p><img data-src="/images/picturesof-4/CNN_26.png" alt="屏幕快照 2018-03-07 上午11.09.52"></p><h2 id="ResNets-残差网络"><a href="#ResNets-残差网络" class="headerlink" title="ResNets 残差网络"></a>ResNets 残差网络</h2><p>非常非常深的网络是很难被训练的，因为存在<strong>梯度消失</strong>和<strong>梯度爆炸</strong>的问题。下面要提到的是<strong>跳远连接</strong>(Skip Connection)，它可以从某一网络层获取激活，然后迅速反应给另外一层，甚至是神经网络的更深层。我们可以利用Skip Connection构建能够训练深度网络的ResNets，有时深度能够超过100层。</p><p><strong>ResNets是由残差块构建的。</strong>下面解释什么是残差块(Residual Block)。</p><p>在一般的神经网络系统中，激活层a[l]通常经过线性化处理，非线性化处理，再线性化处理，再非线性化，最后得到输出层a[l+2]。这被称作“主路径”(Main Path)</p><p><img data-src="/images/picturesof-4/CNN_27.png" alt="屏幕快照 2018-03-07 下午4.25.01"></p><p><strong>在ResNets中，有一点变化，我们将a[l]直接向后拷贝到神经网络的深层。</strong>在Relu非线性激活前加上a[l]，这是一条捷径(Shortcut)。也就是a[l]不再沿着主路径进行传递。这样一来a[l+2]变成了如下所示的样子，也就是加上的这个a[l]产生了一个残差块。所以a[l]插入的时机是在线性激活之后，Relu激活之前。</p><p><img data-src="/images/picturesof-4/CNN_28.png" alt="屏幕快照 2018-03-07 下午4.45.08"></p><p>除了<strong>捷径(ShortCut)</strong>，你可能还会听到另一个术语<strong>跳远连接(Skip Connection)</strong>，就是指a[l]跳过一层甚至是好几层，从而将消息传递到神经网络的更深层。</p><p>使用残差块能够训练更深的神经网络，所以构建一个ResNet网络就是通过将很多这样的残差块堆砌在一起，形成一个深度神经网络。</p><p>将一个普通的神经网络(PlainNetWork)编程一个残差网络(ResNets)的方法就是添加很多残差块，如下图所示。有5个残差块。如果我们使用标准优化算法训练一个普通网络，比如梯度下降或者其他热门的优化算法，如果没有多余的残差，没有这些捷径或者跳远连接，你会发现，随着网络深度的加深，训练错误会先减少，然后增多，而理论上，应该是随着网络深度的加深，错误应该越少越好。<strong>但事实上，对于一个普通网络来说，深度越深意味着用优化算法越难训练，训练错误就会越来越多，但是有了ResNet就不一样了。</strong>即使网络再深，训练的表现却不错，比如说错误会减少，甚至在100层，1000层的网络中也不例外。这种方式确实能有效的解决梯度消失和梯度爆炸的问题。让我们在训练更深的网络的同时，又能保证好的性能。</p><p><img data-src="/images/picturesof-4/CNN_29.png" alt="屏幕快照 2018-03-07 下午4.59.04"></p><p><img data-src="/images/picturesof-4/CNN_30.png" alt="屏幕快照 2018-03-07 下午6.31.41"></p><h2 id="1x1-Convolutions-1✖️1卷积"><a href="#1x1-Convolutions-1✖️1卷积" class="headerlink" title="1x1 Convolutions 1✖️1卷积"></a>1x1 Convolutions 1✖️1卷积</h2><p>使用1✖️1卷积可以根据自己的意愿来压缩或者保持、甚至增加输入层中信道的数量。</p><p><img data-src="/images/picturesof-4/CNN_31.png" alt="屏幕快照 2018-03-07 下午6.58.29"></p><p>上图中输入层中是28✖️28✖️192的维度，如果我们想要达到降维的效果，可以利用32个1✖️1的filter，因为过滤器的信道数量必须和输出层中的信道数量保持一致，所以每个filter中都有192个信道，每个过滤器进行一次卷积操作，再相加，最后生成一个28✖️28✖️32的输出层，达到了降维的效果。同样，想要达到增加或者保持维度的效果，使用1✖️1的卷积也是可以的。</p><p>下面介绍1✖️1卷积是如何运用到Inception网络中的。</p><h2 id="Inception-Network-Motivation-Inception网络"><a href="#Inception-Network-Motivation-Inception网络" class="headerlink" title="Inception Network Motivation Inception网络"></a>Inception Network Motivation Inception网络</h2><p>在做卷积网络时，你需要<strong>为过滤器的大小做决定，而Inception网络的作用就是它会自动为你做抉择</strong>，虽然网络架构因此会变得更加复杂，但网络表现却非常好。</p><p><strong>Inception网络不需要人为决定使用哪个过滤器，</strong>或是否需要池化，而是由网络自行确定这些参数，你可以给网络添加这些参数的所有可能值，然后把这些输出连接起来，让网络自己学习它需要什么样的参数，采用哪些过滤器组合。</p><p>如下图所示，输入层是一个28✖️28✖️192的矩阵，首先使用一个1✖️1的filter，输出一个28✖️28✖️64的矩阵，得到下图中的绿色块结果，以此类推，将filter的结果全部拼凑在一起，形成一个28✖️28✖️256的输出。</p><p><img data-src="/images/picturesof-4/CNN_32.png" alt="屏幕快照 2018-03-07 下午7.42.53"></p><p><strong>使用1✖️1卷积可以减少运算复杂度。</strong></p><p>如下，不使用1✖️1卷积计算次数为1.2亿次。</p><p><img data-src="/images/picturesof-4/CNN_33.png" alt="屏幕快照 2018-03-07 下午8.06.29"></p><p>使用1✖️1卷积，计算次数相较减少了10倍的计算量。<img data-src="/images/picturesof-4/CNN_34.png" alt="屏幕快照 2018-03-07 下午8.06.09"></p><p>将以上综合起来，构建自己的Inception网络。</p><p><img data-src="/images/picturesof-4/CNN_35.png" alt="屏幕快照 2018-03-07 下午8.36.19"></p><h1 id="Detection-algorithms"><a href="#Detection-algorithms" class="headerlink" title="Detection algorithms"></a>Detection algorithms</h1><h2 id="Object-Localization-对象定位"><a href="#Object-Localization-对象定位" class="headerlink" title="Object Localization 对象定位"></a>Object Localization 对象定位</h2><p><img data-src="/images/picturesof-4/CNN_36.png" alt="屏幕快照 2018-03-09 上午9.35.21"></p><p>首先先谈目标分类和目标定位问题。对于图片中可能的输出进行一个分类，这是分类问题，那么如何对图片中的目标物体进行定位呢？对于这个问题，<strong>我们将神经网络的输出增加一个目标标签y，用来表示目标物体的位置信息。</strong>如下所示，bx表示目标物体的中心的横坐标，by表示目标物体中心的纵坐标，bh表示目标物体的高度，bw表示物体的宽度。当然，这四个数据你在训练集中就应该构建好。<img data-src="/images/picturesof-4/CNN_37.png" alt="屏幕快照 2018-03-09 上午9.40.53"></p><p>那么如何表示<strong>输出呢？它是一个向量</strong>，第一个组件Pc表示是否含有对象，所以如果对象属于前3类，Pc值应该为1，<strong>也可以将Pc理解成被检测对象属于某一分类的概率。</strong>如果检测到了对象，就应该将它的位置信息也一并输出，也就是bx,by,bh,bw，还应该同时输出c1,c2,c3用来表示对象属于哪个类别。</p><p><img data-src="/images/picturesof-4/CNN_38.png" alt="屏幕快照 2018-03-09 上午9.59.35"></p><p>下面来讨论损失函数的定义。两种情况，如果检测到了物体，也就是Pc==1，那么将剩下元素做差平方相加，计算损失，如果没有检测到也就是Pc==0，那么我们只用检测第一个元素值，也就是Pc值即可。</p><p><img data-src="/images/picturesof-4/CNN_39.png" alt="屏幕快照 2018-03-09 上午10.02.14"></p><h2 id="Convolutional-Implementation-of-Sliding-Windows-卷积的滑动窗口实现"><a href="#Convolutional-Implementation-of-Sliding-Windows-卷积的滑动窗口实现" class="headerlink" title="Convolutional Implementation of Sliding Windows 卷积的滑动窗口实现"></a>Convolutional Implementation of Sliding Windows 卷积的滑动窗口实现</h2><p>如何通过卷积网络进行对象检测 —— 采用<strong>基于滑动窗口</strong>的目标检测算法。</p><p><img data-src="/images/picturesof-4/CNN_40.png" alt="屏幕快照 2018-03-12 上午10.06.06"></p><p>滑动窗口的过程在于，首先选取一个合适的窗口大小，将依据这个窗口对要预测的图片进行剪裁，将结果输入CNN，由CNN来预测窗口里是否含有目标物体。然后窗口向一个方向移动相应的步幅，由CNN再进行预测。</p><p><img data-src="/images/picturesof-4/CNN_41.png" alt="屏幕快照 2018-03-12 上午10.22.13"></p><p>滑动窗口算法带来的问题是，<strong>计算成本</strong>。如果你的窗口面积过小，那么将要多次对CNN进行输入操作，计算成本高。但是如果你将窗口调整的过大，则会带来粗粒度影响性能的问题。</p><p>幸运的是，上述过程所造成的计算成本问题已经得到了良好的解决。</p><p>为了构建滑动窗口的卷积运用，首先要知道如何把<strong>神经网络的全连接层转化为卷积层</strong>。我们<strong>使用一定大小的过滤器</strong>来将输出结果与传统意义上的全连接层输出结果保持一致。</p><p><img data-src="/images/picturesof-4/CNN_42.png" alt="屏幕快照 2018-03-12 上午10.40.46"></p><p>其次要解决的是，<strong>如何通过卷积来实现滑动窗口对象检测算法</strong>。可以看到，如果我们的输入图片从训练的14✖️14变成了16✖️16，我们在过滤器不变的情况下，对于最后这个4✖️4的输出矩阵可以理解为，左上角对应图片左上角的输出结果，右上角对应原始图片右上角的输出结果。以此类推。<strong>所以该卷积操作的原理是，我们不需要将输入图片分成四个子集，分别执行前向传播，而是把它们作为一张图片输入给卷积网络进行计算，一次得到所有的预测值。</strong>其中的公有区域可以共享很多计算。</p><p><img data-src="/images/picturesof-4/CNN_43.png" alt="屏幕快照 2018-03-12 上午11.16.05"></p><p>改进的方法大大提高了运算成本，但是也有一个缺点，就是<strong>边界框的位置不够准确</strong>。下面介绍如何解决这个问题。</p><h2 id="Bounding-Box-Predictions-预测边界-—-YOLO算法"><a href="#Bounding-Box-Predictions-预测边界-—-YOLO算法" class="headerlink" title="Bounding Box Predictions 预测边界 — YOLO算法"></a>Bounding Box Predictions 预测边界 — YOLO算法</h2><p>This algorithm “only looks once” at the image in the sense that it requires only one forward propagation pass through the network to make predictions. After non-max suppression, it then outputs recognized objects together with the bounding boxes.</p><p>如下图所示，当你在使用窗口检测目标物体时，如果窗口在移动过程中不能完全覆盖目标物体，那么怎样才能确定精准的边界框呢？</p><p><img data-src="/images/picturesof-4/CNN_44.png" alt="屏幕快照 2018-03-12 下午1.52.28"></p><p><strong>其中一个能得到更精准边界框的算法是，YOLO算法。</strong>YOLO的意思是“你只看一次”。是这么做的，比如你输入的图像是100✖️100的，然后在图像上放一个网格，将图像分类和定位算法分别应用到每个网格上，也就是有多个输出向量y，y的定义和之前一样。假如一个物体同时出现在了两个网格上，<strong>那么取物体的中心点，中心点在哪个网格上，那么物体就属于哪个网格。</strong></p><p><img data-src="/images/picturesof-4/CNN_45.png" alt="屏幕快照 2018-03-12 下午2.27.45"></p><p>再次说明一下，这个方法只对一个网格中出现一个物体的情况有效。对于出现多个物体的情况，稍后做详细的讨论。</p><p><img data-src="/images/picturesof-4/CNN_46.png" alt="屏幕快照 2018-03-12 下午2.34.49"></p><h2 id="Intersection-Over-Union-交并比函数"><a href="#Intersection-Over-Union-交并比函数" class="headerlink" title="Intersection Over Union 交并比函数"></a>Intersection Over Union 交并比函数</h2><p><strong>交并比函数可以用来评价对象检测算法。</strong>如果你希望定位到的对象是红色部分，但是你的算法却给出的是紫色部分，那么这个结果是好是坏呢？交并比的意思就是，<strong>计算两个边框交集和并集的比值(lOU)来检测结果的好坏。</strong>一般情况下，我们将lOU的阈值定义为0.5，并认为大于0.5就是一个可以接受的结果，当然你也可以定义更高。</p><p><img data-src="/images/picturesof-4/CNN_47.png" alt="屏幕快照 2018-03-12 下午3.11.02"></p><h2 id="Non-max-Suppression-非极大值抑制—检测YOLO算法"><a href="#Non-max-Suppression-非极大值抑制—检测YOLO算法" class="headerlink" title="Non-max Suppression 非极大值抑制—检测YOLO算法"></a>Non-max Suppression 非极大值抑制—检测YOLO算法</h2><p>到目前为止对象检测算法中的问题是，算法可能对同一个对象做出多次检测，所以算法不是对某一个对象检测出一次，而是检测出多次，<strong>非极大抑制这个方法可以确保你的算法对某个对象只检测出一次。</strong></p><p>假设下图是你需要进行检测的图片，将它用19✖️19的网格覆盖，每个车只有一个中点，也就是对于一辆覆盖到多个网格中的车来说，应该只有一个网格，也就是中点所在的网格的预测结果是1。</p><p>因为你要在所有网络上都跑一遍图像检测和定位算法，那么覆盖到车子的格子中输出y的PC的值都会是1，而不是所有格子中，只有两个格子会报告检测出了对象。所以最后可能会对一个对象做出多次检测。所以非最大抑制做的就是清理这些检测结果。所以每辆车只检测一次，而不是多次。当你检测出了多次时，<strong>选出输出概率最大的检测结果，对lOU值很高的其他边框进行抑制，这就是非最大值抑制的含义。</strong></p><p><img data-src="/images/picturesof-4/CNN_48.png" alt="屏幕快照 2018-03-12 下午3.50.54"></p><p>下面是Non-max Suppression算法的具体过程。</p><p><img data-src="/images/picturesof-4/CNN_49.png" alt="屏幕快照 2018-03-12 下午4.05.23"></p><h2 id="Anchor-Boxes"><a href="#Anchor-Boxes" class="headerlink" title="Anchor Boxes"></a>Anchor Boxes</h2><p><strong>如果你需要让一个格子能够检测出多个对象，那么就需要用到Anchor Boxes。</strong>如下图所示，如果你要检测的对象是人和车辆，这张图中这两者有同样一个中点，如果我们使用传统的y向量输出，会发现这两者的概率是一样的，那么我们必须从这两者中选择出一个作为结果，这是不合理的。Anchor Boxes的思路是这样的，预先定义两个不同形状的Anchor Boxes，把预测结果和这两个Anchor Boxes关联起来。</p><p><img data-src="/images/picturesof-4/CNN_50.png" alt="屏幕快照 2018-03-12 下午4.19.47"></p><p>总结一下，用Anchor Boxes之前，你做的是，对于训练图像中的每个对象，都根据那个对象中点的位置，将对象分配到某个格子中，然后输出一个3✖️3✖️8的向量，3✖️3是因为你用到9个网格，8是每个网格中的y输出(PC,bx,by,bw,bh,c1,c2,c3)。现在用到Anchor Boxes这个概念，现在每个对象都和之前一样分配到某个格子中（中点所在），但是它还分配到一个和对象形状交并比最高的Anchor Box中。所以现在的输出变成了3✖️3✖️16。</p><p><img data-src="/images/picturesof-4/CNN_51.png" alt="屏幕快照 2018-03-12 下午4.32.57"></p><p>下面举一个具体的例子。</p><p><img data-src="/images/picturesof-4/CNN_52.png" alt="屏幕快照 2018-03-12 下午4.40.30"></p><h2 id="YOLO-Algorithm"><a href="#YOLO-Algorithm" class="headerlink" title="YOLO Algorithm"></a>YOLO Algorithm</h2><p>我们将之前提到的所有组件组合在一起，<strong>构成YOLO对象检测算法</strong>。</p><p>y向量由Anchor Boxes组成，Anchor Boxes就可以看成y向量，下图中我们用到了两个Anchor Boxes，当我们进行检测是，假若检测到了物体，将边框画出后，与两个Anchor Boxes进行对比，发现与第二个Anchor Boxe的IOU值最高，那么车子就和向量的下半部分有关系。因为你将图片分成了9个网格，每个网格的维度是16，所以最后的输出是3✖️3✖️16。</p><p><img data-src="/images/picturesof-4/CNN_53.png" alt="屏幕快照 2018-03-12 下午4.53.00"></p><p><img data-src="/images/picturesof-4/CNN_54.png" alt="屏幕快照 2018-03-12 下午4.57.19"></p><p>最后你要跑一下非最大值抑制，这就是运行非最大值抑制的过程。如果你使用两个Anchor Boxes，那么对于9个格子中的任意一个都会有两个预测的边界框，其中一个的概率PC很低。<img data-src="/images/picturesof-4/CNN_55.png" alt="屏幕快照 2018-03-12 下午5.03.57"></p><p>接着你抛弃PC值很低的边界，连神经网络都说，这里可能什么都没有。</p><p><img data-src="/images/picturesof-4/CNN_56.png" alt="屏幕快照 2018-03-12 下午5.05.25"></p><p>最后，如果你有三个对象检测类别，对于每个类别，单独运行非最大抑制，处理预测结果是那个类别的边界框。</p><p><img data-src="/images/picturesof-4/CNN_57.png" alt="屏幕快照 2018-03-12 下午5.08.12"></p><h2 id="Region-Proposals-—-RPN网络"><a href="#Region-Proposals-—-RPN网络" class="headerlink" title="Region Proposals — RPN网络"></a>Region Proposals — RPN网络</h2><p>带区域的CNN —  这个算法尝试选出一些区域，在这些区域上运行CNN是有意义的。选出候选区域的方法是运行图像分割算法，先找出可能的多个色块，然后在各个色块上放置边界框。然后在边界框上跑CNN分类算法。这样需要处理的位置可能少得多。<img data-src="/images/picturesof-4/CNN_58.png" alt="屏幕快照 2018-03-12 下午5.24.12"></p><p><img data-src="/images/picturesof-4/CNN_59.png" alt="屏幕快照 2018-03-12 下午5.29.09"></p><p><strong>Summary:</strong></p><p><img data-src="/images/picturesof-4/CNN_60.png" alt="屏幕快照 2018-03-13 上午9.52.04"></p><p><img data-src="/images/picturesof-4/CNN_61.png" alt="屏幕快照 2018-03-13 上午9.55.50"></p><p><img data-src="/images/picturesof-4/CNN_62.png" alt="屏幕快照 2018-03-13 上午11.44.02"></p><h1 id="Face-Recognition"><a href="#Face-Recognition" class="headerlink" title="Face Recognition"></a>Face Recognition</h1><h2 id="Face-verification"><a href="#Face-verification" class="headerlink" title="Face verification"></a>Face verification</h2><p><img data-src="/images/picturesof-4/CNN_63.png" alt="屏幕快照 2018-03-13 下午3.11.41"></p><p><img data-src="/images/picturesof-4/CNN_64.png" alt="屏幕快照 2018-03-14 上午10.09.35"></p><h2 id="One-Shot-Learning-一次学习"><a href="#One-Shot-Learning-一次学习" class="headerlink" title="One Shot Learning 一次学习"></a>One Shot Learning 一次学习</h2><p>人脸识别所面临的一个挑战，就是你需要解决“一次学习”问题，即只需要单单一张图片，或者单单一个人脸样例，就能识别出一个人。现在的问题是，你的训练集中通常只有指定一个人的一张照片，如果公司新来一个人，难道要放进庞大的CNN体系中重新学习吗？</p><p><img data-src="/images/picturesof-4/CNN_65.png" alt="屏幕快照 2018-03-13 下午3.19.48"></p><p>所以要让神经网络做到一次学习，应该是学习<strong>“Similarity”函数</strong>。具体的说，你是希望<strong>神经网络能够学习这个用d表示的函数。它以两张照片作为输入，然后输出这两张照片的差异值。</strong></p><p><img data-src="/images/picturesof-4/CNN_66.png" alt="屏幕快照 2018-03-13 下午3.48.26"></p><h2 id="Siamese-Network-Siamese-网络"><a href="#Siamese-Network-Siamese-网络" class="headerlink" title="Siamese Network Siamese 网络"></a>Siamese Network Siamese 网络</h2><p><strong>实现上述d函数的一个方式就是Siamese 网络。</strong>也就是训练一组参数，使得如果输入的不是一个人的话，它的输出f(x1)会跟其他人的输出结果f(x2)产生差距，这个差距可以用诸如曼哈顿距离来衡量，如果两个输入的输出结果很相近，那么可以认为是同一个人。</p><p><img data-src="/images/picturesof-4/CNN_67.png" alt="屏幕快照 2018-03-13 下午4.10.16"></p><p><img data-src="/images/picturesof-4/CNN_68.png" alt="屏幕快照 2018-03-13 下午4.10.36"></p><h2 id="Triplet-Loss-—-三元组损失函数"><a href="#Triplet-Loss-—-三元组损失函数" class="headerlink" title="Triplet Loss — 三元组损失函数"></a>Triplet Loss — 三元组损失函数</h2><p>想要通过学习神经网络的参数来得到优质的人脸图片编码，方式之一就是使用<strong>三元组损失函数</strong>然后使用梯度下降。</p><p><strong>我们希望，相同人的图片的距离可以远远小于不相同的距离。</strong>为了防止无意义的0输出，使用一个间隔参数a。</p><p><img data-src="/images/picturesof-4/CNN_69.png" alt="屏幕快照 2018-03-13 下午4.58.36"></p><p>三元组损失函数的定义基于三张图片，样本图片A(Anchor)，相同人样本P(Positive)，不同人样本N(Negative)。<img data-src="/images/picturesof-4/CNN_70.png" alt="屏幕快照 2018-03-13 下午5.10.42"></p><p>在选择训练集的时候，要尽量避免使用随机的配对方式，因为随机的图片很容易满足损失函数的要求，为了达到更好的效果，<strong>建议使用比较难训练的样本</strong>，“比较难训练”是指A与N的距离，与A与P的距离非常相近。<img data-src="/images/picturesof-4/CNN_71.png" alt="屏幕快照 2018-03-13 下午5.28.22"></p><p><img data-src="/images/picturesof-4/CNN_72.png" alt="屏幕快照 2018-03-13 下午5.33.05"></p><h2 id="Face-Verification-and-Binary-Classification"><a href="#Face-Verification-and-Binary-Classification" class="headerlink" title="Face Verification and Binary Classification"></a>Face Verification and Binary Classification</h2><p>如何将人脸识别问题化作一个二分类问题？</p><p><img data-src="/images/picturesof-4/CNN_73.png" alt="屏幕快照 2018-03-13 下午5.50.23"></p><p><img data-src="/images/picturesof-4/CNN_74.png" alt="屏幕快照 2018-03-13 下午5.51.03"></p><p><img data-src="/images/picturesof-4/CNN_75.png" alt="屏幕快照 2018-03-14 上午11.12.29"></p><h1 id="Neural-Style-Transfer-神经风格迁移"><a href="#Neural-Style-Transfer-神经风格迁移" class="headerlink" title="Neural Style Transfer 神经风格迁移"></a>Neural Style Transfer 神经风格迁移</h1><p><img data-src="/images/picturesof-4/CNN_76.png" alt="屏幕快照 2018-03-13 下午7.02.31"></p><h2 id="What-are-deep-ConvNets-learning"><a href="#What-are-deep-ConvNets-learning" class="headerlink" title="What are deep ConvNets learning?"></a>What are deep ConvNets learning?</h2><p><img data-src="/images/picturesof-4/CNN_77.png" alt="屏幕快照 2018-03-13 下午7.09.06"></p><p><img data-src="/images/picturesof-4/CNN_78.png" alt="屏幕快照 2018-03-13 下午7.13.39"></p><h2 id="Cost-Function"><a href="#Cost-Function" class="headerlink" title="Cost Function"></a>Cost Function</h2><p>我们<strong>将损失函数定义为“内容损失➕风格损失”</strong>，内容损失是指生成的图片和原图内容的相似性，风格损失是指生成图片和原图风格的相似性。</p><p><img data-src="/images/picturesof-4/CNN_79.png" alt="屏幕快照 2018-03-13 下午7.22.05"></p><p><img data-src="/images/picturesof-4/CNN_80.png" alt="屏幕快照 2018-03-13 下午7.22.37"></p><h2 id="Content-Cost-Function-内容损失函数"><a href="#Content-Cost-Function-内容损失函数" class="headerlink" title="Content Cost Function 内容损失函数"></a>Content Cost Function 内容损失函数</h2><p>内容损失函数定义为某一隐藏层中与既定（如VGG网络）隐藏层激活后的值的相似程度。</p><p><img data-src="/images/picturesof-4/CNN_81.png" alt="屏幕快照 2018-03-13 下午7.32.08"></p><h2 id="Style-Cost-Function-风格损失函数"><a href="#Style-Cost-Function-风格损失函数" class="headerlink" title="Style Cost Function 风格损失函数"></a>Style Cost Function 风格损失函数</h2><p>风格损失函数定义为某一隐藏层中，通道之间的相关程度。</p><p><img data-src="/images/picturesof-4/CNN_82.png" alt="屏幕快照 2018-03-13 下午7.43.28"></p><p>这个相关程度可以理解为，比如风格图片是灰色的地方同时又出现了垂直线条。那么输入图片中，某一隐藏层，观察到了灰色和出现了垂直线条的几率，定义为通道之间的相关程度。</p><p><img data-src="/images/picturesof-4/CNN_83.png" alt="屏幕快照 2018-03-13 下午7.45.28"></p><p>损失函数定义如下：为输入图片与原图片，某一隐藏层，某一通道中激活值的相关性，使用绝对平方值来计算，还乘以了一个归一化常数。<img data-src="/images/picturesof-4/CNN_84.png" alt="屏幕快照 2018-03-13 下午8.00.14"></p><p>“内容损失➕风格损失  =  损失函数”</p><p><img data-src="/images/picturesof-4/CNN_85.png" alt="屏幕快照 2018-03-13 下午8.03.07"></p><p><img data-src="/images/picturesof-4/CNN_86.png" alt="屏幕快照 2018-03-14 上午9.16.13"></p><p><img data-src="/images/picturesof-4/CNN_87.png" alt="屏幕快照 2018-03-14 上午9.20.42"></p><p><img data-src="/images/picturesof-4/CNN_88.png" alt="屏幕快照 2018-03-14 上午9.40.49"></p><h2 id="1D-and-3D-Generalizations-一维到三维推广"><a href="#1D-and-3D-Generalizations-一维到三维推广" class="headerlink" title="1D and 3D Generalizations 一维到三维推广"></a>1D and 3D Generalizations 一维到三维推广</h2><p>许多图片不仅限于二维，有可能是1维或者3维。那么如何进行处理呢？我们一样可以使用卷积操作。<img data-src="/images/picturesof-4/CNN_89.png" alt="屏幕快照 2018-03-13 下午8.28.53"></p><p><img data-src="/images/picturesof-4/CNN_90.png" alt="屏幕快照 2018-03-13 下午8.29.33"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Convolutional-Neural-Networks&quot;&gt;&lt;a href=&quot;#Convolutional-Neural-Networks&quot; class=&quot;headerlink&quot; title=&quot;Convolutional Neural Networks&quot;&gt;&lt;/a&gt;Convolutional Neural Networks&lt;/h1&gt;&lt;h2 id=&quot;Edge-Detection&quot;&gt;&lt;a href=&quot;#Edge-Detection&quot; class=&quot;headerlink&quot; title=&quot;Edge Detection&quot;&gt;&lt;/a&gt;Edge Detection&lt;/h2&gt;&lt;p&gt;卷积运算是卷积神经网络最基本的组成成分，使用边缘检测作为入门样例。下面介绍卷积计算是如何实现的。&lt;/p&gt;
&lt;p&gt;使用一个3✖️3的&lt;strong&gt;过滤器(核)&lt;/strong&gt;与原始矩阵进行元素相乘，再相加，最后和的结果为&lt;strong&gt;卷积运算&lt;/strong&gt;后的第一个元素值，然后依次计算，下面例子中，做一次卷积运算后结果为一个4✖️4的矩阵。&lt;/p&gt;
&lt;p&gt;这种卷积运算可以理解成为，&lt;strong&gt;垂直边缘检测器。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/picturesof-4/CNN_1.png&quot; alt=&quot;屏幕快照 2018-02-09 下午12.25.09&quot;&gt;&lt;/p&gt;
&lt;p&gt;在不同的编程环境中可以使用不同的函数来实现卷积运算。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/picturesof-4/CNN_2.png&quot; alt=&quot;屏幕快照 2018-02-09 下午12.38.47&quot;&gt;&lt;/p&gt;
&lt;p&gt;那么为什么这个可以用作垂直检测呢？来看下面的例子。&lt;/p&gt;
    
    </summary>
    
    
      <category term="CV" scheme="https://unknown.yuzhouwan.com/categories/CV/"/>
    
    
      <category term="CNN" scheme="https://unknown.yuzhouwan.com/tags/CNN/"/>
    
  </entry>
  
  <entry>
    <title>Numpy基础</title>
    <link href="https://unknown.yuzhouwan.com/posts/21763/"/>
    <id>https://unknown.yuzhouwan.com/posts/21763/</id>
    <published>2017-09-28T11:09:26.000Z</published>
    <updated>2020-02-08T15:08:59.267Z</updated>
    
    <content type="html"><![CDATA[<p>Numpy是Python中用于科学计算的核心库。它提供了高性能的多维数组对象，以及相关工具</p><h1 id="绘制雪花"><a href="#绘制雪花" class="headerlink" title="绘制雪花"></a>绘制雪花</h1><p>转自博客上看到的一位大牛的程序，利用Numpy + matplotlib 绘制雪花，效果如下：</p><p><img data-src="/images/snow.jpg" alt="snow"></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">plt.rcParams[<span class="string">'font.sans-serif'</span>] = [<span class="string">'FangSong'</span>]  <span class="comment"># 指定默认字体</span></span><br><span class="line">plt.rcParams[<span class="string">'axes.unicode_minus'</span>] = <span class="literal">False</span>  <span class="comment"># 解决中文显示为方块的问题</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rotate</span><span class="params">(p, d)</span>:</span></span><br><span class="line">    <span class="string">"""返回点p绕原点逆时针旋转d度的坐标"""</span></span><br><span class="line"></span><br><span class="line">    a = np.radians(d)</span><br><span class="line">    m = np.array([[np.cos(a), np.sin(a)], [-np.sin(a), np.cos(a)]])</span><br><span class="line">    <span class="keyword">return</span> np.dot(p, m)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">koch_curve</span><span class="params">(p, q)</span>:</span></span><br><span class="line">    <span class="string">"""将线段pq生成科赫曲线，返回uvw三个点"""</span></span><br><span class="line"></span><br><span class="line">    p, q = np.array(p), np.array(q)</span><br><span class="line">    u = p + (q - p) / <span class="number">3</span>  <span class="comment"># 三等分点u的坐标</span></span><br><span class="line">    v = q - (q - p) / <span class="number">3</span>  <span class="comment"># 三等分点V的坐标</span></span><br><span class="line">    w = rotate(v - u, <span class="number">60</span>) + u  <span class="comment"># 线段uv绕u点逆时针旋转60°得到点w的坐标</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> u.tolist(), v.tolist(), w.tolist()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">snow</span><span class="params">(triangle, k)</span>:</span></span><br><span class="line">    <span class="string">"""给定三角形，生成封闭的科赫雪花"""</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(k):</span><br><span class="line">        result = list()</span><br><span class="line">        t_len = len(triangle)</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(t_len):</span><br><span class="line">            p = triangle[j]</span><br><span class="line">            q = triangle[(j + <span class="number">1</span>) % t_len]</span><br><span class="line">            u, v, w = koch_curve(p, q)</span><br><span class="line">            result.extend([p, u, w, v])</span><br><span class="line">        triangle = result.copy()</span><br><span class="line"></span><br><span class="line">    triangle.append(triangle[<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">return</span> triangle</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plot_snow</span><span class="params">(snow_list)</span>:</span></span><br><span class="line">    <span class="string">"""绘制雪花"""</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> triangle, k <span class="keyword">in</span> snow_list:</span><br><span class="line">        data = np.array(snow(triangle, k))</span><br><span class="line">        x, y = np.split(data, <span class="number">2</span>, axis=<span class="number">1</span>)</span><br><span class="line">        plt.plot(x, y)</span><br><span class="line"></span><br><span class="line">    plt.axis(<span class="string">'equal'</span>)</span><br><span class="line">    plt.show()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">snow_list = [</span><br><span class="line">    ([(<span class="number">0</span>, <span class="number">0</span>), (<span class="number">0.5</span>, <span class="number">0.8660254</span>), (<span class="number">1</span>, <span class="number">0</span>)], <span class="number">5</span>),</span><br><span class="line">    ([(<span class="number">1.1</span>, <span class="number">0.4</span>), (<span class="number">1.35</span>, <span class="number">0.8330127</span>), (<span class="number">1.6</span>, <span class="number">0.4</span>)], <span class="number">4</span>),</span><br><span class="line">    ([(<span class="number">1.1</span>, <span class="number">-0.1</span>), (<span class="number">1.25</span>, <span class="number">0.15980761</span>), (<span class="number">1.4</span>, <span class="number">-0.1</span>)], <span class="number">3</span>)</span><br><span class="line">]</span><br><span class="line">plot_snow(snow_list)</span><br></pre></td></tr></tbody></table></figure><a id="more"></a><h1 id="数组Arrays"><a href="#数组Arrays" class="headerlink" title="数组Arrays"></a>数组Arrays</h1><p>numpy数组是一个由不同数值组成的网格。网格中的数据都是<strong>同一种数据类型</strong>，可以通过非负整型数的元组来访问。</p><p>我们可以从列表创建数组，然后利用方括号访问其中的元素。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">a = np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])   <span class="comment">#创建一个一维数组</span></span><br><span class="line">print(type(a))</span><br><span class="line">print(a[<span class="number">0</span>],a[<span class="number">1</span>],a[<span class="number">2</span>])</span><br><span class="line">a[<span class="number">0</span>] = <span class="number">5</span></span><br><span class="line">print(a)</span><br><span class="line"></span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">numpy</span>.<span class="title">ndarray</span>'&gt;</span></span><br><span class="line"><span class="class">1 2 3</span></span><br><span class="line"><span class="class">[5 2 3]</span></span><br></pre></td></tr></tbody></table></figure><h1 id="函数shape-用法"><a href="#函数shape-用法" class="headerlink" title="函数shape()用法"></a>函数shape()用法</h1><p>shape函数功能室查看矩阵或者数组的<strong>维度</strong>。</p><p>例如：建立一个3✖3的单位矩阵e，e.shape()为（3，3），<strong>表示三行三列</strong>，第一维的长度是3，第二维的长度也是3。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">e = np.eye(<span class="number">3</span>)</span><br><span class="line">print(e)</span><br><span class="line">print(e.shape)</span><br><span class="line">print(e[<span class="number">0</span>,<span class="number">0</span>],e[<span class="number">1</span>,<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">[[ <span class="number">1.</span>  <span class="number">0.</span>  <span class="number">0.</span>]</span><br><span class="line"> [ <span class="number">0.</span>  <span class="number">1.</span>  <span class="number">0.</span>]</span><br><span class="line"> [ <span class="number">0.</span>  <span class="number">0.</span>  <span class="number">1.</span>]]</span><br><span class="line">(<span class="number">3</span>, <span class="number">3</span>)</span><br><span class="line"><span class="number">1.0</span> <span class="number">1.0</span></span><br></pre></td></tr></tbody></table></figure><p>建立一个一维矩阵b，b.shape为矩阵的长度。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">b = np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>])</span><br><span class="line">print(b.shape)</span><br><span class="line"></span><br><span class="line">(<span class="number">4</span>,)</span><br></pre></td></tr></tbody></table></figure><p>建立一个4✖2的矩阵c，c.shape[1]为第一维的长度，c.shape[0]为第二维的长度，c.shape[1]为第一维的长度。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">c = np.array([[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">5</span>],[<span class="number">9</span>,<span class="number">5</span>],[<span class="number">4</span>,<span class="number">0</span>]])</span><br><span class="line">print(c.shape[<span class="number">0</span>])</span><br><span class="line">print(c.shape[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></tbody></table></figure><p>一个单独的数值，返回值为空。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">np.shape(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">()</span><br></pre></td></tr></tbody></table></figure><h1 id="其他创建数组的方法"><a href="#其他创建数组的方法" class="headerlink" title="其他创建数组的方法"></a>其他创建数组的方法</h1><p>Numpy还提供了很多其他创建数组的方法：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">a = np.zeros((<span class="number">2</span>,<span class="number">3</span>))        <span class="comment">#创建一个2✖️3全0数组</span></span><br><span class="line">print(a)</span><br><span class="line">print(<span class="string">"\n"</span>)</span><br><span class="line"></span><br><span class="line">b = np.ones((<span class="number">1</span>,<span class="number">2</span>))         <span class="comment">#创建一个1✖️2全1数组</span></span><br><span class="line">print(b)</span><br><span class="line">print(<span class="string">"\n"</span>)</span><br><span class="line"></span><br><span class="line">c = np.full((<span class="number">4</span>,<span class="number">2</span>),<span class="number">7</span>)       <span class="comment">#创建一个4✖️2的全7数组</span></span><br><span class="line">print(c)</span><br><span class="line">print(<span class="string">"\n"</span>)</span><br><span class="line"></span><br><span class="line">d = np.eye(<span class="number">2</span>)              <span class="comment">#创建一个二维单位矩阵</span></span><br><span class="line">print(d)</span><br><span class="line">print(<span class="string">"\n"</span>)</span><br><span class="line"></span><br><span class="line">e = np.random.random((<span class="number">2</span>,<span class="number">2</span>))<span class="comment">#创建一个2✖️2由随机数字组成的数组</span></span><br><span class="line">print(e)</span><br><span class="line"></span><br><span class="line">[[ <span class="number">0.</span>  <span class="number">0.</span>  <span class="number">0.</span>]</span><br><span class="line"> [ <span class="number">0.</span>  <span class="number">0.</span>  <span class="number">0.</span>]]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[[ <span class="number">1.</span>  <span class="number">1.</span>]]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[[<span class="number">7</span> <span class="number">7</span>]</span><br><span class="line"> [<span class="number">7</span> <span class="number">7</span>]</span><br><span class="line"> [<span class="number">7</span> <span class="number">7</span>]</span><br><span class="line"> [<span class="number">7</span> <span class="number">7</span>]]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[[ <span class="number">1.</span>  <span class="number">0.</span>]</span><br><span class="line"> [ <span class="number">0.</span>  <span class="number">1.</span>]]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[[ <span class="number">0.82662589</span>  <span class="number">0.93604335</span>]</span><br><span class="line"> [ <span class="number">0.20764393</span>  <span class="number">0.53211415</span>]]</span><br></pre></td></tr></tbody></table></figure><h1 id="访问数组"><a href="#访问数组" class="headerlink" title="访问数组"></a>访问数组</h1><h2 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h2><p>切片：和Python列表类似，numpy数组可以使用切片语法。因为数组是多维的，所以必须为每个维度指定好切片。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建一个3✖️4的数组</span></span><br><span class="line">a = np.array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],[<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>],[<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>]])</span><br><span class="line">print(a)</span><br><span class="line">print(<span class="string">"\n"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#利用切片来截取前两行，第1到2列。注意这里“：2”是第0，1行，不包含第二行，与range()相同</span></span><br><span class="line">b = a[:<span class="number">2</span>,<span class="number">1</span>:<span class="number">3</span>]</span><br><span class="line">print(b)</span><br><span class="line">print(<span class="string">"\n"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#切片是原数组的一部分，所以改变切片，原数组也会改变</span></span><br><span class="line">print(a[<span class="number">0</span>,<span class="number">1</span>])</span><br><span class="line">b[<span class="number">0</span>,<span class="number">0</span>] = <span class="number">77</span></span><br><span class="line">print(a)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[[ <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span>  <span class="number">4</span>]</span><br><span class="line"> [ <span class="number">5</span>  <span class="number">6</span>  <span class="number">7</span>  <span class="number">8</span>]</span><br><span class="line"> [ <span class="number">9</span> <span class="number">10</span> <span class="number">11</span> <span class="number">12</span>]]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[[<span class="number">2</span> <span class="number">3</span>]</span><br><span class="line"> [<span class="number">6</span> <span class="number">7</span>]]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">2</span></span><br><span class="line">[[ <span class="number">1</span> <span class="number">77</span>  <span class="number">3</span>  <span class="number">4</span>]</span><br><span class="line"> [ <span class="number">5</span>  <span class="number">6</span>  <span class="number">7</span>  <span class="number">8</span>]</span><br><span class="line"> [ <span class="number">9</span> <span class="number">10</span> <span class="number">11</span> <span class="number">12</span>]]</span><br></pre></td></tr></tbody></table></figure><p>你可以<strong>同时使用整型和切片语法来访问数组</strong>。但是，这样<strong>会产生一个比原数组低阶的新数组。</strong></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment">#3✖️4</span></span><br><span class="line">a = np.array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],[<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>],[<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>]])</span><br><span class="line">print(a)</span><br><span class="line">print(a.shape)</span><br><span class="line">print(<span class="string">"\n"</span>)</span><br><span class="line"></span><br><span class="line">row_r1 = a[<span class="number">1</span>,:]</span><br><span class="line">row_r2 = a[<span class="number">1</span>:<span class="number">2</span>,:]</span><br><span class="line"></span><br><span class="line">print(row_r1)</span><br><span class="line">print(row_r1.shape)</span><br><span class="line">print(<span class="string">"\n"</span>)</span><br><span class="line"></span><br><span class="line">print(row_r2)</span><br><span class="line">print(row_r2.shape)</span><br><span class="line">print(<span class="string">"\n"</span>)</span><br><span class="line"></span><br><span class="line">[[ <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span>  <span class="number">4</span>]</span><br><span class="line"> [ <span class="number">5</span>  <span class="number">6</span>  <span class="number">7</span>  <span class="number">8</span>]</span><br><span class="line"> [ <span class="number">9</span> <span class="number">10</span> <span class="number">11</span> <span class="number">12</span>]]</span><br><span class="line">(<span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[<span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span>]</span><br><span class="line">(<span class="number">4</span>,)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[[<span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span>]]</span><br><span class="line">(<span class="number">1</span>, <span class="number">4</span>)</span><br></pre></td></tr></tbody></table></figure><h2 id="整型数组访问"><a href="#整型数组访问" class="headerlink" title="整型数组访问"></a>整型数组访问</h2><p> 当我们使用切片语法访问数组时，得到的总是原数组的一个子集。整型数组访问允许我们利用其他数组的数据构建一个新的数组。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">a = np.array([[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">4</span>],[<span class="number">5</span>,<span class="number">6</span>]])</span><br><span class="line">print(a)</span><br><span class="line">print(<span class="string">"\n"</span>)</span><br><span class="line"></span><br><span class="line">print(a[[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>],[<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>]])</span><br><span class="line"></span><br><span class="line"><span class="comment">#上面的print等价于</span></span><br><span class="line">print([a[<span class="number">0</span>,<span class="number">0</span>],a[<span class="number">1</span>,<span class="number">1</span>],a[<span class="number">2</span>,<span class="number">0</span>]])</span><br><span class="line"></span><br><span class="line">[[<span class="number">1</span> <span class="number">2</span>]</span><br><span class="line"> [<span class="number">3</span> <span class="number">4</span>]</span><br><span class="line"> [<span class="number">5</span> <span class="number">6</span>]]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[[<span class="number">1</span> <span class="number">4</span> <span class="number">5</span>]]</span><br><span class="line">[<span class="number">1</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br></pre></td></tr></tbody></table></figure><p>整型数组访问语法还有一个有用的技巧，可以用来选择或者更改矩阵中每行中的一个元素：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">a = np.array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>],[<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>],[<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>]])</span><br><span class="line">print(a)</span><br><span class="line">print(<span class="string">"\n"</span>)</span><br><span class="line"></span><br><span class="line">b = np.array([<span class="number">0</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">#利用b中的索引在a的每行选择一个元素</span></span><br><span class="line">print(a[np.arange(<span class="number">4</span>),b])</span><br><span class="line">print(<span class="string">"\n"</span>)</span><br><span class="line"></span><br><span class="line">a[np.arange(<span class="number">4</span>),b] += <span class="number">10</span></span><br><span class="line">print(a)</span><br><span class="line"></span><br><span class="line">[[ <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span>]</span><br><span class="line"> [ <span class="number">4</span>  <span class="number">5</span>  <span class="number">6</span>]</span><br><span class="line"> [ <span class="number">7</span>  <span class="number">8</span>  <span class="number">9</span>]</span><br><span class="line"> [<span class="number">10</span> <span class="number">11</span> <span class="number">12</span>]]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[ <span class="number">1</span>  <span class="number">6</span>  <span class="number">7</span> <span class="number">11</span>]</span><br><span class="line"></span><br><span class="line">[[<span class="number">11</span>  <span class="number">2</span>  <span class="number">3</span>]</span><br><span class="line"> [ <span class="number">4</span>  <span class="number">5</span> <span class="number">16</span>]</span><br><span class="line"> [<span class="number">17</span>  <span class="number">8</span>  <span class="number">9</span>]</span><br><span class="line"> [<span class="number">10</span> <span class="number">21</span> <span class="number">12</span>]]</span><br></pre></td></tr></tbody></table></figure><h2 id="布尔型数组访问"><a href="#布尔型数组访问" class="headerlink" title="布尔型数组访问"></a>布尔型数组访问</h2><p>布尔数组访问可以让你选择数组中任意元素。通常，这种访问方式用于选取数组中满足某些条件的元素。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">a = np.array([[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">4</span>],[<span class="number">5</span>,<span class="number">6</span>]])</span><br><span class="line"></span><br><span class="line"><span class="comment">#返回大于2的元素，这返回一个与原数组同型的布尔数组</span></span><br><span class="line">bool_idx = (a &gt; <span class="number">2</span>) </span><br><span class="line"></span><br><span class="line">print(bool_idx)</span><br><span class="line"></span><br><span class="line"><span class="comment">#利用生成的布尔数组构建一个大于2的一维数组</span></span><br><span class="line">print(a[bool_idx])</span><br><span class="line"></span><br><span class="line">print(a[a &gt; <span class="number">2</span>])</span><br><span class="line"></span><br><span class="line">[[<span class="literal">False</span> <span class="literal">False</span>]</span><br><span class="line"> [ <span class="literal">True</span>  <span class="literal">True</span>]</span><br><span class="line"> [ <span class="literal">True</span>  <span class="literal">True</span>]]</span><br><span class="line">[<span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span>]</span><br><span class="line">[<span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span>]</span><br></pre></td></tr></tbody></table></figure><h1 id="数组计算"><a href="#数组计算" class="headerlink" title="数组计算"></a>数组计算</h1><p>既可利用操作符重载，也可以使用函数方式：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">x = np.array([[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">4</span>]],dtype=np.float64)</span><br><span class="line">y = np.array([[<span class="number">5</span>,<span class="number">6</span>],[<span class="number">7</span>,<span class="number">8</span>]],dtype=np.float64)</span><br><span class="line"></span><br><span class="line"><span class="comment">#加</span></span><br><span class="line">print(x+y)</span><br><span class="line">print(np.add(x,y))</span><br><span class="line"></span><br><span class="line"><span class="comment">#减</span></span><br><span class="line">print(x-y)</span><br><span class="line">print(np.subtract(x,y))</span><br><span class="line"></span><br><span class="line"><span class="comment">#乘,对应元素乘法</span></span><br><span class="line">print(x*y)</span><br><span class="line">print(np.multiply(x,y))</span><br><span class="line"></span><br><span class="line"><span class="comment">#除，对应元素除法</span></span><br><span class="line">print(x/y)</span><br><span class="line">print(np.divide(x,y))</span><br><span class="line"></span><br><span class="line"><span class="comment">#开方</span></span><br><span class="line">print(np.sqrt(x))</span><br><span class="line"></span><br><span class="line"><span class="comment">#矩阵乘法</span></span><br><span class="line">a = np.array([[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">4</span>]])</span><br><span class="line">b = np.array([[<span class="number">5</span>,<span class="number">6</span>],[<span class="number">7</span>,<span class="number">8</span>]])</span><br><span class="line"></span><br><span class="line">v = np.array([<span class="number">9</span>,<span class="number">10</span>])</span><br><span class="line">w = np.array([<span class="number">11</span>,<span class="number">12</span>])</span><br><span class="line"></span><br><span class="line">print(v.dot(w))</span><br><span class="line">print(np.dot(v,w))</span><br><span class="line">print(a.dot(v))</span><br><span class="line">print(np.dot(a,v))</span><br></pre></td></tr></tbody></table></figure><p>Numpy提供了很多计算数组的函数，其中最常用的一个是sum:</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">x = np.array([[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">4</span>]])</span><br><span class="line"></span><br><span class="line"><span class="comment">#Compute sum of all elements</span></span><br><span class="line">print(np.sum(x))</span><br><span class="line"></span><br><span class="line"><span class="comment">#Compute sum of each column</span></span><br><span class="line">print(np.sum(x,axis=<span class="number">0</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#Compute sum of each row</span></span><br><span class="line">print(np.sum(x,axis=<span class="number">1</span>))</span><br></pre></td></tr></tbody></table></figure><p>查看更多函数，查看<a href="https://docs.scipy.org/doc/numpy/reference/routines.math.html" target="_blank" rel="noopener">SciPy.org</a></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">x = np.array([[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">4</span>]])</span><br><span class="line"><span class="comment">#转置</span></span><br><span class="line">print(x.T)</span><br></pre></td></tr></tbody></table></figure><p>查看<a href="https://docs.scipy.org/doc/numpy/reference/routines.array-manipulation.html" target="_blank" rel="noopener">更多操作数组的方法</a></p><h1 id="广播Broadcasting"><a href="#广播Broadcasting" class="headerlink" title="广播Broadcasting"></a>广播Broadcasting</h1><p>广播是一种强有力的机制，它让Numpy可以让不同大小的矩阵在一起进行数学计算。我们常会有一个小的矩阵和一个大的矩阵，然后需要用小的矩阵对大的矩阵做一些计算。</p><p>例如，我们想要把一个向量加到矩阵的每一行，我们可以这样做：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">x = np.array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>],[<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>],[<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>]])</span><br><span class="line">v = np.array([<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>])</span><br><span class="line"><span class="comment">#Create an empty matrix with the same shape as x</span></span><br><span class="line">y = np.empty_like(x)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">    y[i,:] = x[i,:] + v</span><br><span class="line">    </span><br><span class="line">print(y)</span><br></pre></td></tr></tbody></table></figure><p>这样是行的通的，但是当x矩阵非常大，利用循环开计算就会变得很慢很慢。我们可以换一种思路。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">x = np.array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>],[<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>],[<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>]])</span><br><span class="line">v = np.array([<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">#stack 4 copies of v on top of each other</span></span><br><span class="line">vv = np.tile(v,(<span class="number">4</span>,<span class="number">1</span>))</span><br><span class="line">print(vv)</span><br><span class="line"></span><br><span class="line">y = x + vv</span><br><span class="line">print(y)</span><br><span class="line"></span><br><span class="line">[[<span class="number">1</span> <span class="number">0</span> <span class="number">1</span>]</span><br><span class="line"> [<span class="number">1</span> <span class="number">0</span> <span class="number">1</span>]</span><br><span class="line"> [<span class="number">1</span> <span class="number">0</span> <span class="number">1</span>]</span><br><span class="line"> [<span class="number">1</span> <span class="number">0</span> <span class="number">1</span>]]</span><br><span class="line"></span><br><span class="line">[[ <span class="number">2</span>  <span class="number">2</span>  <span class="number">4</span>]</span><br><span class="line"> [ <span class="number">5</span>  <span class="number">5</span>  <span class="number">7</span>]</span><br><span class="line"> [ <span class="number">8</span>  <span class="number">8</span> <span class="number">10</span>]</span><br><span class="line"> [<span class="number">11</span> <span class="number">11</span> <span class="number">13</span>]]</span><br></pre></td></tr></tbody></table></figure><p><strong>Numpy广播机制可以让我们不用创建vv，就能直接运算</strong>，看看下面的例子。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">x = np.array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>],[<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>],[<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>]])</span><br><span class="line">v = np.array([<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">y = x + v</span><br><span class="line">print(y)</span><br><span class="line"></span><br><span class="line">[[ <span class="number">2</span>  <span class="number">2</span>  <span class="number">4</span>]</span><br><span class="line"> [ <span class="number">5</span>  <span class="number">5</span>  <span class="number">7</span>]</span><br><span class="line"> [ <span class="number">8</span>  <span class="number">8</span> <span class="number">10</span>]</span><br><span class="line"> [<span class="number">11</span> <span class="number">11</span> <span class="number">13</span>]]</span><br></pre></td></tr></tbody></table></figure><p>对两个数组使用广播机制要遵守下列规则：</p><p>1.如果数组的秩不同，使用1来将秩小的数组进行扩展，直到两个数组的尺寸长度都一样。</p><p>2.如果两个数组在某个维度上的长度是一样的，或者其中一个数组在该维度上的长度为1，那么我们说这两个数组在该维度上是<strong>相容</strong>的。</p><p>3.<strong>如果两个数组在所有维度上都是相容的，它们就能使用广播。</strong></p><p>4.如果两个输入数组的尺寸不同，那么注意其中较大的那个尺寸。因为广播之后，两个数组的尺寸将和较大的尺寸一样。</p><p>5.在任何一个维度上，如果一个数组的长度为1，另一个数组的长度大于1，那么在该维度上，就好像是对第一个数组进行了复制。</p><p>参阅<a href="https://docs.scipy.org/doc/numpy/user/basics.broadcasting.html" target="_blank" rel="noopener">文档</a>和<a href="http://scipy.github.io/old-wiki/pages/EricsBroadcastingDoc" target="_blank" rel="noopener">注释</a>。支持广播机制的函数是全局函数。哪些是全局函数可以在<a href="https://docs.scipy.org/doc/numpy/reference/ufuncs.html#available-ufuncs" target="_blank" rel="noopener">文档</a>中查找。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment">#v is [1,2,3],w is [4,5]</span></span><br><span class="line">v = np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line">w = np.array([<span class="number">4</span>,<span class="number">5</span>])</span><br><span class="line"></span><br><span class="line">print(np.reshape(v,(<span class="number">3</span>,<span class="number">1</span>)) * w)</span><br><span class="line"></span><br><span class="line"><span class="comment">#x is [[1,2,3]</span></span><br><span class="line"><span class="comment">#     [4,5,6]]</span></span><br><span class="line">x = np.array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]])</span><br><span class="line">print(x + v)</span><br><span class="line"></span><br><span class="line">print(x.T + w)</span><br><span class="line"></span><br><span class="line">print(x + np.reshape(w,(<span class="number">2</span>,<span class="number">1</span>)))</span><br><span class="line"></span><br><span class="line">print(x * <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">[[ <span class="number">4</span>  <span class="number">5</span>]</span><br><span class="line"> [ <span class="number">8</span> <span class="number">10</span>]</span><br><span class="line"> [<span class="number">12</span> <span class="number">15</span>]]</span><br><span class="line"></span><br><span class="line">[[<span class="number">2</span> <span class="number">4</span> <span class="number">6</span>]</span><br><span class="line"> [<span class="number">5</span> <span class="number">7</span> <span class="number">9</span>]]</span><br><span class="line"></span><br><span class="line">[[ <span class="number">5</span>  <span class="number">9</span>]</span><br><span class="line"> [ <span class="number">6</span> <span class="number">10</span>]</span><br><span class="line"> [ <span class="number">7</span> <span class="number">11</span>]]</span><br><span class="line"></span><br><span class="line">[[ <span class="number">5</span>  <span class="number">6</span>  <span class="number">7</span>]</span><br><span class="line"> [ <span class="number">9</span> <span class="number">10</span> <span class="number">11</span>]]</span><br><span class="line"></span><br><span class="line">[[ <span class="number">2</span>  <span class="number">4</span>  <span class="number">6</span>]</span><br><span class="line"> [ <span class="number">8</span> <span class="number">10</span> <span class="number">12</span>]]</span><br></pre></td></tr></tbody></table></figure><h1 id="Numpy文档"><a href="#Numpy文档" class="headerlink" title="Numpy文档"></a>Numpy文档</h1><p>此文介绍了numpy中的一些重要内容，但是numpy远不止如此，可以查阅<a href="https://docs.scipy.org/doc/numpy/reference/" target="_blank" rel="noopener">numpy</a>文献来学习更多。</p><h1 id="SciPy"><a href="#SciPy" class="headerlink" title="SciPy"></a>SciPy</h1><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pip3 install Pillow</span><br></pre></td></tr></tbody></table></figure><p>Numpy提供了高性能的多维数组，以及计算和操作数组的基本工具。Scipy基于Numpy，提供了大量的计算和操作数组的函数，这些函数对于不同类型的科学和工程计算非常有用。</p><p><a href="https://docs.scipy.org/doc/scipy/reference/index.html" target="_blank" rel="noopener">SciPy文档</a>。</p><h1 id="点之间的距离"><a href="#点之间的距离" class="headerlink" title="点之间的距离"></a>点之间的距离</h1><p>SciPy定义了一些有用的函数，可以计算集合中点之间的距离。</p><p>函数scipy.spatial.distance.pdist能够计算集合中所有两点之间的距离。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> scipy.spatial.distance <span class="keyword">import</span> pdist, squareform</span><br><span class="line"></span><br><span class="line">x = np.array([[<span class="number">0</span>,<span class="number">1</span>],[<span class="number">1</span>,<span class="number">0</span>],[<span class="number">2</span>,<span class="number">0</span>]])</span><br><span class="line">print(x)</span><br><span class="line"></span><br><span class="line">d = squareform(pdist(x,<span class="string">'euclidean'</span>))</span><br><span class="line">print(d)</span><br></pre></td></tr></tbody></table></figure><p>具体细节请阅读<a href="http://link.zhihu.com/?target=http%3A//docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.distance.pdist.html">文档</a>。</p><p>函数<strong>scipy.spatial.distance.cdist</strong>可以计算不同集合中点的距离，具体请查看<a href="http://link.zhihu.com/?target=http%3A//docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.distance.cdist.html">文档</a>。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Numpy是Python中用于科学计算的核心库。它提供了高性能的多维数组对象，以及相关工具&lt;/p&gt;
&lt;h1 id=&quot;绘制雪花&quot;&gt;&lt;a href=&quot;#绘制雪花&quot; class=&quot;headerlink&quot; title=&quot;绘制雪花&quot;&gt;&lt;/a&gt;绘制雪花&lt;/h1&gt;&lt;p&gt;转自博客上看到的一位大牛的程序，利用Numpy + matplotlib 绘制雪花，效果如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/snow.jpg&quot; alt=&quot;snow&quot;&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; numpy &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; np&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; plt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;plt.rcParams[&lt;span class=&quot;string&quot;&gt;&#39;font.sans-serif&#39;&lt;/span&gt;] = [&lt;span class=&quot;string&quot;&gt;&#39;FangSong&#39;&lt;/span&gt;]  &lt;span class=&quot;comment&quot;&gt;# 指定默认字体&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;plt.rcParams[&lt;span class=&quot;string&quot;&gt;&#39;axes.unicode_minus&#39;&lt;/span&gt;] = &lt;span class=&quot;literal&quot;&gt;False&lt;/span&gt;  &lt;span class=&quot;comment&quot;&gt;# 解决中文显示为方块的问题&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;rotate&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(p, d)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;&quot;&quot;返回点p绕原点逆时针旋转d度的坐标&quot;&quot;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    a = np.radians(d)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    m = np.array([[np.cos(a), np.sin(a)], [-np.sin(a), np.cos(a)]])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; np.dot(p, m)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;koch_curve&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(p, q)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;&quot;&quot;将线段pq生成科赫曲线，返回uvw三个点&quot;&quot;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    p, q = np.array(p), np.array(q)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    u = p + (q - p) / &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;  &lt;span class=&quot;comment&quot;&gt;# 三等分点u的坐标&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    v = q - (q - p) / &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;  &lt;span class=&quot;comment&quot;&gt;# 三等分点V的坐标&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    w = rotate(v - u, &lt;span class=&quot;number&quot;&gt;60&lt;/span&gt;) + u  &lt;span class=&quot;comment&quot;&gt;# 线段uv绕u点逆时针旋转60°得到点w的坐标&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; u.tolist(), v.tolist(), w.tolist()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;snow&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(triangle, k)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;&quot;&quot;给定三角形，生成封闭的科赫雪花&quot;&quot;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; range(k):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        result = list()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        t_len = len(triangle)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; j &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; range(t_len):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            p = triangle[j]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            q = triangle[(j + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) % t_len]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            u, v, w = koch_curve(p, q)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            result.extend([p, u, w, v])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        triangle = result.copy()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    triangle.append(triangle[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; triangle&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;plot_snow&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(snow_list)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;&quot;&quot;绘制雪花&quot;&quot;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; triangle, k &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; snow_list:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        data = np.array(snow(triangle, k))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        x, y = np.split(data, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, axis=&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        plt.plot(x, y)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    plt.axis(&lt;span class=&quot;string&quot;&gt;&#39;equal&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    plt.show()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;snow_list = [&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ([(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;), (&lt;span class=&quot;number&quot;&gt;0.5&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0.8660254&lt;/span&gt;), (&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)], &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ([(&lt;span class=&quot;number&quot;&gt;1.1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0.4&lt;/span&gt;), (&lt;span class=&quot;number&quot;&gt;1.35&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0.8330127&lt;/span&gt;), (&lt;span class=&quot;number&quot;&gt;1.6&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0.4&lt;/span&gt;)], &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ([(&lt;span class=&quot;number&quot;&gt;1.1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;-0.1&lt;/span&gt;), (&lt;span class=&quot;number&quot;&gt;1.25&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0.15980761&lt;/span&gt;), (&lt;span class=&quot;number&quot;&gt;1.4&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;-0.1&lt;/span&gt;)], &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;plot_snow(snow_list)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="DataView" scheme="https://unknown.yuzhouwan.com/categories/DataView/"/>
    
    
      <category term="Python" scheme="https://unknown.yuzhouwan.com/tags/Python/"/>
    
      <category term="Numpy" scheme="https://unknown.yuzhouwan.com/tags/Numpy/"/>
    
  </entry>
  
  <entry>
    <title>数据可视化基础</title>
    <link href="https://unknown.yuzhouwan.com/posts/18173/"/>
    <id>https://unknown.yuzhouwan.com/posts/18173/</id>
    <published>2017-09-24T20:50:00.000Z</published>
    <updated>2020-04-06T12:51:43.215Z</updated>
    
    <content type="html"><![CDATA[<h1 id="生成数据"><a href="#生成数据" class="headerlink" title="生成数据"></a>生成数据</h1><h2 id="安装matplotlib"><a href="#安装matplotlib" class="headerlink" title="安装matplotlib"></a>安装matplotlib</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pip3 install --user matplotlib</span><br></pre></td></tr></tbody></table></figure><h3 id="测试matplotlib"><a href="#测试matplotlib" class="headerlink" title="测试matplotlib"></a>测试matplotlib</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ python3</span><br><span class="line">&gt;&gt; <span class="keyword">import</span> matplotlib</span><br></pre></td></tr></tbody></table></figure><p>如果没有出现任何错误消息，就说明你系统安装了matplotlib。</p><h3 id="matplotlib画廊"><a href="#matplotlib画廊" class="headerlink" title="matplotlib画廊"></a>matplotlib画廊</h3><p>要查看使用matplotlib可制作的各种图表，请访问<a href="http://matplotlib.org/的示例画廊。单击画廊中的图表，就可查看用于生成图表的代码。" target="_blank" rel="noopener">http://matplotlib.org/的示例画廊。单击画廊中的图表，就可查看用于生成图表的代码。</a></p><h2 id="绘制简单的折线图plot"><a href="#绘制简单的折线图plot" class="headerlink" title="绘制简单的折线图plot()"></a>绘制简单的折线图plot()</h2><p>我们将使用平方数序列1、4、9、16和25来绘制这个图标。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">squares = [<span class="number">1</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="number">16</span>,<span class="number">25</span>]</span><br><span class="line">plt.plot(squares)</span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p><img data-src="/images/Python-base/DataView_1.png" alt="2017-09-19.2.15.10"></p><p>首先，导入了模块pyplot，并给它指定了别名plt。模块pyplot包含很多用于生成图标的函数。</p><p>我们创建了一个列表，在其中存储了前述平方数，再将这个列表传递给函数plot()。</p><p>plt.show()打开matplotlib查看器，并显示绘制的图形。</p><h3 id="修改标签文字和线条粗细"><a href="#修改标签文字和线条粗细" class="headerlink" title="修改标签文字和线条粗细"></a>修改标签文字和线条粗细</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">squares = [<span class="number">1</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="number">16</span>,<span class="number">25</span>]</span><br><span class="line">plt.plot(squares,linewidth=<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#设置图表标题，并给坐标轴加上标签</span></span><br><span class="line">plt.title(<span class="string">"Square Numbers"</span>,fontsize=<span class="number">24</span>)</span><br><span class="line">plt.xlabel(<span class="string">"Value"</span>,fontsize=<span class="number">14</span>)</span><br><span class="line">plt.ylabel(<span class="string">"Square of Value"</span>,fontsize=<span class="number">14</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#设置刻度标记的大小</span></span><br><span class="line">plt.tick_params(axis=<span class="string">'both'</span>,labelsize=<span class="number">14</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p>tick_params()设置刻度的样式，其中指定的实参将影响x轴和y轴上的刻度（axis=’both’），并将刻度标记的字号设置为14。</p><p><img data-src="/images/Python-base/DataView_2.png" alt="017-09-19.3.16.14"></p><h3 id="校正图形"><a href="#校正图形" class="headerlink" title="校正图形"></a>校正图形</h3><p>我们发现没有正确的绘制数据：折线图的终点指出4.0的平方为25！下面来修复这个问题。</p><a id="more"></a><p>当你向plot()提供一系列数字时，它假设第一个数据点对应的x坐标值为0，但我们的第一个点对应的x值为1。为改变这种默认行为，我们可以给plot()同时提供输入值和输出值。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">input_values = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">squares = [<span class="number">1</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="number">16</span>,<span class="number">25</span>]</span><br><span class="line">plt.plot(input_values,squares,linewidth=<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#设置图表标题，并给坐标轴加上标签</span></span><br><span class="line">plt.title(<span class="string">"Square Numbers"</span>,fontsize=<span class="number">24</span>)</span><br><span class="line">plt.xlabel(<span class="string">"Value"</span>,fontsize=<span class="number">14</span>)</span><br><span class="line">plt.ylabel(<span class="string">"Square of Value"</span>,fontsize=<span class="number">14</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#设置刻度标记的大小</span></span><br><span class="line">plt.tick_params(axis=<span class="string">'both'</span>,labelsize=<span class="number">14</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p><img data-src="/images/Python-base/DataView_3.png" alt="屏幕快照 2017-09-19 下午3.30.45"></p><h3 id="使用scatter-绘制散点图"><a href="#使用scatter-绘制散点图" class="headerlink" title="使用scatter()绘制散点图"></a>使用scatter()绘制散点图</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">plt.scatter(<span class="number">2</span>,<span class="number">4</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p><img data-src="/images/Python-base/DataView_4.png" alt="屏幕快照 2017-09-19 下午3.56.57"></p><p>向函数scatter()传递一对x和y坐标，它将在指定位置绘制一个点。</p><p>优化此图形：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">plt.scatter(<span class="number">2</span>,<span class="number">4</span>,s=<span class="number">200</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#设置图表标题并给坐标轴加上标签</span></span><br><span class="line">plt.title(<span class="string">"Square Numbers"</span>,fontsize=<span class="number">24</span>)</span><br><span class="line">plt.xlabel(<span class="string">"Value"</span>,fontsize=<span class="number">14</span>)</span><br><span class="line">plt.ylabel(<span class="string">"Square of Value"</span>,fontsize=<span class="number">14</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#设置刻度标记的大小</span></span><br><span class="line">plt.tick_params(axis=<span class="string">'both'</span>,which=<span class="string">'major'</span>,labelsize=<span class="number">14</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p>Scatter()中的实参s设置了绘制图形时使用的点的尺寸。</p><p><img data-src="/images/Python-base/DataView_5.png" alt="屏幕快照 2017-09-19 下午4.05.05"></p><h3 id="使用scatter-绘制一系列点"><a href="#使用scatter-绘制一系列点" class="headerlink" title="使用scatter()绘制一系列点"></a>使用scatter()绘制一系列点</h3><p>要绘制一系列点，可向scatter()传递两个分别包含x和y的列表。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">x_values = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">y_values = [<span class="number">1</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="number">16</span>,<span class="number">25</span>]</span><br><span class="line"></span><br><span class="line">plt.scatter(x_values,y_values,s=<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#设置图表标题并给坐标轴加上标签</span></span><br><span class="line">plt.title(<span class="string">"Square Numbers"</span>,fontsize=<span class="number">24</span>)</span><br><span class="line">plt.xlabel(<span class="string">"Value"</span>,fontsize=<span class="number">14</span>)</span><br><span class="line">plt.ylabel(<span class="string">"Square of Value"</span>,fontsize=<span class="number">14</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#设置刻度标记的大小</span></span><br><span class="line">plt.tick_params(axis=<span class="string">'both'</span>,which=<span class="string">'major'</span>,labelsize=<span class="number">14</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p>将这些列表传递给scatter()时，matplotlib<strong>依次从每个列表中读取一个值来绘制一个点。</strong></p><p><img data-src="/images/Python-base/DataView_6.png" alt="屏幕快照 2017-09-19 下午4.17.41"></p><h3 id="自动计算数据"><a href="#自动计算数据" class="headerlink" title="自动计算数据"></a>自动计算数据</h3><p>手工计算列表要包含的值可能效率低下，需要绘制的点很多时尤其如此。可以不必手工计算包含点坐标的列表，而让Python循环来替我们完成这种事。下面绘制了1000个点。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">x_values = list(range(<span class="number">1</span>,<span class="number">1001</span>))</span><br><span class="line">y_values = [x**<span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> x_values]</span><br><span class="line"></span><br><span class="line">plt.scatter(x_values,y_values,s=<span class="number">40</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#设置图表标题并给坐标轴加上标签</span></span><br><span class="line">plt.title(<span class="string">"Square Numbers"</span>,fontsize=<span class="number">24</span>)</span><br><span class="line">plt.xlabel(<span class="string">"Value"</span>,fontsize=<span class="number">14</span>)</span><br><span class="line">plt.ylabel(<span class="string">"Square of Value"</span>,fontsize=<span class="number">14</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#设置刻度标记的大小</span></span><br><span class="line">plt.tick_params(axis=<span class="string">'both'</span>,which=<span class="string">'major'</span>,labelsize=<span class="number">14</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#设置每个坐标轴的取值范围</span></span><br><span class="line">plt.axis([<span class="number">0</span>,<span class="number">1100</span>,<span class="number">0</span>,<span class="number">1100000</span>])</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p>函数axis()要求提供四个值：x和y坐标轴的最小最大值。</p><p><img data-src="/images/Python-base/DataView_7.png" alt="屏幕快照 2017-09-19 下午4.38.12"></p><h3 id="删除数据点的轮廓"><a href="#删除数据点的轮廓" class="headerlink" title="删除数据点的轮廓"></a>删除数据点的轮廓</h3><p>matplotlib允许你给散点图中的各个点指定颜色。默认为蓝色点和黑色轮廓，在散点图不含数据不多时效果很好。但绘制很多点时，黑色轮廓可能会粘连在一起。删除轮廓,传递实参edgecolor。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plt.scatter(x_values,y_values,edgecolor=<span class="string">'none'</span>,s=<span class="number">40</span>)</span><br></pre></td></tr></tbody></table></figure><h3 id="自定义颜色"><a href="#自定义颜色" class="headerlink" title="自定义颜色"></a>自定义颜色</h3><p>修改数据点的颜色，向scatter()传递参数c，如下：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plt.scatter(x_values,y_values,c=<span class="string">'red'</span>,edgecolor=<span class="string">'none'</span>,s=<span class="number">40</span>)</span><br></pre></td></tr></tbody></table></figure><p>你还可以使用RGB颜色模式自定义颜色。要指定自定义颜色，可传递参数c，并将其设置为一个元组，其中包含三个0～1之间的小数值，它们分别表示红色、绿色和蓝色分量。例如，下面代码将创建一个由淡蓝色点组成的散点图：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plt.scatter(x_values,y_values,c=(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.8</span>),edgecolor=<span class="string">'none'</span>,s=<span class="number">40</span>)</span><br></pre></td></tr></tbody></table></figure><p>值越接近0，指定的颜色越深，越接近1，指定的颜色越浅。</p><h3 id="使用颜色映射"><a href="#使用颜色映射" class="headerlink" title="使用颜色映射"></a>使用颜色映射</h3><p>颜色映射（colormap）是一系列颜色，它们从起始颜色渐变到结束颜色。在可视化中，颜色映射用于突出数据的规律，例如，你使用颜色深的表示数值大的，浅的表示小的。</p><p>模块pyplot内置了一组颜色映射。要使用这些颜色映射，你需要告诉pyplot如何设置数据集中每个点的颜色。下面演示如何根据每个点的y值来设置颜色：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">x_values = list(range(<span class="number">1</span>,<span class="number">1001</span>))</span><br><span class="line">y_values = [x**<span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> x_values]</span><br><span class="line"></span><br><span class="line"><span class="comment">#change</span></span><br><span class="line">plt.scatter(x_values,y_values,c=y_values,cmap=plt.cm.Blues,</span><br><span class="line">           edgecolor=<span class="string">'none'</span>,s=<span class="number">40</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#设置图表标题并给坐标轴加上标签</span></span><br><span class="line">plt.title(<span class="string">"Square Numbers"</span>,fontsize=<span class="number">24</span>)</span><br><span class="line">plt.xlabel(<span class="string">"Value"</span>,fontsize=<span class="number">14</span>)</span><br><span class="line">plt.ylabel(<span class="string">"Square of Value"</span>,fontsize=<span class="number">14</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#设置刻度标记的大小</span></span><br><span class="line">plt.tick_params(axis=<span class="string">'both'</span>,which=<span class="string">'major'</span>,labelsize=<span class="number">14</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#设置每个坐标轴的取值范围</span></span><br><span class="line">plt.axis([<span class="number">0</span>,<span class="number">1100</span>,<span class="number">0</span>,<span class="number">1100000</span>])</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p>我们将参数c设置成了一个y值列表，并使用<strong>参数cmap告诉pyplot使用哪个颜色映射。</strong>将较小的点设置成浅蓝色，较深的点设置成深蓝色。</p><p><img data-src="/images/Python-base/DataView_8.png" alt="屏幕快照 2017-09-19 下午4.58.54"></p><h3 id="自动保存图表"><a href="#自动保存图表" class="headerlink" title="自动保存图表"></a>自动保存图表</h3><p>让程序自动将图表保存到文件中，可将对plt.show()的调用替换为对plt.savefig()的调用：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plt.savefig(<span class="string">'squares_plot.png'</span>,bbox_inches=<span class="string">'tight'</span>)</span><br></pre></td></tr></tbody></table></figure><p>第一个实参指定要以什么样的文件名保存图表，这个文件存储到当前程序所在的目录中。第二个实参指定将图表多余的空白区域裁剪掉。如果要保留图表周围空白的区域，可省略这个实参。</p><h3 id="例：画Sigmoid函数图"><a href="#例：画Sigmoid函数图" class="headerlink" title="例：画Sigmoid函数图"></a>例：画Sigmoid函数图</h3><p><a href="https://zhuanlan.zhihu.com/p/40399870" target="_blank" rel="noopener">参考链接</a></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np  </span><br><span class="line"><span class="keyword">import</span> mpl_toolkits.axisartist <span class="keyword">as</span> axisartist</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建画布</span></span><br><span class="line">fig = plt.figure(figsize=(<span class="number">8</span>, <span class="number">8</span>))</span><br><span class="line"><span class="comment"># 使用axisartist.Subplot方法创建一个绘图区对象ax</span></span><br><span class="line">ax = axisartist.Subplot(fig, <span class="number">111</span>)</span><br><span class="line"><span class="comment"># 将绘图区对象添加到画布中</span></span><br><span class="line">fig.add_axes(ax)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过set_visible方法设置绘图区所有坐标轴隐藏</span></span><br><span class="line">ax.axis[:].set_visible(<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ax.new_floating_axis代表添加新的坐标轴</span></span><br><span class="line">ax.axis[<span class="string">"x"</span>] = ax.new_floating_axis(<span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line"><span class="comment"># 给x坐标轴加上箭头</span></span><br><span class="line">ax.axis[<span class="string">"x"</span>].set_axisline_style(<span class="string">"-&gt;"</span>, size=<span class="number">1.0</span>)</span><br><span class="line"><span class="comment"># 添加y坐标轴，且加上箭头</span></span><br><span class="line">ax.axis[<span class="string">"y"</span>] = ax.new_floating_axis(<span class="number">1</span>, <span class="number">0</span>)</span><br><span class="line">ax.axis[<span class="string">"y"</span>].set_axisline_style(<span class="string">"-|&gt;"</span>, size=<span class="number">1.0</span>)</span><br><span class="line"><span class="comment"># 设置x、y轴上刻度显示方向</span></span><br><span class="line">ax.axis[<span class="string">"x"</span>].set_axis_direction(<span class="string">"top"</span>)</span><br><span class="line">ax.axis[<span class="string">"y"</span>].set_axis_direction(<span class="string">"right"</span>)</span><br><span class="line"><span class="comment"># 生成x步长为0.1的列表数据</span></span><br><span class="line">x = np.arange(<span class="number">-15</span>, <span class="number">15</span>, <span class="number">0.1</span>)</span><br><span class="line"><span class="comment"># 生成sigmiod形式的y数据</span></span><br><span class="line">y = <span class="number">1</span> / (<span class="number">1</span> + np.exp(-x))</span><br><span class="line"><span class="comment"># 设置x、y坐标轴的范围</span></span><br><span class="line">plt.xlim(<span class="number">-12</span>, <span class="number">12</span>)</span><br><span class="line">plt.ylim(<span class="number">-1</span>, <span class="number">1</span>)</span><br><span class="line"><span class="comment"># 绘制图形</span></span><br><span class="line">plt.plot(x, y, c=<span class="string">'b'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p><img data-src="/images/Python-base/DataView_Sigmoid.png" alt="DataView_Sigmoid"></p><h2 id="随机漫步"><a href="#随机漫步" class="headerlink" title="随机漫步"></a>随机漫步</h2><p>我们使用python来生成随机漫步数据，再使用matplotlib以引人瞩目的方式将这些数据呈现出来。</p><p><strong>随机漫步数据</strong>是这样行走得到的路径：每次行走都是完全随机的，没有明确的方向，结果是由一系列随机决策决定的。在自然界、物理学、生物学、化学和经济领域，随机漫步都有其实际用途。例如，漂浮在水面上的花粉因不断受到水分子的挤压而在水面上移动。花粉在水面上的运动轨迹犹如随机漫步。</p><h3 id="创建RandomWalk-类"><a href="#创建RandomWalk-类" class="headerlink" title="创建RandomWalk()类"></a>创建RandomWalk()类</h3><p>为模拟随机漫步，我们将创建一个名为RandomWalk的类，它随机的选择前进方向。</p><p>这个类需要三个属性，其中一个是存储随机漫步的次数的变量，其他两个是列表，分别存储随机漫步经过的每个点的x和y坐标。包含两个方法：<em>_init()</em>,fill_walk(),其中后者计算随机漫步经过的所有点。</p><p>下面是init方法。（random_walk.py）</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> choice</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RandomWalk</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""一个生成随机漫步数据的类"""</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,num_points=<span class="number">5000</span>)</span>:</span></span><br><span class="line">        <span class="string">"""初始化随机漫步的属性"""</span></span><br><span class="line">        self.num_points = num_points</span><br><span class="line">        </span><br><span class="line">        <span class="comment">#所有随机漫步都始于（0，0）</span></span><br><span class="line">        self.x_values = [<span class="number">0</span>]</span><br><span class="line">        self.y_values = [<span class="number">0</span>]</span><br></pre></td></tr></tbody></table></figure><p>我们将所有的可能都存储在一个列表中，并在每次做决策时都使用choice()来决定使用哪种选择。我们将随机漫步包含的默认点数设置为5000。</p><h3 id="选择方向"><a href="#选择方向" class="headerlink" title="选择方向"></a>选择方向</h3><p>使用fill_walk()来生成漫步包含的点，并决定每次漫步的方向。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fill_walk</span><span class="params">(self)</span>:</span></span><br><span class="line">       <span class="string">"""计算随机漫步包含的所有的点"""</span></span><br><span class="line">       </span><br><span class="line">       <span class="comment">#不断漫步，直到列表达到指定的长度</span></span><br><span class="line">       <span class="keyword">while</span> len(self.x_values) &lt; self.num_points:</span><br><span class="line">            <span class="comment">#决定前进的方向以及沿这个方向前进的距离</span></span><br><span class="line">               x_direction = choice([<span class="number">-1</span>,<span class="number">1</span>])</span><br><span class="line">               x_distance = choice([<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>])</span><br><span class="line">               x_step = x_direction * x_distance</span><br><span class="line">               </span><br><span class="line">               y_direction = choice([<span class="number">-1</span>,<span class="number">1</span>])</span><br><span class="line">               y_distance = choice([<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>])</span><br><span class="line">               y_step = y_direction * y_distance</span><br><span class="line">               </span><br><span class="line">               <span class="comment">#拒绝原地踏步</span></span><br><span class="line">               <span class="keyword">if</span> x_step == <span class="number">0</span> <span class="keyword">and</span> y_step == <span class="number">0</span>:</span><br><span class="line">                   <span class="keyword">continue</span></span><br><span class="line">                   </span><br><span class="line">               <span class="comment">#计算下一个点的x和y值</span></span><br><span class="line">               next_x = self.x_values[<span class="number">-1</span>] + x_step</span><br><span class="line">               next_y = self.Y_values[<span class="number">-1</span>] + y_step</span><br><span class="line">               </span><br><span class="line">               self.x_values.append(next_x)</span><br><span class="line">               self.y_values.append(next_y)</span><br></pre></td></tr></tbody></table></figure><p> 方法choice([-1,1])将在-1，1表示在两者之间随机选择一个数。choice([0,1,2,3,4])是在这5个数中间随机选择一个数字，之所以包含0是因为可能点要沿垂直的方向行动。x_step与y_step是最终的步长，x_values[-1]，Y_values[-1]取到列表的最后一个元素，它们也用来保存最新行动的点，即append()方法。</p><h3 id="绘制随机漫步图"><a href="#绘制随机漫步图" class="headerlink" title="绘制随机漫步图"></a>绘制随机漫步图</h3><p>（rw_visual.py）</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> 　random_walk <span class="keyword">import</span> RandomWalk</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建一个RandomWalk实例，并将其包含的点都绘制出来</span></span><br><span class="line">rw = RandomWalk()</span><br><span class="line">rw.fill_walk()</span><br><span class="line">plt.scatter(rw.x_values,rw.y_values,s=<span class="number">15</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p>创建RandomWalk的实例rw，再调用fill_walk()。然后将实例中产生的x_values和y_values赋值给scatter()函数。</p><p>下图是包含5000个点的随机漫步图。</p><p><img data-src="/images/Python-base/DataView_9.png" alt="屏幕快照 2017-09-21 上午10.29.43"></p><h3 id="设置随机漫步图样式"><a href="#设置随机漫步图样式" class="headerlink" title="设置随机漫步图样式"></a>设置随机漫步图样式</h3><p>我们将定制图表，以突出每次漫步的重要特征，并让分散注意力的元素不那么显眼。最终的结果是简单的可视化表示，清楚地指出了每次漫步经过的路径。</p><h3 id="给点着色"><a href="#给点着色" class="headerlink" title="给点着色"></a>给点着色</h3><p>我们使用颜色映射来指出漫步中各点的先后顺序，并删除每个点的黑色轮廓。我们传递参数c，并将其设置为一个列表，其中包含各点的先后顺序。由于这些点是按照顺序绘制的，因此给参数c指定列表只需包含数字1～5000。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">point_numbers = list(range(rw.num_points))</span><br><span class="line">plt.scatter(rw.x_values,rw.y_values,c=point_numbers,cmap=plt.cm.Blues,edgecolor=<span class="string">'none'</span>,s=<span class="number">15</span>)</span><br></pre></td></tr></tbody></table></figure><p><img data-src="/images/Python-base/DataView_10.png" alt="屏幕快照 2017-09-21 上午11.14.58"></p><h3 id="重新绘制起点和终点"><a href="#重新绘制起点和终点" class="headerlink" title="重新绘制起点和终点"></a>重新绘制起点和终点</h3><p>除了给随机漫步的各个点着色，以指出它们的先后顺序外，如果还能呈现随机漫步的起点和终点就更好了。为此，可在绘制随机漫步图后重新绘制起点和终点。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#突出起点和终点</span></span><br><span class="line">plt.scatter(<span class="number">0</span>,<span class="number">0</span>,c=<span class="string">'green'</span>,edgecolors=<span class="string">'none'</span>,s=<span class="number">100</span>)</span><br><span class="line">plt.scatter(rw.x_values[<span class="number">-1</span>],rw.y_values[<span class="number">-1</span>],c=<span class="string">'red'</span>,edgecolors=<span class="string">'none'</span>,</span><br><span class="line">            s=<span class="number">100</span>)</span><br></pre></td></tr></tbody></table></figure><p><img data-src="/images/Python-base/DataView_11.png" alt="屏幕快照 2017-09-21 下午12.33.14"></p><h3 id="隐藏坐标轴"><a href="#隐藏坐标轴" class="headerlink" title="隐藏坐标轴"></a>隐藏坐标轴</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#隐藏坐标轴</span></span><br><span class="line">plt.axes().get_xaxis().set_visible(<span class="literal">False</span>)</span><br><span class="line">plt.axes().get_yaxis().set_visible(<span class="literal">False</span>)</span><br></pre></td></tr></tbody></table></figure><h3 id="增加点数"><a href="#增加点数" class="headerlink" title="增加点数"></a>增加点数</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rw = RandomWalk(<span class="number">50000</span>)</span><br></pre></td></tr></tbody></table></figure><h3 id="调整屏幕以适应屏幕"><a href="#调整屏幕以适应屏幕" class="headerlink" title="调整屏幕以适应屏幕"></a>调整屏幕以适应屏幕</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#设置绘图窗口的尺寸</span></span><br><span class="line">plt.figure(dpi=<span class="number">227</span>,figsize=(<span class="number">10</span>,<span class="number">6</span>))</span><br></pre></td></tr></tbody></table></figure><p>函数figure()用于指定图表的宽度、高度、分辨率和背景色。你需要给figsize指定一个元组，单位为英寸。Python假定屏幕的分辨率为80像素／英寸，可利用形参dip向figure()传递该分辨率，有效的利用屏幕空间。</p><p><img data-src="/images/Python-base/DataView_12.png" alt="屏幕快照 2017-09-21 下午1.00.20 1"></p><h2 id="使用Pygal模拟掷骰子"><a href="#使用Pygal模拟掷骰子" class="headerlink" title="使用Pygal模拟掷骰子"></a>使用Pygal模拟掷骰子</h2><p>我们将使用Python<strong>可视化包Pygal</strong>来生成<strong>可缩放的矢量图形文件</strong>。对于需要在尺寸不同的屏幕上显示的图表，这很有用，它们会自动缩放。如果你打算以在线方式使用图表，请考虑使用Pygal来生成它们，这样它们在任何设备上显示时都会很美观。</p><p>如果掷两个骰子，为确定哪些点数出现的可能性最大，我们将生成一个表示掷骰子结果的数据集，并根据结果绘制出一个图形。</p><h3 id="安装Pygal"><a href="#安装Pygal" class="headerlink" title="安装Pygal"></a>安装Pygal</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pip3 install --user pygal==<span class="number">1.7</span></span><br></pre></td></tr></tbody></table></figure><h3 id="Pygal画廊"><a href="#Pygal画廊" class="headerlink" title="Pygal画廊"></a>Pygal画廊</h3><p>要了解使用Pygal可创建什么样的图表，可查看图表类型画廊， <a href="http://www.pygal.org/,单击Documentation，再单击Chart" target="_blank" rel="noopener">http://www.pygal.org/,单击Documentation，再单击Chart</a> types。每个示例都包含源代码。</p><h3 id="掷单个骰子"><a href="#掷单个骰子" class="headerlink" title="掷单个骰子"></a>掷单个骰子</h3><ul><li><p>创建Die类</p><p>下面的类模拟掷一个骰子。die.py</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Die</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""表示一个骰子的类"""</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,num_sides=<span class="number">6</span>)</span>:</span></span><br><span class="line">        <span class="string">"""骰子默认为6面"""</span></span><br><span class="line">        self.num_sides = num_sides</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">roll</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""返回一个位于1和骰子面数之间的随机值"""</span></span><br><span class="line">        <span class="keyword">return</span> randint(<span class="number">1</span>,self.num_sides)</span><br></pre></td></tr></tbody></table></figure><p>创建这个类的实例时，骰子默认面为6，如果指定了参数，这个值将用于设置骰子的面数，6面为D6，8面为D8，以此类推。方法roll()使用<strong>函数randint()</strong>来返回一个1和面数<strong>之间的随机数</strong>。这个函数可能返回起始值1，终止值num_sides或者这两个值之间的<strong>任何整数</strong>。（<strong>choice()返回列表列出的随机数）</strong></p></li></ul><ul><li><p>掷骰子</p><p>掷D6骰子，将结果打印出来，并检查结果是否合理。die_visual.py</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> die <span class="keyword">import</span> Die</span><br><span class="line"><span class="comment">#创建一个D6</span></span><br><span class="line">die = Die()</span><br><span class="line"></span><br><span class="line"><span class="comment">#掷100次骰子，并将结果存储在一个列表中</span></span><br><span class="line">results = []</span><br><span class="line"><span class="keyword">for</span> roll_num <span class="keyword">in</span> range(<span class="number">100</span>):</span><br><span class="line">    result = die.roll()</span><br><span class="line">    results.append(result)</span><br><span class="line"></span><br><span class="line">print(results)</span><br><span class="line"></span><br><span class="line">[<span class="number">6</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">5</span>]</span><br></pre></td></tr></tbody></table></figure></li></ul><ul><li><p>分析结果</p><p>分析掷一个D6骰子的结果，我们计算每个点数出现的次数。<strong>range()为1~num_sides</strong></p> <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#分析结果</span></span><br><span class="line">frequencies = []</span><br><span class="line"><span class="keyword">for</span> value <span class="keyword">in</span> range(<span class="number">1</span>,die.num_sides+<span class="number">1</span>):</span><br><span class="line">    frequency = results.count(value)</span><br><span class="line">    frequencies.append(frequency)</span><br><span class="line"></span><br><span class="line">[<span class="number">14</span>, <span class="number">18</span>, <span class="number">23</span>, <span class="number">12</span>, <span class="number">18</span>, <span class="number">15</span>]</span><br></pre></td></tr></tbody></table></figure></li></ul><ul><li><p>绘制直方图</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pygal</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> die <span class="keyword">import</span> Die</span><br><span class="line">--snip--</span><br><span class="line"></span><br><span class="line"><span class="comment">#对结果进行可视化</span></span><br><span class="line">hist = pygal.Bar()</span><br><span class="line"></span><br><span class="line">hist.title = <span class="string">"Results of rolling one D6 100 times."</span></span><br><span class="line">hist.x_labels = [<span class="string">'1'</span>,<span class="string">'2'</span>,<span class="string">'3'</span>,<span class="string">'4'</span>,<span class="string">'5'</span>,<span class="string">'6'</span>]</span><br><span class="line">hist.x_title = <span class="string">'Result'</span></span><br><span class="line">hist.y_title = <span class="string">'Frequency of Result'</span></span><br><span class="line"></span><br><span class="line">hist.add(<span class="string">'D6'</span>,frequencies)</span><br><span class="line">hist.render_to_file(<span class="string">'die_visual.svg'</span>)</span><br></pre></td></tr></tbody></table></figure><p>add()将一系列值添加到图表中（向它传递要给添加的值指定的标签，还有一个列表），最后，我们将这个图表渲染为一个SVG文件，这种文件的扩展名必须为.svg。</p><p>要查看生成的直方图，使用浏览器，新建标签页，在其中打开文件die _visual.svg，它位于其所在的文件夹内</p></li></ul><p><img data-src="/images/Python-base/DataView_13.png" alt="屏幕快照 2017-09-21 下午2.24.19"></p><h3 id="同时掷两个骰子"><a href="#同时掷两个骰子" class="headerlink" title="同时掷两个骰子"></a>同时掷两个骰子</h3><p>同时掷两个骰子时，得到的点数更多，结果分布也不同。每次掷两个骰子时，我们将两个骰子点数相加，并将结果存在results中。(dice_visual.py)(以下是部分代码，其他自行修改)</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> roll_num <span class="keyword">in</span> range(<span class="number">100</span>):</span><br><span class="line">    result = die_1.roll() + die_2.roll()</span><br><span class="line">    results.append(result)</span><br></pre></td></tr></tbody></table></figure><p><img data-src="/images/Python-base/DataView_14.png" alt="屏幕快照 2017-09-21 下午3.06.28"></p><h1 id="下载数据"><a href="#下载数据" class="headerlink" title="下载数据"></a>下载数据</h1><p>在本章中，将从网上下载数据，并对这些数据进行可视化。两种常见格式存储的数据：<strong>CSV 和 JSON。</strong>我们将使用Python模块csv来处理CSV数据（逗号分隔的值）。然后，使用matplotlib根据下载的数据创建一个图表。这两者我们用来分析天气数据，找出不同地区在同一时间内的最高温和最低温。</p><p>使用模块json来访问以JSON格式存储的人口数据，并使用Pygal绘制一幅按国别划分的人口地图。</p><h2 id="CSV文件格式"><a href="#CSV文件格式" class="headerlink" title="CSV文件格式"></a>CSV文件格式</h2><p>要在文本文件中存储数据，最简单的方式是将数据作为一系列<strong>以逗号分隔的值（CSV）</strong>写入文件。这样的文件称为CSV文件。例如：下面是一行CSV格式的天气数据：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2014</span><span class="number">-1</span><span class="number">-5</span>,<span class="number">13</span>,<span class="number">15</span>,<span class="number">14</span>,<span class="number">23</span>,<span class="number">34</span>,<span class="number">6</span>,<span class="number">32</span>,<span class="number">18</span>,<span class="number">19</span>,<span class="number">30</span>,<span class="number">29</span></span><br></pre></td></tr></tbody></table></figure><p>CSV文件对人来说阅读起来比较麻烦，但程序可轻松地提取并处理其中的值，这有助于加快数据分析过程。</p><p>将少量锡特卡的CSV格式的天气预报数据（sitka_weather_07-2014.csv）下载到当前文件夹中。</p><h3 id="分析CSV文件头"><a href="#分析CSV文件头" class="headerlink" title="分析CSV文件头"></a>分析CSV文件头</h3><p>csv模块包含在Python标准库中，可用于分析CSV文件中的数据行，让我们能快速提取感兴趣的值。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"></span><br><span class="line">filename = <span class="string">'sitka_weather_07-2014.csv'</span></span><br><span class="line"><span class="keyword">with</span> open(filename) <span class="keyword">as</span> f:</span><br><span class="line">    reader = csv.reader(f)</span><br><span class="line">    header_row = next(reader)</span><br><span class="line">    print(header_row)</span><br><span class="line">    </span><br><span class="line">[<span class="string">'AKDT'</span>, <span class="string">'Max TemperatureF'</span>, <span class="string">'Mean TemperatureF'</span>, <span class="string">'Min TemperatureF'</span>, <span class="string">'Max Dew PointF'</span>, <span class="string">'MeanDew PointF'</span>, <span class="string">'Min DewpointF'</span>, <span class="string">'Max Humidity'</span>, <span class="string">' Mean Humidity'</span>, <span class="string">' Min Humidity'</span>, <span class="string">' Max Sea Level PressureIn'</span>, <span class="string">' Mean Sea Level PressureIn'</span>, <span class="string">' Min Sea Level PressureIn'</span>, <span class="string">' Max VisibilityMiles'</span>, <span class="string">' Mean VisibilityMiles'</span>, <span class="string">' Min VisibilityMiles'</span>, <span class="string">' Max Wind SpeedMPH'</span>, <span class="string">' Mean Wind SpeedMPH'</span>, <span class="string">' Max Gust SpeedMPH'</span>, <span class="string">'PrecipitationIn'</span>, <span class="string">' CloudCover'</span>, <span class="string">' Events'</span>, <span class="string">' WindDirDegrees'</span>]</span><br></pre></td></tr></tbody></table></figure><p>调用csv.reader()将前面存储的文件对象作为实参传递给它，从而创建一个与该文件相关联的<strong>阅读器reader对象</strong>。将阅读器存储在reader中。<strong>模块cav包含函数next()</strong>,调用它将返回文件中的下一行。</p><p>reader处理文件中以逗号分隔的第一行数据，并将每个数据项都作为一个元素存储在列表中。</p><h3 id="打印文件头及其位置"><a href="#打印文件头及其位置" class="headerlink" title="打印文件头及其位置"></a>打印文件头及其位置</h3><p>我们将文件头及其位置打印出来。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"></span><br><span class="line">filename = <span class="string">'sitka_weather_07-2014.csv'</span></span><br><span class="line"><span class="keyword">with</span> open(filename) <span class="keyword">as</span> f:</span><br><span class="line">    reader = csv.reader(f)</span><br><span class="line">    header_row = next(reader)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> index,colum_header <span class="keyword">in</span> enumerate(header_row):</span><br><span class="line">        print(index,colum_header)</span><br><span class="line">        </span><br><span class="line"><span class="number">0</span> AKDT</span><br><span class="line"><span class="number">1</span> Max TemperatureF</span><br><span class="line"><span class="number">2</span> Mean TemperatureF</span><br><span class="line"><span class="number">3</span> Min TemperatureF</span><br><span class="line"><span class="number">4</span> Max Dew PointF</span><br><span class="line">.......</span><br></pre></td></tr></tbody></table></figure><p>我们对列表调用了enumerate()来获取每个元素的索引及其值。从中可知，日期和最高气温分别存储在第0列和第一列。我们将处理文件中的每行数据，并提取其中索引为0和1的值。</p><h3 id="提取并读取数据"><a href="#提取并读取数据" class="headerlink" title="提取并读取数据"></a>提取并读取数据</h3><p>首先读取每天的最高气温。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"></span><br><span class="line">filename = <span class="string">'sitka_weather_07-2014.csv'</span></span><br><span class="line"><span class="keyword">with</span> open(filename) <span class="keyword">as</span> f:</span><br><span class="line">    reader = csv.reader(f)</span><br><span class="line">    header_row = next(reader)</span><br><span class="line">    </span><br><span class="line">    highs = []</span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> reader:</span><br><span class="line">        highs.append(row[<span class="number">1</span>])</span><br><span class="line">        </span><br><span class="line">    print(highs)</span><br><span class="line"></span><br><span class="line">[<span class="string">'64'</span>, <span class="string">'71'</span>, <span class="string">'64'</span>, <span class="string">'59'</span>, <span class="string">'69'</span>, <span class="string">'62'</span>, <span class="string">'61'</span>, <span class="string">'55'</span>, <span class="string">'57'</span>, <span class="string">'61'</span>, <span class="string">'57'</span>, <span class="string">'59'</span>, <span class="string">'57'</span>, <span class="string">'61'</span>, <span class="string">'64'</span>, <span class="string">'61'</span>, <span class="string">'59'</span>, <span class="string">'63'</span>, <span class="string">'60'</span>, <span class="string">'57'</span>, <span class="string">'69'</span>, <span class="string">'63'</span>, <span class="string">'62'</span>, <span class="string">'59'</span>, <span class="string">'57'</span>, <span class="string">'57'</span>, <span class="string">'61'</span>, <span class="string">'59'</span>, <span class="string">'61'</span>, <span class="string">'61'</span>, <span class="string">'66'</span>]</span><br></pre></td></tr></tbody></table></figure><p>阅读器对象从其停留的地方继续往下读取csv文件，每次都自动返回当前所处位置的下一行。由于我们之前已经读取了文件头，这个循环将从第二行开始。</p><p>我们使用int()将这些字符串转化为数字，让matplotlib能够读取它们。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> highs.append(int(row[<span class="number">1</span>])</span><br><span class="line"> </span><br><span class="line">[<span class="number">64</span>, <span class="number">71</span>, <span class="number">64</span>, <span class="number">59</span>, <span class="number">69</span>, <span class="number">62</span>, <span class="number">61</span>, <span class="number">55</span>, <span class="number">57</span>, <span class="number">61</span>, <span class="number">57</span>, <span class="number">59</span>, <span class="number">57</span>, <span class="number">61</span>, <span class="number">64</span>, <span class="number">61</span>, <span class="number">59</span>, <span class="number">63</span>, <span class="number">60</span>, <span class="number">57</span>, <span class="number">69</span>, <span class="number">63</span>, <span class="number">62</span>, <span class="number">59</span>, <span class="number">57</span>, <span class="number">57</span>, <span class="number">61</span>, <span class="number">59</span>, <span class="number">61</span>, <span class="number">61</span>, <span class="number">66</span>]</span><br></pre></td></tr></tbody></table></figure><h3 id="绘制气温图表"><a href="#绘制气温图表" class="headerlink" title="绘制气温图表"></a>绘制气温图表</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">file_name = <span class="string">'sitka_weather_07-2014.csv'</span></span><br><span class="line"><span class="keyword">with</span> open(file_name) <span class="keyword">as</span> f:</span><br><span class="line">    reader = csv.reader(f)</span><br><span class="line">    header_row = next(reader)</span><br><span class="line">    </span><br><span class="line">    highs = []</span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> reader:</span><br><span class="line">        highs.append(int(row[<span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line"><span class="comment">#根据数据绘制图形</span></span><br><span class="line">fig = plt.figure(dpi=<span class="number">128</span>,figsize=(<span class="number">10</span>,<span class="number">6</span>))</span><br><span class="line">plt.plot(highs,c=<span class="string">'red'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#设置图形的格式</span></span><br><span class="line">plt.title(<span class="string">"Daily high temperature,July 2014"</span>,fontsize=<span class="number">24</span>)</span><br><span class="line">plt.xlabel(<span class="string">''</span>,fontsize=<span class="number">16</span>)</span><br><span class="line">plt.ylabel(<span class="string">'Temperature(F),fontsize=16'</span>)</span><br><span class="line">plt.tick_params(axis=<span class="string">'both'</span>,which=<span class="string">'major'</span>,labelsize=<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p><img data-src="/images/Python-base/DataView_15.png" alt="屏幕快照 2017-09-23 下午12.06.32"></p><h3 id="模块datetime"><a href="#模块datetime" class="headerlink" title="模块datetime"></a>模块datetime</h3><p>在天气数据文件中，第一个日期在第二行。地区该行时，获取的是一个字符串，因为我们需要将字符串“2014-7-1“转换为一个表示相应日期的对象。<strong>可使用模块datetime中的方法strptime()。</strong></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line">first_date = datetime.strptime(<span class="string">'2014-7-1'</span>,<span class="string">'%Y-%m-%d'</span>)</span><br><span class="line">print(first_date)</span><br><span class="line"></span><br><span class="line"><span class="number">2014</span><span class="number">-07</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span></span><br></pre></td></tr></tbody></table></figure><p>“%Y-“让Python将字符串中<strong>第一个连字符前面的部分</strong>视为四位的年份。strptime()可接受实参,并根据其解读日期。</p><div class="table-container"><table><thead><tr><th style="text-align:center">实       参</th><th style="text-align:center">含         义</th></tr></thead><tbody><tr><td style="text-align:center">%A</td><td style="text-align:center">星期的名称，如Monday</td></tr><tr><td style="text-align:center">%B</td><td style="text-align:center">月份，如January</td></tr><tr><td style="text-align:center">%m</td><td style="text-align:center">用数字表示的月份，（01～12）</td></tr><tr><td style="text-align:center">%d</td><td style="text-align:center">用数字表示月份中的一天，（01～31）</td></tr><tr><td style="text-align:center">%Y</td><td style="text-align:center">四位的年份，如2015</td></tr><tr><td style="text-align:center">%y</td><td style="text-align:center">两位的年份，如15</td></tr><tr><td style="text-align:center">%H</td><td style="text-align:center">24小时制的小时数（00～23）</td></tr><tr><td style="text-align:center">%I</td><td style="text-align:center">12小时制的小时数（01～12）</td></tr><tr><td style="text-align:center">%p</td><td style="text-align:center">am或pm</td></tr><tr><td style="text-align:center">%M</td><td style="text-align:center">分钟数（00～59）</td></tr><tr><td style="text-align:center">%S</td><td style="text-align:center">秒数（00～59）</td></tr></tbody></table></div><h3 id="在图表中添加日期"><a href="#在图表中添加日期" class="headerlink" title="在图表中添加日期"></a>在图表中添加日期</h3><p>调用fig.autofmt_xdate()来绘制斜的日期标签，以免它们彼此重叠。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">file_name = <span class="string">'sitka_weather_07-2014.csv'</span></span><br><span class="line"><span class="keyword">with</span> open(file_name) <span class="keyword">as</span> f:</span><br><span class="line">    reader = csv.reader(f)</span><br><span class="line">    header_row = next(reader)</span><br><span class="line">    </span><br><span class="line">    dates,highs = [],[]</span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> reader:</span><br><span class="line">        current_date = datetime.strptime(row[<span class="number">0</span>],<span class="string">"%Y-%m-%d"</span>)</span><br><span class="line">        dates.append(current_date)</span><br><span class="line">        highs.append(int(row[<span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line"><span class="comment">#根据数据绘制图形</span></span><br><span class="line">fig = plt.figure(dpi=<span class="number">128</span>,figsize=(<span class="number">10</span>,<span class="number">6</span>))</span><br><span class="line">plt.plot(dates,highs,c=<span class="string">'red'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#设置图形的格式</span></span><br><span class="line">plt.title(<span class="string">"Daily high temperature,July 2014"</span>,fontsize=<span class="number">24</span>)</span><br><span class="line">plt.xlabel(<span class="string">''</span>,fontsize=<span class="number">16</span>)</span><br><span class="line">fig.autofmt_xdate()</span><br><span class="line">plt.ylabel(<span class="string">'Temperature(F),fontsize=16'</span>)</span><br><span class="line">plt.tick_params(axis=<span class="string">'both'</span>,which=<span class="string">'major'</span>,labelsize=<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p><img data-src="/images/Python-base/DataView_16.png" alt="屏幕快照 2017-09-23 下午2.02.28"></p><h3 id="最高与最低气温"><a href="#最高与最低气温" class="headerlink" title="最高与最低气温"></a>最高与最低气温</h3><p>导入”sitka_weather_2014.csv”数据，它记录了sitka地区整年的气温变化，我们观察最高与最低气温。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">xiaimport csv</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">file_name = <span class="string">'sitka_weather_2014.csv'</span></span><br><span class="line"><span class="keyword">with</span> open(file_name) <span class="keyword">as</span> f:</span><br><span class="line">    reader = csv.reader(f)</span><br><span class="line">    header_row = next(reader)</span><br><span class="line">    </span><br><span class="line">    dates,highs,lows = [],[],[]</span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> reader:</span><br><span class="line">        current_date = datetime.strptime(row[<span class="number">0</span>],<span class="string">"%Y-%m-%d"</span>)</span><br><span class="line">        dates.append(current_date)</span><br><span class="line">        highs.append(int(row[<span class="number">1</span>]))</span><br><span class="line">        lows.append(int(row[<span class="number">3</span>]))</span><br><span class="line"></span><br><span class="line"><span class="comment">#根据数据绘制图形</span></span><br><span class="line">fig = plt.figure(dpi=<span class="number">128</span>,figsize=(<span class="number">10</span>,<span class="number">6</span>))</span><br><span class="line">plt.plot(dates,highs,c=<span class="string">'red'</span>)</span><br><span class="line">plt.plot(dates,lows,c=<span class="string">'blue'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#设置图形的格式</span></span><br><span class="line">plt.title(<span class="string">"Daily high and low temperature,2014"</span>,fontsize=<span class="number">24</span>)</span><br><span class="line">plt.xlabel(<span class="string">''</span>,fontsize=<span class="number">16</span>)</span><br><span class="line">fig.autofmt_xdate()</span><br><span class="line">plt.ylabel(<span class="string">'Temperature(F),fontsize=16'</span>)</span><br><span class="line">plt.tick_params(axis=<span class="string">'both'</span>,which=<span class="string">'major'</span>,labelsize=<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p><img data-src="/images/Python-base/DataView_17.png" alt="屏幕快照 2017-09-23 下午2.28.54"></p><p>下面给图表区域着色。使用fill_between()，它接受一个x值与y值系列，并填充两个y值系列之间的空间。<strong>alpha</strong>指定颜色的透明度。Alpha=0表示完全透明，1完全不透明。fill_between()传递了一个x值系列：列表dates，还传递了两个y值系列：highs和lows。facecolor指定了填充区域的颜色。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#根据数据绘制图形</span></span><br><span class="line">fig = plt.figure(dpi=<span class="number">128</span>,figsize=(<span class="number">10</span>,<span class="number">6</span>))</span><br><span class="line">plt.plot(dates,highs,c=<span class="string">'red'</span>,alpha=<span class="number">0.5</span>)</span><br><span class="line">plt.plot(dates,lows,c=<span class="string">'blue'</span>,alpha=<span class="number">0.5</span>)</span><br><span class="line">plt.fill_between(dates,highs,lows,facecolor=<span class="string">'blue'</span>,alpha=<span class="number">0.1</span>)</span><br></pre></td></tr></tbody></table></figure><p><img data-src="/images/Python-base/DataView_18.png" alt="屏幕快照 2017-09-23 下午2.39.56"></p><h3 id="错误检查"><a href="#错误检查" class="headerlink" title="错误检查"></a>错误检查</h3><p>数据的缺失可能引发异常，例如我们导入死亡谷的气温数据“death_valley_2014.csv”，并且运行上述代码。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ValueError: invalid literal <span class="keyword">for</span> int() <span class="keyword">with</span> base <span class="number">10</span>: <span class="string">''</span></span><br></pre></td></tr></tbody></table></figure><p>结果显示，无法处理文件中的一行数据，因为它无法将空字符串转化为整数。我们打开文件，发现其中没有记录2014-2-16的数据，最高气温的字符串为空。</p><p>我们在csv文件中读取值时执行错误检查代码，<strong>对分析数据集时可能出现的异常进行处理。</strong></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">--snip--</span><br><span class="line">dates,highs,lows = [],[],[]</span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> reader:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            current_date = datetime.strptime(row[<span class="number">0</span>],<span class="string">"%Y-%m-%d"</span>)</span><br><span class="line">            high = int(row[<span class="number">1</span>])</span><br><span class="line">            low = int(row[<span class="number">3</span>])</span><br><span class="line">        <span class="keyword">except</span> ValueError:</span><br><span class="line">            print(current_date,<span class="string">'missing data'</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            dates.append(current_date)</span><br><span class="line">            highs.append(high)</span><br><span class="line">            lows.append(low)</span><br><span class="line">--snip--</span><br></pre></td></tr></tbody></table></figure><p><img data-src="/images/Python-base/DataView_19.png" alt="屏幕快照 2017-09-23 下午3.04.05"></p><p>可以看到，有一个数据没有读到。其他正常显示。</p><!--more--><h2 id="制作世界人口地图：JSON格式"><a href="#制作世界人口地图：JSON格式" class="headerlink" title="制作世界人口地图：JSON格式"></a>制作世界人口地图：JSON格式</h2><p>Pygal提供了一个适合初学者使用的地图创建工具，使用它对人口数据进行可视化，以探索全球人口的分布情况。</p><p>文件population_data.json中包含全球大部分国家1960～2010的人口数据。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  {</span><br><span class="line">    <span class="string">"Country Name"</span>: <span class="string">"Arab World"</span>,</span><br><span class="line">    <span class="string">"Country Code"</span>: <span class="string">"ARB"</span>,</span><br><span class="line">    <span class="string">"Year"</span>: <span class="string">"1960"</span>,</span><br><span class="line">    <span class="string">"Value"</span>: <span class="string">"96388069"</span></span><br><span class="line">  },</span><br><span class="line">  {</span><br><span class="line">    <span class="string">"Country Name"</span>: <span class="string">"Arab World"</span>,</span><br><span class="line">    <span class="string">"Country Code"</span>: <span class="string">"ARB"</span>,</span><br><span class="line">    <span class="string">"Year"</span>: <span class="string">"1961"</span>,</span><br><span class="line">    <span class="string">"Value"</span>: <span class="string">"98882541.4"</span></span><br><span class="line">  },</span><br><span class="line">......</span><br></pre></td></tr></tbody></table></figure><p>这个文件实际上就是一个很长的Python列表，其中每个元素都是一个包含4个键的字典。国家名、国别码、年份、以及人口数量。</p><p>我们只关心人口数量。因此先将这些信息打印出来。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="comment">#将数据加载到一个列表中</span></span><br><span class="line">file_name = <span class="string">'population_data.json'</span></span><br><span class="line"><span class="keyword">with</span> open(file_name) <span class="keyword">as</span> f:</span><br><span class="line">    pop_data = json.load(f)</span><br><span class="line"></span><br><span class="line"><span class="comment">#打印每个国家2010年的人口数量</span></span><br><span class="line"><span class="keyword">for</span> pop_dict <span class="keyword">in</span> pop_data:</span><br><span class="line">    <span class="keyword">if</span> pop_dict[<span class="string">'Year'</span>] == <span class="string">'2010'</span>:</span><br><span class="line">        country_name = pop_dict[<span class="string">'Country Name'</span>]</span><br><span class="line">        population = pop_dict[<span class="string">'Value'</span>]</span><br><span class="line">        print(country_name + <span class="string">":"</span> + population)</span><br><span class="line"></span><br><span class="line">Arab World:<span class="number">357868000</span></span><br><span class="line">Caribbean small states:<span class="number">6880000</span></span><br><span class="line">East Asia &amp; Pacific (all income levels):<span class="number">2201536674</span></span><br><span class="line">East Asia &amp; Pacific (developing only):<span class="number">1961558757</span></span><br><span class="line">Euro area:<span class="number">331766000</span></span><br><span class="line">......</span><br></pre></td></tr></tbody></table></figure><p>首先导入了json模块，以便正确的加载文件中的数据。然后将数据存储在pop_data中。函数pop_data 将数据转换为Python能够处理的格式，这里是一个列表。</p><p>可以看到，捕捉的数据中，并非每个都是国家名，现在将数据转换为Pygal能够处理的格式。</p><p>注意：将str转换为int时，若使用str(),如果数字（人口数量）为小数，则会发生错误，<strong>因为Python不能将包含小数点的字符串（如：“10.984958”）转化为整数。</strong></p><p><strong>应该先将其字符串转换为浮点数float()，再将浮点数转化为整数int()。</strong>Python会自动抛弃小数部分。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">population = int(float(pop_dict[<span class="string">'Value'</span>]))</span><br><span class="line">print(country_name + <span class="string">":"</span> + str(population))</span><br></pre></td></tr></tbody></table></figure><h3 id="获取两个字母的国别码"><a href="#获取两个字母的国别码" class="headerlink" title="获取两个字母的国别码"></a>获取两个字母的国别码</h3><p>population_data.json中包含的是三个字母的国别码，但Pygal使用两个字母的国别码。我们需要根据国家名获取两个字母的国别码。Pygal使用的国别码存储在模块i8n中。字典COUNTRIES包含的键和值分别是两个字母的国别码和国家名。要查看，可导入。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pygal.i18n <span class="keyword">import</span> COUNTRIES</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>  country_code <span class="keyword">in</span> sorted(COUNTRIES.keys()):</span><br><span class="line">    print(country_code,COUNTRIES[country_code])</span><br><span class="line"></span><br><span class="line">ad Andorra</span><br><span class="line">ae United Arab Emirates</span><br><span class="line">af Afghanistan</span><br><span class="line">al Albania</span><br><span class="line">......</span><br></pre></td></tr></tbody></table></figure><p>为获取国别码，编写一个函数，它在COUNTRIES中查找并返回国别码。（country_codes.py）</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pygal.i18n <span class="keyword">import</span> COUNTRIES</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_country_code</span><span class="params">(country_name)</span>:</span></span><br><span class="line">    <span class="string">"""根据指定的国家，返回Pygal使用的两个字母的国别码"""</span></span><br><span class="line">    <span class="keyword">for</span> code,name <span class="keyword">in</span> COUNTRIES.items():</span><br><span class="line">        <span class="keyword">if</span> name == country_name:</span><br><span class="line">            <span class="keyword">return</span> code</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br></pre></td></tr></tbody></table></figure><p>在之前的代码中导入。(world_population.py)</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> country_codes <span class="keyword">import</span> get_country_code</span><br><span class="line"></span><br><span class="line"><span class="comment">#将数据加载到一个列表中</span></span><br><span class="line">file_name = <span class="string">'population_data.json'</span></span><br><span class="line"><span class="keyword">with</span> open(file_name) <span class="keyword">as</span> f:</span><br><span class="line">    pop_data = json.load(f)</span><br><span class="line"></span><br><span class="line"><span class="comment">#打印每个国家2010年的人口数量</span></span><br><span class="line"><span class="keyword">for</span> pop_dict <span class="keyword">in</span> pop_data:</span><br><span class="line">    <span class="keyword">if</span> pop_dict[<span class="string">'Year'</span>] == <span class="string">'2010'</span>:</span><br><span class="line">        country_name = pop_dict[<span class="string">'Country Name'</span>]</span><br><span class="line">        population = pop_dict[<span class="string">'Value'</span>]</span><br><span class="line">        code = get_country_code(country_name)</span><br><span class="line">        <span class="keyword">if</span> code:</span><br><span class="line">          print(code + <span class="string">":"</span> + str(population))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">          print(<span class="string">'ERROR -'</span> + country_name)</span><br><span class="line"></span><br><span class="line">......</span><br><span class="line">ERROR -Algeria</span><br><span class="line">ERROR -American Samoa</span><br><span class="line">ad:<span class="number">84864</span></span><br><span class="line">......</span><br></pre></td></tr></tbody></table></figure><h3 id="制作世界地图"><a href="#制作世界地图" class="headerlink" title="制作世界地图"></a>制作世界地图</h3><p>有了国别码后，制作世界地图易如反掌。Pygal提供了图表类型WorldMap，可帮助你制作呈现世界各国数据的世界地图。为了呈现，我们来创建一个突出北美、中美和南美的简单地图。</p><p>我们创建了一个Worldmap实例，并设置了该地图的title属性。</p><p>使用add方法，它接受一个标签和一个列表，后者包含我们要突出的国家的<strong>国别码</strong>。每次调用add都将为指定的国家选择一种新颜色，并在左边显示该颜色和指定的标签。我们要以同一种颜色显示整个北美地区。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pygal</span><br><span class="line"></span><br><span class="line">wm = pygal.Worldmap()</span><br><span class="line">wm.title = <span class="string">'North,Central,and South America'</span></span><br><span class="line"></span><br><span class="line">wm.add(<span class="string">'North America'</span>,[<span class="string">'ca'</span>,<span class="string">'mx'</span>,<span class="string">'us'</span>])</span><br><span class="line">wm.add(<span class="string">'Central America'</span>,[<span class="string">'bz'</span>,<span class="string">'cr'</span>,<span class="string">'gt'</span>,<span class="string">'hn'</span>,<span class="string">'ni'</span>,<span class="string">'pa'</span>,<span class="string">'sv'</span>])</span><br><span class="line">wm.add(<span class="string">'South America'</span>,[<span class="string">'ar'</span>,<span class="string">'bo'</span>,<span class="string">'br'</span>,<span class="string">'cl'</span>,<span class="string">'co'</span>,<span class="string">'ec'</span>,<span class="string">'gf'</span>,</span><br><span class="line">                       <span class="string">'gy'</span>,<span class="string">'pe'</span>,<span class="string">'sr'</span>,<span class="string">'uy'</span>,<span class="string">'ve'</span>])</span><br><span class="line"></span><br><span class="line">wm.render_to_file(<span class="string">'americas.svg'</span>)</span><br></pre></td></tr></tbody></table></figure><p><img data-src="/images/Python-base/DataView_20.png" alt="屏幕快照 2017-09-23 下午4.41.59"></p><h3 id="在世界地图上呈现数字数据"><a href="#在世界地图上呈现数字数据" class="headerlink" title="在世界地图上呈现数字数据"></a>在世界地图上呈现数字数据</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pygal</span><br><span class="line"></span><br><span class="line">wm = pygal.Worldmap()</span><br><span class="line">wm.title = <span class="string">'Population of Countries in North America'</span></span><br><span class="line">wm.add(<span class="string">'North America'</span>,{<span class="string">'ca'</span>:<span class="number">34126000</span>,<span class="string">'us'</span>:<span class="number">30934900</span>,<span class="string">'mx'</span>:<span class="number">113423000</span>})</span><br><span class="line"></span><br><span class="line">wm.render_to_file(<span class="string">'na_populations.svg'</span>)</span><br></pre></td></tr></tbody></table></figure><p><img data-src="/images/Python-base/DataView_21.png" alt="屏幕快照 2017-09-23 下午4.52.41"></p><p>这次的add方法，第二个参数传递的是一个字典而不是列表。这个字典将两个字母的Pygal国别码作为键，将人口数量作为值。Pygal根据这些数字自动给不同国家着以深浅不一的颜色（人口最少的国家颜色最浅，反之最深）</p><h3 id="绘制完整的世界人口地图"><a href="#绘制完整的世界人口地图" class="headerlink" title="绘制完整的世界人口地图"></a>绘制完整的世界人口地图</h3><p>在之前的world_population.py中添加如下代码：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pygal</span><br><span class="line"></span><br><span class="line"><span class="comment">#将数据加载到一个列表中</span></span><br><span class="line">file_name = <span class="string">'population_data.json'</span></span><br><span class="line"><span class="keyword">with</span> open(file_name) <span class="keyword">as</span> f:</span><br><span class="line">    pop_data = json.load(f)</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建一个包含人口数量的字典</span></span><br><span class="line">cc_populations = {}</span><br><span class="line"></span><br><span class="line"><span class="comment">#每个国家2010年的人口数量</span></span><br><span class="line"><span class="keyword">for</span> pop_dict <span class="keyword">in</span> pop_data:</span><br><span class="line">    <span class="keyword">if</span> pop_dict[<span class="string">'Year'</span>] == <span class="string">'2010'</span>:</span><br><span class="line">        country_name = pop_dict[<span class="string">'Country Name'</span>]</span><br><span class="line">        population = int(float(pop_dict[<span class="string">'Value'</span>]))</span><br><span class="line">        code = get_country_code(country_name)</span><br><span class="line">        <span class="keyword">if</span> code:</span><br><span class="line">            cc_populations[code] = population</span><br><span class="line"></span><br><span class="line">wm = pygal.Worldmap()</span><br><span class="line">wm.title = <span class="string">'World Population in 2010,by Country'</span></span><br><span class="line">wm.add(<span class="string">'2010'</span>,cc_populations)</span><br><span class="line"></span><br><span class="line">wm.render_to_file(<span class="string">'world_population.svg'</span>)</span><br></pre></td></tr></tbody></table></figure><p><img data-src="/images/Python-base/DataView_22.png" alt="屏幕快照 2017-09-23 下午5.09.55"></p><p>我们将根据人口数量将国家分组，再分别给每个组着色。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">--snip--</span><br><span class="line"><span class="keyword">from</span> pygal.style <span class="keyword">import</span> LightColorizedStyle <span class="keyword">as</span> LCS, RotateStyle <span class="keyword">as</span> RS</span><br><span class="line">--snip--</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> code:</span><br><span class="line">  cc_populations[code] = population</span><br><span class="line"></span><br><span class="line"><span class="comment"># Group the countries into 3 population levels.</span></span><br><span class="line">cc_pops_1, cc_pops_2, cc_pops_3 = {}, {}, {}</span><br><span class="line"><span class="keyword">for</span> cc, pop <span class="keyword">in</span> cc_populations.items():</span><br><span class="line">    <span class="keyword">if</span> pop &lt; <span class="number">10000000</span>:</span><br><span class="line">        cc_pops_1[cc] = pop</span><br><span class="line">    <span class="keyword">elif</span> pop &lt; <span class="number">1000000000</span>:</span><br><span class="line">        cc_pops_2[cc] = pop</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        cc_pops_3[cc] = pop</span><br><span class="line"></span><br><span class="line"><span class="comment"># See how many countries are in each level.        </span></span><br><span class="line">print(len(cc_pops_1), len(cc_pops_2), len(cc_pops_3))</span><br><span class="line"></span><br><span class="line">wm_style = RS(<span class="string">'# '</span>, base_style=LCS)</span><br><span class="line">wm = pygal.Worldmap(style=wm_style)</span><br><span class="line">wm.title = <span class="string">'World Population in 2010, by Country'</span></span><br><span class="line">wm.add(<span class="string">'0-10m'</span>, cc_pops_1)</span><br><span class="line">wm.add(<span class="string">'10m-1bn'</span>, cc_pops_2)</span><br><span class="line">wm.add(<span class="string">'&gt;1bn'</span>, cc_pops_3)</span><br><span class="line">    </span><br><span class="line">wm.render_to_file(<span class="string">'world_population.svg'</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">85</span> <span class="number">69</span> <span class="number">2</span></span><br></pre></td></tr></tbody></table></figure><p><img data-src="/images/Python-base/DataView_23.png" alt="屏幕快照 2017-09-23 下午5.31.20"></p><h3 id="用Pygal设置世界地图样式"><a href="#用Pygal设置世界地图样式" class="headerlink" title="用Pygal设置世界地图样式"></a>用Pygal设置世界地图样式</h3><p>我们让Pygal使用设置指令来调整颜色。让三个分组的颜色差别更大。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">--snip--</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pygal.style <span class="keyword">import</span> RotateStyle</span><br><span class="line"></span><br><span class="line">--snip--</span><br><span class="line">wm_style = RotateStyle(<span class="string">'# '</span>)</span><br><span class="line">wm = pygal.Worldmap(style=wm_style)</span><br><span class="line"></span><br><span class="line">--snip--</span><br></pre></td></tr></tbody></table></figure><p>Pygal样式存储在模块style中，我们从中导入了RotateStyle样式。创建这个类的实例时，需要提供一个参数：16进制的RGB颜色；Pygal将根据指定的颜色为每组选择颜色。前两个字符表示红色分量，然后是绿色，蓝色。取值00～FF。建议搜索hex color chooser（16进制颜色选择器）</p><h3 id="加亮颜色主题"><a href="#加亮颜色主题" class="headerlink" title="加亮颜色主题"></a>加亮颜色主题</h3><p>我们使用LightColorizedStyle加亮了地图。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pygal.style <span class="keyword">import</span> LightColorizedStyle</span><br></pre></td></tr></tbody></table></figure><p>但是使用这个类时，你不能直接控制使用的颜色，Pygal将选择默认的基色。要设置颜色，可使用RotateStyle，并将LightColorizedStyle作为基本样式。为此</p> <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pygal.style <span class="keyword">import</span> LightColorizedStyle <span class="keyword">as</span> LCS,RotateStyle <span class="keyword">as</span> RS</span><br></pre></td></tr></tbody></table></figure><p>再使用RotateStyle创建一种样式</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wm_style = RS(<span class="string">'# '</span>, base_style=LCS)</span><br></pre></td></tr></tbody></table></figure><p>这设置了较亮的主题，通过实参传递的颜色给各个国家着色。</p><h1 id="使用API"><a href="#使用API" class="headerlink" title="使用API"></a>使用API</h1><p>编写一个独立的程序，并对其获取的数据进行可视化。这个程序将使用<strong>Web应用编程接口（API）</strong>自动请求网站的特定信息而不是整个网页，再对这些信息进行可视化。由于这样编写的程序始终使用最新的数据来生成可视化，因此即便数据瞬息万变，它呈现的信息也都是最新的。</p><p>我们将使用GitHub的API来请求有关该网站中Python项目的信息，然后使用Pygal生成交互式可视化，以呈现这些项目的受欢迎程度。这个程序将自动下载GitHub上星级最高的Python项目的信息，并对这些项目进行可视化。</p><h2 id="使用Web-API"><a href="#使用Web-API" class="headerlink" title="使用Web API"></a>使用Web API</h2><p>GitHub的API让你能够通过API调用来请求各种信息。要知道API调用是什么样的，输入以下网址：</p><p><a href="https://api.github.com/search/repositories?q=language:python&amp;sort=stars" target="_blank" rel="noopener">https://api.github.com/search/repositories?q=language:python&amp;sort=stars</a></p><p>这个调用返回GitHub当前托管了多少个Python项目，还有有关最受欢迎的Python仓库的信息。仔细研究这个调用，第一部分（<a href="https://api.github.com/）将请求发送到GitHub网站中响应API调用的部分；接下来一部分（search/repositories）让API搜索GitHub上的所有仓库。" target="_blank" rel="noopener">https://api.github.com/）将请求发送到GitHub网站中响应API调用的部分；接下来一部分（search/repositories）让API搜索GitHub上的所有仓库。</a></p><p>repositories后面的问号指出我们要传递一个实参。q表示查询，而等号能让我们开始指定的查询。通过使用language：python，我们指出只想获取主要语言为python仓库的信息，最后一部分查询&amp;sort=stars指定项目将按其获得的星级进行排序。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">  <span class="string">"total_count"</span>: <span class="number">1968718</span>,</span><br><span class="line">  <span class="string">"incomplete_results"</span>: false,</span><br><span class="line">  <span class="string">"items"</span>: [</span><br><span class="line">    {</span><br><span class="line">      <span class="string">"id"</span>: <span class="number">21289110</span>,</span><br><span class="line">      <span class="string">"name"</span>: <span class="string">"awesome-python"</span>,</span><br><span class="line">      <span class="string">"full_name"</span>: <span class="string">"vinta/awesome-python"</span>,</span><br><span class="line">      <span class="string">"owner"</span>: {</span><br></pre></td></tr></tbody></table></figure><p>上面显示了响应的前几行。从中可知，GitHub总共有1968718个python项目。”incomplete_results”的值为false，据此我们知道请求是成功的（它并非不完整的）。倘若GitHub无法全面处理该API，它返回的这个值将为true。接下来的列表中显示了返回的“items”，其中包含GitHub上最受欢迎的Python项目的详细信息。</p><h3 id="安装requests"><a href="#安装requests" class="headerlink" title="安装requests"></a>安装requests</h3><p>requests包让python程序能够轻松地向网站请求信息以及检查返回的响应，要安装requests，执行类似于下面的命令：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pip3 install --user requests</span><br></pre></td></tr></tbody></table></figure><h3 id="处理API响应"><a href="#处理API响应" class="headerlink" title="处理API响应"></a>处理API响应</h3><p>下面的程序，它执行API调用并处理结果，找出GitHub上星级最高的Python项目。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="comment">#执行API调用并存储响应</span></span><br><span class="line">url = <span class="string">'https://api.github.com/search/repositories?q=language:python&amp;sort=stars'</span></span><br><span class="line">r = requests.get(url)</span><br><span class="line">print(<span class="string">"Status code:"</span>,r.status_code)</span><br><span class="line"></span><br><span class="line"><span class="comment">#将API响应存储在一个变量中</span></span><br><span class="line">response_dict = r.json()</span><br><span class="line"></span><br><span class="line"><span class="comment">#处理结果</span></span><br><span class="line">print(response_dict.keys()) </span><br><span class="line"></span><br><span class="line">Status code: <span class="number">200</span></span><br><span class="line">dict_keys([<span class="string">'total_count'</span>, <span class="string">'incomplete_results'</span>, <span class="string">'items'</span>])</span><br></pre></td></tr></tbody></table></figure><p>1.我们导入模块request。</p><p>2.使用requests来执行调用url。调用get()并将url传递给它，再将<strong>响应对象</strong>存储在变量r中。</p><p>3.响应对象包含了一个名为status_code的属性，它让我们知道请求是否成功了。（状态码200表示成功了）</p><p>4.这个API返回一个json格式的信息，因此使用方法json()将这些信息转换为一个Python字典存储在response_dict</p><p>5.打印response_dict中的键。</p><h3 id="处理响应字典"><a href="#处理响应字典" class="headerlink" title="处理响应字典"></a>处理响应字典</h3><p>将API调用返回的信息存储到字典中后，就可以处理这个字典中的数据了。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="comment">#执行API调用并存储响应</span></span><br><span class="line">url = <span class="string">"https://api.github.com/search/repositories?q=language:python&amp;sort=stars"</span></span><br><span class="line">r = requests.get(url)</span><br><span class="line">print(<span class="string">"status code"</span>,r.status_code)</span><br><span class="line"></span><br><span class="line"><span class="comment">#将API响应存储在一个变量中</span></span><br><span class="line">response_dict = r.json()</span><br><span class="line">print(<span class="string">"Total repositories returned:"</span>,response_dict[<span class="string">'total_count'</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">#搜索有关仓库的信息</span></span><br><span class="line">repo_dict = response_dict[<span class="string">'items'</span>]</span><br><span class="line">print(<span class="string">"Repositories returned:"</span>,len(repo_dict))</span><br><span class="line"></span><br><span class="line"><span class="comment">#研究第一个仓库</span></span><br><span class="line">repo_dict = repo_dict[<span class="number">0</span>]</span><br><span class="line">print(<span class="string">"\nKeys:"</span>,len(repo_dict))</span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> sorted(repo_dict.keys()):</span><br><span class="line">    print(key)</span><br><span class="line">    </span><br><span class="line">status code <span class="number">200</span></span><br><span class="line">Total repositories returned: <span class="number">1970122</span></span><br><span class="line">Repositories returned: <span class="number">30</span></span><br><span class="line"></span><br><span class="line">Keys: <span class="number">70</span></span><br><span class="line">archive_url</span><br><span class="line">.......</span><br></pre></td></tr></tbody></table></figure><p>与item相关联的值是一个列表，其中包含很多字典，而每个字典都包含有关一个Python仓库的信息。</p><p>我们将这个字典列表存储在repo_dicts中。</p><p>repo_dict[0]提取第一个字典，并将其存储在repo_dict中。</p><p>接下来打印第一个仓库的字典中很多键相关的值。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">--snip--</span><br><span class="line"><span class="comment">#研究第一个仓库</span></span><br><span class="line">repo_dict = repo_dict[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">print(<span class="string">"\nSelected information about first repository"</span>)</span><br><span class="line">print(<span class="string">"Name:"</span>,repo_dict[<span class="string">'name'</span>])</span><br><span class="line">print(<span class="string">"Stars:"</span>,repo_dict[<span class="string">'stargazers_count'</span>])</span><br><span class="line"></span><br><span class="line">Selected information about first repository</span><br><span class="line">Name: awesome-python</span><br><span class="line">Stars: <span class="number">38871</span></span><br></pre></td></tr></tbody></table></figure><h3 id="概述最受欢迎的仓库"><a href="#概述最受欢迎的仓库" class="headerlink" title="概述最受欢迎的仓库"></a>概述最受欢迎的仓库</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">--snip--</span><br><span class="line"></span><br><span class="line"><span class="comment">#搜索有关仓库的信息</span></span><br><span class="line">repo_dict = response_dict[<span class="string">'items'</span>]</span><br><span class="line">print(<span class="string">"Repositories returned:"</span>,len(repo_dict))</span><br><span class="line"></span><br><span class="line">print(<span class="string">"\nSelected information about first repository"</span>)</span><br><span class="line"><span class="keyword">for</span> repo_dict <span class="keyword">in</span> repo_dicts:</span><br><span class="line">    print(<span class="string">"Name:"</span>,repo_dict[<span class="string">'name'</span>])</span><br><span class="line">    print(<span class="string">"Stars:"</span>,repo_dict[<span class="string">'stargazers_count'</span>])</span><br><span class="line">    print(<span class="string">"Repository:"</span>,repo_dict[<span class="string">'html_url'</span>])</span><br><span class="line">    print(<span class="string">"Description:"</span>,repo_dict[<span class="string">'description'</span>])</span><br></pre></td></tr></tbody></table></figure><h3 id="监视API的速率限制"><a href="#监视API的速率限制" class="headerlink" title="监视API的速率限制"></a>监视API的速率限制</h3><p>大多数API都存在速率限制，即你在特定时间内可执行的请求数存在限制。要获悉你是否接近GiHub的限制，请输入<a href="https://api.github.com/rate_limit" target="_blank" rel="noopener">https://api.github.com/rate_limit</a></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">  <span class="string">"resources"</span>: {</span><br><span class="line">    <span class="string">"core"</span>: {</span><br><span class="line">      <span class="string">"limit"</span>: <span class="number">60</span>,</span><br><span class="line">      <span class="string">"remaining"</span>: <span class="number">60</span>,</span><br><span class="line">      <span class="string">"reset"</span>: <span class="number">1506236519</span></span><br><span class="line">    },</span><br><span class="line">    <span class="string">"search"</span>: {</span><br><span class="line">      <span class="string">"limit"</span>: <span class="number">10</span>,</span><br><span class="line">      <span class="string">"remaining"</span>: <span class="number">10</span>,</span><br><span class="line">      <span class="string">"reset"</span>: <span class="number">1506232979</span></span><br><span class="line">    },</span><br></pre></td></tr></tbody></table></figure><p>search中，limit代表每分钟10个请求，而在当前这一分钟，我们还可以执行10个请求。若到达配置，你必须等待配额重置。</p><h2 id="使用Pygal可视化仓库"><a href="#使用Pygal可视化仓库" class="headerlink" title="使用Pygal可视化仓库"></a>使用Pygal可视化仓库</h2><p>现在进行可视化，呈现GitHub上Python项目最受欢迎程度。条形的高低代表获得了多少颗星。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests </span><br><span class="line"><span class="keyword">import</span> pygal</span><br><span class="line"><span class="keyword">from</span> pygal.style <span class="keyword">import</span> LightColorizedStyle <span class="keyword">as</span> LCS,LightenStyle <span class="keyword">as</span> LS</span><br><span class="line"></span><br><span class="line"><span class="comment">#执行API调用并存储响应</span></span><br><span class="line">url = <span class="string">"https://api.github.com/search/repositories?q=language:python&amp;sort=stars"</span></span><br><span class="line">r = requests.get(url)</span><br><span class="line">print(<span class="string">"status code"</span>,r.status_code)</span><br><span class="line"></span><br><span class="line"><span class="comment">#将API响应存储在一个变量中</span></span><br><span class="line">response_dict = r.json()</span><br><span class="line">print(<span class="string">"Total repositories returned:"</span>,response_dict[<span class="string">'total_count'</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">#搜索有关仓库的信息</span></span><br><span class="line">repo_dicts = response_dict[<span class="string">'items'</span>]</span><br><span class="line"></span><br><span class="line">names,stars = [],[]</span><br><span class="line"><span class="keyword">for</span> repo_dict <span class="keyword">in</span> repo_dicts:</span><br><span class="line">    names.append(repo_dict[<span class="string">'name'</span>])</span><br><span class="line">    stars.append(repo_dict[<span class="string">'stargazers_count'</span>])</span><br><span class="line">    </span><br><span class="line"><span class="comment">#可视化</span></span><br><span class="line">my_style = LS(<span class="string">'# '</span>,base_style=LCS)</span><br><span class="line">chart = pygal.Bar(style=my_style,x_label_rotation=<span class="number">45</span>,show_legend=<span class="literal">False</span>)</span><br><span class="line">chart.title = <span class="string">"Most-Starred Python Projects on GitHub"</span></span><br><span class="line">chart.x_labels = names</span><br><span class="line"></span><br><span class="line">chart.add(<span class="string">''</span>,stars)</span><br><span class="line">chart.render_to_file(<span class="string">'python_repos.svg'</span>)</span><br></pre></td></tr></tbody></table></figure><p><img data-src="/images/Python-base/DataView_24.png" alt="屏幕快照 2017-09-24 下午2.19.13"></p><p>x_label_rotation=45让标签绕x轴旋转45度，并隐藏了图例show_legend=False</p><h3 id="改进Pygal图表"><a href="#改进Pygal图表" class="headerlink" title="改进Pygal图表"></a>改进Pygal图表</h3><p>下面来改进这个图表的样式，创建一个配置对象，在其中包含要传递给Bar()的所有配置。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">--snip--</span><br><span class="line"><span class="comment">#可视化</span></span><br><span class="line">my_style = LS(<span class="string">'# '</span>,base_style=LCS)</span><br><span class="line">my_config = pygal.Config()</span><br><span class="line">my_config.x_label_rotation = <span class="number">45</span></span><br><span class="line">my_config.show_legend = <span class="literal">False</span></span><br><span class="line">my_config.title_font_size = <span class="number">14</span></span><br><span class="line">my_config.major_label_font_size = <span class="number">18</span></span><br><span class="line">my_config.truncate_label = <span class="number">15</span></span><br><span class="line">my_config.show_y_guides = <span class="literal">False</span></span><br><span class="line">my_config.width = <span class="number">1000</span></span><br><span class="line"></span><br><span class="line">chart = pygal.Bar(my_config,style=my_style)</span><br><span class="line">chart.title = <span class="string">"Most-Starred Python Projects on GitHub"</span></span><br><span class="line">chart.x_labels = names</span><br><span class="line"></span><br><span class="line">chart.add(<span class="string">''</span>,stars)</span><br><span class="line">chart.render_to_file(<span class="string">'python_repos.svg'</span>)</span><br></pre></td></tr></tbody></table></figure><p><img data-src="/images/Python-base/DataView_25.png" alt="屏幕快照 2017-09-24 下午2.32.56"></p><p>我们创建了一个Pygal类Config的实例，并将其命名为my_config，通过修改my_config，可定制图表的外观。truncate_label将较长的项目名缩短为15个字符。show_y_guides为False将隐藏图表中的水平线。width为自定义宽度，让图表更充分地利用浏览器中的可用空间。</p><h3 id="添加自定义工具提示"><a href="#添加自定义工具提示" class="headerlink" title="添加自定义工具提示"></a>添加自定义工具提示</h3><p>在Pygal中，将鼠标指向条形将显示它表示的信息，这通常称为<strong>工具提示</strong>。在这个示例中，当前显示的是项目获得了多少个星。我们向add()传递字典列表，而不是值列表。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pygal</span><br><span class="line"><span class="keyword">from</span> pygal.style <span class="keyword">import</span> LightColorizedStyle <span class="keyword">as</span> LCS,LightenStyle <span class="keyword">as</span> LS</span><br><span class="line"></span><br><span class="line">my_style = LS(<span class="string">'# '</span>,base_style=LCS)</span><br><span class="line">chart = pygal.Bar(style=my_style,x_label_rotation=<span class="number">45</span>,show_legend=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">chart.title = <span class="string">'Python Project'</span></span><br><span class="line">chart.x_labels = [<span class="string">'httpie'</span>,<span class="string">'django'</span>,<span class="string">'flask'</span>]</span><br><span class="line"></span><br><span class="line">plot_dicts = [</span><br><span class="line">    {<span class="string">'value'</span>:<span class="number">16101</span>,<span class="string">'label'</span>:<span class="string">'Description of httpie.'</span>},</span><br><span class="line">    {<span class="string">'value'</span>:<span class="number">15028</span>,<span class="string">'label'</span>:<span class="string">'Description of django.'</span>},</span><br><span class="line">    {<span class="string">'value'</span>:<span class="number">14798</span>,<span class="string">'label'</span>:<span class="string">'Description of flask'</span>}</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">chart.add(<span class="string">''</span>,plot_dicts)</span><br><span class="line">chart.render_to_file(<span class="string">'bar_description.svg'</span>)</span><br></pre></td></tr></tbody></table></figure><p><img data-src="/images/Python-base/DataView_26.png" alt="屏幕快照 2017-09-24 下午3.06.59"></p><p>每个字典都包含两个键：“value”和“label”。Pygal根据与键“value”相关联的数字来确定条形的高度，并使用“label”相关联的字符串给条形创建工具。</p><h3 id="根据数据绘图"><a href="#根据数据绘图" class="headerlink" title="根据数据绘图"></a>根据数据绘图</h3><p>为根据数据绘图，我们将自动生成plot_dicts，其中包含API调用的30个项目的信息。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">--snip--</span><br><span class="line"><span class="comment">#搜索有关仓库的信息</span></span><br><span class="line">repo_dicts = response_dict[<span class="string">'items'</span>]</span><br><span class="line"></span><br><span class="line">names,plot_dicts = [],[]</span><br><span class="line"><span class="keyword">for</span> repo_dict <span class="keyword">in</span> repo_dicts:</span><br><span class="line">  names.append(repo_dict[<span class="string">'name'</span>])</span><br><span class="line">  </span><br><span class="line">  plot_dict = {</span><br><span class="line">      <span class="string">'value'</span>:repo_dict[<span class="string">'stargazers_count'</span>],</span><br><span class="line">      <span class="string">'label'</span>:repo_dict[<span class="string">'description'</span>],</span><br><span class="line">  }</span><br><span class="line">  plot_dicts.append(plot_dict)</span><br><span class="line"></span><br><span class="line">--snip--</span><br><span class="line"></span><br><span class="line">chart.add(<span class="string">''</span>,plot_dicts)</span><br><span class="line"></span><br><span class="line">--snip--</span><br></pre></td></tr></tbody></table></figure><p><img data-src="/images/Python-base/DataView_27.png" alt="屏幕快照 2017-09-24 下午3.23.21"></p><h3 id="在图表中添加可单击的链接"><a href="#在图表中添加可单击的链接" class="headerlink" title="在图表中添加可单击的链接"></a>在图表中添加可单击的链接</h3><p>Pygal允许你将图表中的每个条形用作网站的相应链接。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">--snip--</span><br><span class="line"> </span><br><span class="line"> plot_dict = {</span><br><span class="line">     <span class="string">'value'</span>:repo_dict[<span class="string">'stargazers_count'</span>],</span><br><span class="line">     <span class="string">'label'</span>:repo_dict[<span class="string">'description'</span>],</span><br><span class="line">     <span class="string">'xlink'</span>:repo_dict[<span class="string">'html_url'</span>],</span><br><span class="line"> }</span><br><span class="line"> </span><br><span class="line"> --snip--</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;生成数据&quot;&gt;&lt;a href=&quot;#生成数据&quot; class=&quot;headerlink&quot; title=&quot;生成数据&quot;&gt;&lt;/a&gt;生成数据&lt;/h1&gt;&lt;h2 id=&quot;安装matplotlib&quot;&gt;&lt;a href=&quot;#安装matplotlib&quot; class=&quot;headerlink&quot; title=&quot;安装matplotlib&quot;&gt;&lt;/a&gt;安装matplotlib&lt;/h2&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ pip3 install --user matplotlib&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;测试matplotlib&quot;&gt;&lt;a href=&quot;#测试matplotlib&quot; class=&quot;headerlink&quot; title=&quot;测试matplotlib&quot;&gt;&lt;/a&gt;测试matplotlib&lt;/h3&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ python3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;&amp;gt; &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; matplotlib&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果没有出现任何错误消息，就说明你系统安装了matplotlib。&lt;/p&gt;
&lt;h3 id=&quot;matplotlib画廊&quot;&gt;&lt;a href=&quot;#matplotlib画廊&quot; class=&quot;headerlink&quot; title=&quot;matplotlib画廊&quot;&gt;&lt;/a&gt;matplotlib画廊&lt;/h3&gt;&lt;p&gt;要查看使用matplotlib可制作的各种图表，请访问&lt;a href=&quot;http://matplotlib.org/的示例画廊。单击画廊中的图表，就可查看用于生成图表的代码。&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://matplotlib.org/的示例画廊。单击画廊中的图表，就可查看用于生成图表的代码。&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;绘制简单的折线图plot&quot;&gt;&lt;a href=&quot;#绘制简单的折线图plot&quot; class=&quot;headerlink&quot; title=&quot;绘制简单的折线图plot()&quot;&gt;&lt;/a&gt;绘制简单的折线图plot()&lt;/h2&gt;&lt;p&gt;我们将使用平方数序列1、4、9、16和25来绘制这个图标。&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; plt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;squares = [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;25&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;plt.plot(squares)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;plt.show()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&quot;/images/Python-base/DataView_1.png&quot; alt=&quot;2017-09-19.2.15.10&quot;&gt;&lt;/p&gt;
&lt;p&gt;首先，导入了模块pyplot，并给它指定了别名plt。模块pyplot包含很多用于生成图标的函数。&lt;/p&gt;
&lt;p&gt;我们创建了一个列表，在其中存储了前述平方数，再将这个列表传递给函数plot()。&lt;/p&gt;
&lt;p&gt;plt.show()打开matplotlib查看器，并显示绘制的图形。&lt;/p&gt;
&lt;h3 id=&quot;修改标签文字和线条粗细&quot;&gt;&lt;a href=&quot;#修改标签文字和线条粗细&quot; class=&quot;headerlink&quot; title=&quot;修改标签文字和线条粗细&quot;&gt;&lt;/a&gt;修改标签文字和线条粗细&lt;/h3&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; plt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;squares = [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;25&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;plt.plot(squares,linewidth=&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#设置图表标题，并给坐标轴加上标签&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;plt.title(&lt;span class=&quot;string&quot;&gt;&quot;Square Numbers&quot;&lt;/span&gt;,fontsize=&lt;span class=&quot;number&quot;&gt;24&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;plt.xlabel(&lt;span class=&quot;string&quot;&gt;&quot;Value&quot;&lt;/span&gt;,fontsize=&lt;span class=&quot;number&quot;&gt;14&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;plt.ylabel(&lt;span class=&quot;string&quot;&gt;&quot;Square of Value&quot;&lt;/span&gt;,fontsize=&lt;span class=&quot;number&quot;&gt;14&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#设置刻度标记的大小&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;plt.tick_params(axis=&lt;span class=&quot;string&quot;&gt;&#39;both&#39;&lt;/span&gt;,labelsize=&lt;span class=&quot;number&quot;&gt;14&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;plt.show()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;tick_params()设置刻度的样式，其中指定的实参将影响x轴和y轴上的刻度（axis=’both’），并将刻度标记的字号设置为14。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/Python-base/DataView_2.png&quot; alt=&quot;017-09-19.3.16.14&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;校正图形&quot;&gt;&lt;a href=&quot;#校正图形&quot; class=&quot;headerlink&quot; title=&quot;校正图形&quot;&gt;&lt;/a&gt;校正图形&lt;/h3&gt;&lt;p&gt;我们发现没有正确的绘制数据：折线图的终点指出4.0的平方为25！下面来修复这个问题。&lt;/p&gt;
    
    </summary>
    
    
      <category term="DataView" scheme="https://unknown.yuzhouwan.com/categories/DataView/"/>
    
    
      <category term="Python" scheme="https://unknown.yuzhouwan.com/tags/Python/"/>
    
      <category term="iPython" scheme="https://unknown.yuzhouwan.com/tags/iPython/"/>
    
      <category term="Pygal" scheme="https://unknown.yuzhouwan.com/tags/Pygal/"/>
    
      <category term="Matplotlib" scheme="https://unknown.yuzhouwan.com/tags/Matplotlib/"/>
    
  </entry>
  
  <entry>
    <title>Machine Learning基础</title>
    <link href="https://unknown.yuzhouwan.com/posts/59544/"/>
    <id>https://unknown.yuzhouwan.com/posts/59544/</id>
    <published>2017-09-18T11:08:26.000Z</published>
    <updated>2020-05-06T14:35:15.858Z</updated>
    
    <content type="html"><![CDATA[<p><img data-src="/images/MachineLearning/MLMindNode.png" alt="MLMindNode"></p><a id="more"></a><h1 id="Introduction-of-Machine-Learning"><a href="#Introduction-of-Machine-Learning" class="headerlink" title="Introduction of Machine Learning"></a>Introduction of Machine Learning</h1><p>机器学习可以揭示数据背后的真实含义。</p><p><strong>监督学习</strong>需要用户知道目标值，简单的说就是知道数据在找什么。而<strong>无监督学习</strong>则无需用户知道搜寻的目标，只需要从算法程序中得到这些数据的共同特征。</p><p>保证算法应用的正确性：</p><ol><li>确保算法应用可以正确处理简单的数据。</li><li>将现实世界中得到的数据格式化为算法可以处理的格式。</li><li>将步骤2得到的数据输入到步骤1的算法中，检验算法的运行结果。</li></ol><p>千万不要忽略前两个步骤而直接跳到步骤3来检验算法处理真实数据的效果。任何复杂系统都是由基础工程构成的，尤其是算法出现问题时，增量地搭建系统可以确保我们及时找到问题出现的位置和原因。</p><p>后续根据监督学习和无监督学习进行分类讨论。</p><p>在监督学习中，我们只需要给定输入样本，机器就可以从中推演出指定目标变量的可能结果。监督学习相对比较简单，机器只需从输入数据中预测合适的模型，并从中计算出目标变量的结果。</p><p>监督学习一般使用两种类型的目标变量：标称型和数值型。<strong>标称型</strong>目标变量的结果只在有限目标集中取值，如真与假，动物分类集合；<strong>数值型</strong>目标变量则可以从无限的数值集合中取值，一般用于回归分析。</p><h2 id="Key-Terminology"><a href="#Key-Terminology" class="headerlink" title="Key Terminology"></a>Key Terminology</h2><p>我们使用机器学习的某个算法进行分类结果，首先要做的是<strong>算法训练</strong>，即学习如何<strong>分类</strong>。通常我们为算法输入大量的已分类数据作为算法的<strong>训练集</strong>。训练集是用于训练机器学习算法的数据样本集合。<strong>目标变量</strong>是机器学习算法的预测结果。</p><p>在分类算法中目标变量的类型通常是标称型的，而在回归算法中通常是连续型的。</p><p>训练样本集必须确定知道目标变量的值，以便机器学习算法可以发现特征和目标变量之间的关系。</p><p>当机器学习程序开始运行时，使用训练样本集作为算法的输入，<strong>训练完成</strong>后输入<strong>测试样本</strong>，由程序决定样本属于哪个类别。</p><h2 id="Primary-Mission"><a href="#Primary-Mission" class="headerlink" title="Primary Mission"></a>Primary Mission</h2><p>监督学习中的任务：</p><p>1.将实例数据划分到合适的<strong>分类</strong>中。</p><p>2.<strong>回归</strong>，主要用于预测数值型数据。</p><p>无监督学习中的任务：</p><p>数据没有类别信息，也不会给定目标值。</p><p>1.在无监督学习中，将数据集合分成由类似的对象组成的多个类的过程被称为<strong>聚类</strong>。</p><p>2.将寻找描述数据统计值的过程称之为<strong>密度估计</strong>。</p><h2 id="Overview-of-Algorithm"><a href="#Overview-of-Algorithm" class="headerlink" title="Overview of Algorithm"></a>Overview of Algorithm</h2><div class="table-container"><table><thead><tr><th style="text-align:center">监督学习的用途</th><th style="text-align:center"></th></tr></thead><tbody><tr><td style="text-align:center">K-近邻算法</td><td style="text-align:center">线性回归</td></tr><tr><td style="text-align:center">朴素贝叶斯算法</td><td style="text-align:center">局部加权线性回归</td></tr><tr><td style="text-align:center">支持向量机</td><td style="text-align:center">Ridge回归</td></tr><tr><td style="text-align:center">决策树</td><td style="text-align:center">Lasso最小回归系数估计</td></tr></tbody></table></div><div class="table-container"><table><thead><tr><th style="text-align:center">无监督学习的用途</th><th style="text-align:center"></th></tr></thead><tbody><tr><td style="text-align:center">K-均值</td><td style="text-align:center">最大期望算法</td></tr><tr><td style="text-align:center">DBSCAN</td><td style="text-align:center">Parzen窗设计</td></tr></tbody></table></div><h2 id="How-to-choose"><a href="#How-to-choose" class="headerlink" title="How to choose"></a>How to choose</h2><p>首先考虑使用机器学习算法的目的。如果想要预测目标变量的值，则可以选择监督学习算法，否则选择无监督学习算法。</p><p>如果确定选择监督学习算法后，需要进一步确定目标变量类型。</p><ul><li>如果目标变量是离散型，如是／否，1/2/3，红／黄／黑等，则可以选择<strong>分类算法</strong>。</li><li>如果目标变量是连续型的数值，则需要选择<strong>回归算法</strong>。</li></ul><p>如果不想预测目标变量的值，则可以选择无监督学习算法。</p><ul><li>需要将数据划分为离散的组。如果这是唯一的需求，则使用<strong>聚类算法</strong>。</li><li>需要估计数据与每个分组的相似程度，需要使用<strong>密度估计算法。</strong></li></ul><h2 id="Steps-in-Machine-Learning"><a href="#Steps-in-Machine-Learning" class="headerlink" title="Steps in Machine Learning"></a>Steps in Machine Learning</h2><ol><li>收集数据</li><li>准备输入数据</li><li>分析输入数据。确保数据集中没有垃圾数据。</li><li><strong>训练算法</strong>（监督学习）</li><li>测试算法。</li><li>使用算法。将机器学习算法转化为应用程序，执行实际任务。</li></ol><h1 id="优化算法"><a href="#优化算法" class="headerlink" title="优化算法"></a>优化算法</h1><h2 id="损失函数-目标函数"><a href="#损失函数-目标函数" class="headerlink" title="损失函数(目标函数)"></a>损失函数(目标函数)</h2><h3 id="分类问题"><a href="#分类问题" class="headerlink" title="分类问题"></a>分类问题</h3><ol><li>平方差损失函数</li></ol><script type="math/tex; mode=display">\frac{1}{n}\sum\frac{1}{2}(y - Model(x))^2</script><ol><li>交叉熵损失</li></ol><p>多用于多分类</p><script type="math/tex; mode=display">\frac{1}{n}\sum yln(Model(x))</script><h3 id="回归问题"><a href="#回归问题" class="headerlink" title="回归问题"></a>回归问题</h3><ol><li>平方差损失函数</li></ol><script type="math/tex; mode=display">\frac{1}{n}\sum\frac{1}{2}(y - Model(x))^2</script><ol><li>绝对值损失</li></ol><script type="math/tex; mode=display">\frac{1}{n}\sum|y - Model(x)|</script><h2 id="正则化"><a href="#正则化" class="headerlink" title="正则化"></a>正则化</h2><h2 id="EM算法"><a href="#EM算法" class="headerlink" title="EM算法"></a>EM算法</h2><h2 id="梯度下降"><a href="#梯度下降" class="headerlink" title="梯度下降"></a>梯度下降</h2><h2 id="随机梯度下降"><a href="#随机梯度下降" class="headerlink" title="随机梯度下降"></a>随机梯度下降</h2><h2 id="反向传播"><a href="#反向传播" class="headerlink" title="反向传播"></a>反向传播</h2><h2 id="梯度验证"><a href="#梯度验证" class="headerlink" title="梯度验证"></a>梯度验证</h2><h2 id="Momentum"><a href="#Momentum" class="headerlink" title="Momentum"></a>Momentum</h2><h2 id="AdaGrad"><a href="#AdaGrad" class="headerlink" title="AdaGrad"></a>AdaGrad</h2><h2 id="Adam"><a href="#Adam" class="headerlink" title="Adam"></a>Adam</h2><h1 id="模型评估"><a href="#模型评估" class="headerlink" title="模型评估"></a>模型评估</h1><h2 id="评价指标"><a href="#评价指标" class="headerlink" title="评价指标"></a>评价指标</h2><h2 id="A-B测试"><a href="#A-B测试" class="headerlink" title="A/B测试"></a>A/B测试</h2><h2 id="过拟合于欠拟合"><a href="#过拟合于欠拟合" class="headerlink" title="过拟合于欠拟合"></a>过拟合于欠拟合</h2><h2 id="超参数选择"><a href="#超参数选择" class="headerlink" title="超参数选择"></a>超参数选择</h2><h1 id="DeepLearning-Model"><a href="#DeepLearning-Model" class="headerlink" title="DeepLearning Model"></a>DeepLearning Model</h1><h2 id="CNN"><a href="#CNN" class="headerlink" title="CNN"></a>CNN</h2><p>移步☞博文：<a href="https://unknown.yuzhouwan.com/posts/16452/">CNN</a></p><h2 id="RNN"><a href="#RNN" class="headerlink" title="RNN"></a>RNN</h2><h2 id="GAN"><a href="#GAN" class="headerlink" title="GAN"></a>GAN</h2><h2 id="AutoML"><a href="#AutoML" class="headerlink" title="AutoML"></a>AutoML</h2><h2 id="深度学习优化技巧"><a href="#深度学习优化技巧" class="headerlink" title="深度学习优化技巧"></a>深度学习优化技巧</h2><h3 id="批量归一化BN"><a href="#批量归一化BN" class="headerlink" title="批量归一化BN"></a>批量归一化BN</h3><h3 id="Dropout"><a href="#Dropout" class="headerlink" title="Dropout"></a>Dropout</h3><h3 id="激活函数"><a href="#激活函数" class="headerlink" title="激活函数"></a>激活函数</h3><h4 id="Sigmoid"><a href="#Sigmoid" class="headerlink" title="Sigmoid"></a>Sigmoid</h4><p>二分类逻辑回归模型</p><script type="math/tex; mode=display">f(x)=\frac{1}{1+e^{-W^TX}}</script><p><img data-src="/images/Python-base/DataView_Sigmoid.png" alt="DataView_Sigmoid"></p><h4 id="Softmax"><a href="#Softmax" class="headerlink" title="Softmax"></a>Softmax</h4><p>多分类逻辑回归模型</p><p><script type="math/tex">P(Y=k|x)=\frac{e^{-W^T_kx}}{1+\sum_{1}^{k-1}e^{-W^T_kX}}</script>, k=1,2,…..,K-1</p><p><script type="math/tex">P(Y=k|x)=\frac{1}{1+\sum_{1}^{k-1}e^{-W^T_kX}}</script>, k=K</p><h4 id="Tanh"><a href="#Tanh" class="headerlink" title="Tanh"></a>Tanh</h4><h4 id="ReLU"><a href="#ReLU" class="headerlink" title="ReLU"></a>ReLU</h4><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/MachineLearning/MLMindNode.png&quot; alt=&quot;MLMindNode&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Machine Learning" scheme="https://unknown.yuzhouwan.com/categories/Machine-Learning/"/>
    
    
      <category term="Python" scheme="https://unknown.yuzhouwan.com/tags/Python/"/>
    
      <category term="Machine Learning" scheme="https://unknown.yuzhouwan.com/tags/Machine-Learning/"/>
    
  </entry>
  
  <entry>
    <title>Python基础</title>
    <link href="https://unknown.yuzhouwan.com/posts/14702/"/>
    <id>https://unknown.yuzhouwan.com/posts/14702/</id>
    <published>2017-09-01T07:45:01.000Z</published>
    <updated>2020-02-08T15:08:59.277Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Python的安装、IPython的使用"><a href="#Python的安装、IPython的使用" class="headerlink" title="Python的安装、IPython的使用"></a>Python的安装、IPython的使用</h1><ul><li>Python的安装参见<a href="https://stringpiggy.hpd.io/mac-osx-python3-dual-install/" target="_blank" rel="noopener">https://stringpiggy.hpd.io/mac-osx-python3-dual-install/</a> ，或者《Python编程：从入门到实战》一书中也有详细的记载。</li><li>利用IPython可以代替传统python开发的文本编辑器，灵活的改变所写代码，快捷的生成结果代码。IPython Notebook目前已经成为用Python做教学、计算、科研的一个重要工具，很多示例都是用.ipynb文件。</li></ul><p>​        安装Ipython有两种方式，第一种是通过pip安装。第二种是安装Anaconda从而获得iPython （这个选择比较适合新手，推荐<a href="http://jupyter.readthedocs.io/en/latest/install.html#new-to-python-and-jupyter" target="_blank" rel="noopener">官网教程</a>一键搞定），下面主要介绍使用pip命令来安装。</p><ol><li>iPython是由<a href="http://ipython.org/ipython-doc/stable/install/install.html" target="_blank" rel="noopener">很多模块</a>组成的, 为了不漏装任何组件，我用了这个命令来安装所有组件：</li></ol><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo pip install ipython[all]</span><br></pre></td></tr></tbody></table></figure><ol><li>安装成功后通过这命令来运行Notebook</li></ol><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ipython notebook</span><br></pre></td></tr></tbody></table></figure><p>之后有可能会弹出这个错误(你如果选择了用Anaconda的方式来安装也会碰到这个错误)：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ValueError, <span class="string">'unknown locale: %s'</span> % localename</span><br></pre></td></tr></tbody></table></figure><p>在<a href="http://stackoverflow.com/questions/19961239/pelican-3-3-pelican-quickstart-error-valueerror-unknown-locale-utf-8" target="_blank" rel="noopener">StackOverflow上已经有人提出了解决方案</a>，在命令行里找到.bash_profile 然后添加下面两行代码：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export LC_ALL=en_US.UTF<span class="number">-8</span></span><br><span class="line">export LANG=en_US.UTF<span class="number">-8</span></span><br></pre></td></tr></tbody></table></figure><p>然后别忘了重新载入.bash_profile让新添加的代码生效（注意两个点之间的空格）：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ . .bash_profile</span><br></pre></td></tr></tbody></table></figure><p>之后再运行命令”ipython notebook “就可以在浏览器里看到iPython Notebook的界面了。</p><p>iPython Notebook的工作原理是在本地启动一个服务器，你通过localhost:8888/tree 这个地址就可以连接到这个服务器上与之通信。从而实现在浏览器里写代码，传给本地服务器执行，然后本地服务器传回结果并在网页上呈现这个循环。</p><p>每次使用完Notebook，只关闭网页本身是不够的。<strong>需要在你启动Notebook的那个Terminal里输 Ctrl + c 然后确认，才能把服务器关闭。</strong>官网具体链接为：<a href="http://IPython.org/install.html" target="_blank" rel="noopener">http://IPython.org/install.html</a></p><a id="more"></a><h1 id="变量和数据类型"><a href="#变量和数据类型" class="headerlink" title="变量和数据类型"></a>变量和数据类型</h1><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>变量由字母、数字、下划线组成，但是必须以字母或下划线开头，并避免大写。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;message = <span class="string">'Hello Python world!'</span></span><br><span class="line">&gt;&gt;&gt;print(message)</span><br><span class="line">Hello Python world!</span><br></pre></td></tr></tbody></table></figure><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p>python中，用引号括起来的就是字符串，不论是单引号还是双引号，但是必须成对，不可混用。。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">5</span>+<span class="number">8</span></span><br><span class="line"><span class="number">13</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'5+8'</span></span><br><span class="line"><span class="string">'5+8'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'5'</span>+<span class="string">'8'</span></span><br><span class="line"><span class="string">'58'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'let\'s go'</span></span><br><span class="line"><span class="string">"let's go"</span></span><br></pre></td></tr></tbody></table></figure><h3 id="修改字符串的大小写"><a href="#修改字符串的大小写" class="headerlink" title="修改字符串的大小写"></a>修改字符串的大小写</h3><ul><li>title()：以首字母大写的方式显示每个单词</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> name = <span class="string">"ada love alce"</span></span><br><span class="line"><span class="number">2</span> print(name.title())</span><br><span class="line">Ada Love Alce</span><br></pre></td></tr></tbody></table></figure><ul><li>upper()：将字符串全部改为大写</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> name = <span class="string">"ada love alce"</span></span><br><span class="line"><span class="number">2</span> print(name.upper())</span><br><span class="line">ADA LOVE ALCE</span><br></pre></td></tr></tbody></table></figure><ul><li>lower()：将字符串全部改为小写</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> name = <span class="string">"ada love alce"</span></span><br><span class="line"><span class="number">2</span> print(name.lower())</span><br><span class="line">ada love alce</span><br></pre></td></tr></tbody></table></figure><h3 id="合并字符串"><a href="#合并字符串" class="headerlink" title="合并字符串"></a>合并字符串</h3><p>python中使用 “+” 来合并字符串</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> first_name = <span class="string">"ada"</span></span><br><span class="line"><span class="number">2</span> last_name = <span class="string">"alace"</span></span><br><span class="line"><span class="number">3</span> full_name = first_name + <span class="string">" "</span> + last_name</span><br><span class="line"></span><br><span class="line"><span class="number">4</span> message = <span class="string">"Hello,"</span> + full_name.title() + <span class="string">"!"</span></span><br><span class="line"><span class="number">5</span> print(message)</span><br><span class="line"></span><br><span class="line">Hello,Ada Alace!</span><br></pre></td></tr></tbody></table></figure><h3 id="制表符与换行符"><a href="#制表符与换行符" class="headerlink" title="制表符与换行符"></a>制表符与换行符</h3><p>制表符“\t”、换行符“\n ”</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> print(<span class="string">"language:\n\tPython\n\tC\n\tJavaScript"</span>)</span><br><span class="line">language:</span><br><span class="line">Python</span><br><span class="line">C</span><br><span class="line">JavaScript</span><br></pre></td></tr></tbody></table></figure><h3 id="删除空白"><a href="#删除空白" class="headerlink" title="删除空白"></a>删除空白</h3><p> 找出字符串开头和末尾多余的空白。去末尾空白rstrip()，开头lstrip()、 开头和末尾strip()</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> favourite_language = <span class="string">" python "</span></span><br><span class="line"><span class="number">2</span> favourite_language.rstrip()</span><br><span class="line"><span class="string">' python'</span></span><br><span class="line"></span><br><span class="line"><span class="number">1</span> favourite_language.lstrip()</span><br><span class="line"><span class="string">'python '</span></span><br><span class="line"></span><br><span class="line"><span class="number">1</span> favourite_language.strip()</span><br><span class="line"><span class="string">'python'</span></span><br><span class="line"></span><br><span class="line"><span class="number">1</span> favourite_language</span><br><span class="line"><span class="string">' python '</span></span><br></pre></td></tr></tbody></table></figure><p>但是当输出favourite_language的值时，发现并没有改变。要永久删除这个字符串中的空白，必须将删除结果存回到变量中。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> favourite_language =<span class="string">" python "</span></span><br><span class="line"><span class="number">2</span> favourite_language = favourite_language.strip()</span><br><span class="line"><span class="number">3</span> favourite_language</span><br><span class="line"><span class="string">'python'</span></span><br></pre></td></tr></tbody></table></figure><h3 id="使用字符串时避免语法错误"><a href="#使用字符串时避免语法错误" class="headerlink" title="使用字符串时避免语法错误"></a>使用字符串时避免语法错误</h3><p>例如，当使用单引号标明一个字符串时，如果字符串中间出现了撇号，那么python解释器可能无法识别。这时将单引号改成双引号即可。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> message = <span class="string">'One of Python'</span>s strengths <span class="keyword">is</span> its diverse community<span class="string">' message</span></span><br><span class="line"><span class="string">2 message</span></span><br><span class="line"><span class="string">File "&lt;ipython-input-24-e0db9437bcf6&gt;", line 1</span></span><br><span class="line"><span class="string">    message = '</span>One of Python<span class="string">'s strengths is its diverse community'</span> message</span><br><span class="line">                             ^</span><br><span class="line">SyntaxError: invalid syntax</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> message = <span class="string">"One of Python's strengths is its diverse community"</span> </span><br><span class="line"><span class="number">2</span> message</span><br><span class="line"><span class="string">"One of Python's strengths is its diverse community"</span></span><br></pre></td></tr></tbody></table></figure><h3 id="原始字符串"><a href="#原始字符串" class="headerlink" title="原始字符串"></a>原始字符串</h3><p>原始字符串，只需在字符串前加上一个‘r’即可(用来处理字符串中若出现多个转义字符的情况)</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>str = <span class="string">'C:\note'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(str)</span><br><span class="line">C:</span><br><span class="line">ote</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>str = <span class="string">'C:\\note'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(str)</span><br><span class="line">C:\note</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>str  = <span class="string">r'C:\note\noat\rnate'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(str)</span><br><span class="line">C:\note\noat\rnate</span><br></pre></td></tr></tbody></table></figure><h2 id="数字"><a href="#数字" class="headerlink" title="数字"></a>数字</h2><h3 id="整数"><a href="#整数" class="headerlink" title="整数"></a>整数</h3><p>(+)(-)(<em>)(/）、(*</em>)代表乘方运算</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="number">3</span> ** <span class="number">3</span></span><br><span class="line"><span class="number">27</span></span><br></pre></td></tr></tbody></table></figure><h3 id="浮点数"><a href="#浮点数" class="headerlink" title="浮点数"></a>浮点数</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">1.5e11</span></span><br><span class="line"><span class="number">150000000000.0</span></span><br></pre></td></tr></tbody></table></figure><h3 id="类型转换与比较"><a href="#类型转换与比较" class="headerlink" title="类型转换与比较"></a>类型转换与比较</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="string">"520"</span>   <span class="comment">#Transfer，str-&gt;int</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = int(a)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(b)</span><br><span class="line"><span class="number">520</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>age = <span class="number">23</span>   <span class="comment">#Transfer，int-&gt;str</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>message = <span class="string">"Happy "</span> + str(age) +<span class="string">"rd Birthday!"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>message</span><br><span class="line"><span class="string">'Happy 23rd Birthday!'</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="string">"520"</span>   <span class="comment">#比较类型</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>type(a)</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">str</span>'&gt;</span></span><br><span class="line">&gt;&gt;&gt; a = "小"</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance(a,str)</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></tbody></table></figure><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>用“#”标明。</p><h2 id="Python常用操作符"><a href="#Python常用操作符" class="headerlink" title="Python常用操作符"></a>Python常用操作符</h2><ul><li>算术运算符： “+、 -、<em>、 /、 +=、-=、*</em>、//、%”</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span> ** <span class="number">2</span>   //<span class="number">3</span>^<span class="number">2</span></span><br></pre></td></tr></tbody></table></figure><ul><li>比较操作符：“&gt;、&lt;、&gt;=、&lt;=”</li><li>逻辑运算符：not &gt; and &gt; or</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span>&lt;<span class="number">4</span>&lt;<span class="number">5</span>   //等同于（<span class="number">3</span>&lt;<span class="number">4</span>）<span class="keyword">and</span> (<span class="number">4</span>&lt;<span class="number">5</span>)</span><br></pre></td></tr></tbody></table></figure><ul><li><p>优先级问题</p><p>幂运算&gt;正负号&gt;算数操作符&gt;比较操作符&gt;逻辑操作符</p></li></ul><h2 id="Python之禅"><a href="#Python之禅" class="headerlink" title="Python之禅"></a>Python之禅</h2><p>Python程序员笃信代码可以编写得漂亮而优雅。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="keyword">import</span> this</span><br><span class="line">The Zen of Python, by Tim Peters</span><br><span class="line"></span><br><span class="line">Beautiful <span class="keyword">is</span> better than ugly.</span><br><span class="line">Explicit <span class="keyword">is</span> better than implicit.</span><br><span class="line">Simple <span class="keyword">is</span> better than complex.</span><br><span class="line">Complex <span class="keyword">is</span> better than complicated.</span><br><span class="line">Flat <span class="keyword">is</span> better than nested.</span><br><span class="line">Sparse <span class="keyword">is</span> better than dense.</span><br><span class="line">Readability counts.</span><br><span class="line">Special cases aren<span class="string">'t special enough to break the rules.</span></span><br><span class="line"><span class="string">Although practicality beats purity.</span></span><br><span class="line"><span class="string">Errors should never pass silently.</span></span><br><span class="line"><span class="string">Unless explicitly silenced.</span></span><br><span class="line"><span class="string">In the face of ambiguity, refuse the temptation to guess.</span></span><br><span class="line"><span class="string">There should be one-- and preferably only one --obvious way to do it.</span></span><br><span class="line"><span class="string">Although that way may not be obvious at first unless you'</span>re Dutch.</span><br><span class="line">Now <span class="keyword">is</span> better than never.</span><br><span class="line">Although never <span class="keyword">is</span> often better than *right* now.</span><br><span class="line">If the implementation <span class="keyword">is</span> hard to explain, it<span class="string">'s a bad idea.</span></span><br><span class="line"><span class="string">If the implementation is easy to explain, it may be a good idea.</span></span><br><span class="line"><span class="string">Namespaces are one honking great idea -- let'</span>s do more of those!</span><br></pre></td></tr></tbody></table></figure><h1 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h1><h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><p>列表存储一系列元素，Python中，用“[]” 来表示列表，并用“,”来分隔其中的元素。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> bicycle = [<span class="string">'trek'</span>,<span class="string">'cannodale'</span>,<span class="string">'redline'</span>,<span class="string">'specialized'</span>]</span><br><span class="line"><span class="number">2</span> print(bicycle)</span><br><span class="line">[<span class="string">'trek'</span>, <span class="string">'cannodale'</span>, <span class="string">'redline'</span>, <span class="string">'specialized'</span>]</span><br></pre></td></tr></tbody></table></figure><h3 id="访问列表元素"><a href="#访问列表元素" class="headerlink" title="访问列表元素"></a>访问列表元素</h3><p>指出该元素的索引即可。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> print(bicycle[<span class="number">0</span>])</span><br><span class="line">trek</span><br></pre></td></tr></tbody></table></figure><p>应该灵活的与字符串内容结合起来。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> names = [<span class="string">'jones'</span>,<span class="string">'lace'</span>,<span class="string">'grace'</span>]</span><br><span class="line"><span class="number">2</span> <span class="keyword">for</span> each <span class="keyword">in</span> names:  <span class="comment">#“:”不可少</span></span><br><span class="line"><span class="number">3</span>   print(each.title(),end=<span class="string">' '</span>)    <span class="comment">#此处需要缩进</span></span><br><span class="line">Jones Lace Grace</span><br></pre></td></tr></tbody></table></figure><p>索引从“0”开始，<strong>值得注意的是，当要访问最后一个元素，可以指定索引为“-1”，索引-2返回倒数第二个列表元素，以此类推。</strong></p><h3 id="添加元素"><a href="#添加元素" class="headerlink" title="添加元素"></a>添加元素</h3><ul><li>在列表末尾添加新元素:append()</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> names.append(<span class="string">'Benedict'</span>)</span><br></pre></td></tr></tbody></table></figure><ul><li>在列表中插入元素:insert()</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> names.insert(<span class="number">0</span>,<span class="string">"Angela"</span>)</span><br></pre></td></tr></tbody></table></figure><h3 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h3><ul><li>使用<strong>del语句</strong>删除元素（知道位置）,<strong>删除后无法继续访问</strong>。</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="keyword">del</span> names[<span class="number">0</span>]</span><br></pre></td></tr></tbody></table></figure><ul><li>使用<strong>方法pop()</strong>删除元素，<strong>弹出后可以继续访问。</strong></li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> poped_person = names.pop()   <span class="comment">#无参弹出末尾元素</span></span><br><span class="line"><span class="number">2</span> poped_person</span><br><span class="line">Benedict</span><br><span class="line"></span><br><span class="line"><span class="number">1</span> poped_person = names.pop(<span class="number">0</span>)  <span class="comment">#带参弹出指定元素</span></span><br><span class="line"><span class="number">2</span> poped_person</span><br><span class="line">lace</span><br></pre></td></tr></tbody></table></figure><ul><li>根据值删除元素<strong>remove()</strong>。</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> names</span><br><span class="line">[<span class="string">'grace'</span>, <span class="string">'benedict'</span>, <span class="string">'lace'</span>, <span class="string">'jones'</span>, <span class="string">'grace'</span>, <span class="string">'benedict'</span>, <span class="string">'lace'</span>, <span class="string">'jones'</span>]</span><br><span class="line">names.remove(<span class="string">'jones'</span>)</span><br><span class="line">names</span><br><span class="line">[<span class="string">'grace'</span>, <span class="string">'benedict'</span>, <span class="string">'lace'</span>, <span class="string">'grace'</span>, <span class="string">'benedict'</span>, <span class="string">'lace'</span>, <span class="string">'jones'</span>]</span><br></pre></td></tr></tbody></table></figure><p><strong>可以看到，remove()只删除第一个’jones’。 删除所有，参见6.3.2</strong></p><h3 id="组织列表"><a href="#组织列表" class="headerlink" title="组织列表"></a>组织列表</h3><ul><li>使用<strong>sort()</strong>方法对列表进行<strong>永久性</strong>排序</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> cars = [<span class="string">'baoma'</span>,<span class="string">'zoka'</span>,<span class="string">'dazhong'</span>]</span><br><span class="line"><span class="number">2</span> cars.sort(); <span class="comment">#正序</span></span><br><span class="line"><span class="number">3</span> print(cars)</span><br><span class="line">[<span class="string">'baoma'</span>, <span class="string">'dazhong'</span>, <span class="string">'zoka'</span>]</span><br><span class="line"><span class="number">4</span> cars.sort(reverse=<span class="literal">True</span>)</span><br><span class="line"><span class="number">5</span> cars</span><br><span class="line">[<span class="string">'zoka'</span>, <span class="string">'dazhong'</span>, <span class="string">'baoma'</span>] <span class="comment">#倒序</span></span><br></pre></td></tr></tbody></table></figure><ul><li>使用<strong>sorted()</strong>方法对列表进行<strong>临时</strong>排序</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> print(sorted(cars))<span class="comment">#注意写法</span></span><br><span class="line"><span class="number">2</span> cars</span><br><span class="line">[<span class="string">'baoma'</span>, <span class="string">'dazhong'</span>, <span class="string">'zoka'</span>]</span><br><span class="line">[<span class="string">'zoka'</span>, <span class="string">'dazhong'</span>, <span class="string">'baoma'</span>]</span><br><span class="line"></span><br><span class="line"><span class="number">3</span> print(sorted(cars,reverse = <span class="literal">True</span>)) <span class="comment">#也可指定顺序</span></span><br><span class="line">[<span class="string">'zoka'</span>, <span class="string">'dazhong'</span>, <span class="string">'baoma'</span>]</span><br></pre></td></tr></tbody></table></figure><ul><li>倒序函数<strong>reverse()</strong></li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> cars.reverse()</span><br><span class="line"><span class="number">2</span> cars</span><br><span class="line">[<span class="string">'zoka'</span>, <span class="string">'dazhong'</span>, <span class="string">'baoma'</span>]</span><br></pre></td></tr></tbody></table></figure><ul><li>列表长度<strong>len()</strong></li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> len(cars)</span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></tbody></table></figure><h2 id="操作列表"><a href="#操作列表" class="headerlink" title="操作列表"></a>操作列表</h2><h3 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> magicians = [<span class="string">'alace'</span>,<span class="string">'brown'</span>,<span class="string">'danny'</span>,<span class="string">'li'</span>]</span><br><span class="line"><span class="number">2</span> <span class="keyword">for</span> magician <span class="keyword">in</span> magicians:<span class="comment">#冒号</span></span><br><span class="line"><span class="number">3</span>    print(<span class="string">"magician:"</span>+magician+<span class="string">"your trick is so amazing!\n"</span>)</span><br><span class="line"><span class="number">4</span>    print(<span class="string">"I can't wait to see your next"</span>)</span><br><span class="line"><span class="number">5</span> print(<span class="string">"Thank u,everyone.That was a great magic show!"</span>)</span><br><span class="line"></span><br><span class="line">magician:alaceyour trick <span class="keyword">is</span> so amazing!</span><br><span class="line"></span><br><span class="line">I can<span class="string">'t wait to see your next</span></span><br><span class="line"><span class="string">magician:brownyour trick is so amazing!</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">I can'</span>t wait to see your next</span><br><span class="line">magician:dannyyour trick <span class="keyword">is</span> so amazing!</span><br><span class="line"></span><br><span class="line">I can<span class="string">'t wait to see your next</span></span><br><span class="line"><span class="string">magician:liyour trick is so amazing!</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">I can'</span>t wait to see your next</span><br><span class="line">Thank u,everyone.That was a great magic show!</span><br></pre></td></tr></tbody></table></figure><p>注意：</p><ol><li><p>Python根据缩进来判断代码行与前一个代码行的关系。</p></li><li><p>在for循环的后面，每个缩进的代码行都是循环的一部分，没有缩进的代码都只执行一次。</p></li><li><p>for语句末尾的冒号告诉Python，下一行是循环的第一行。</p></li></ol><h3 id="创建数值列表-range"><a href="#创建数值列表-range" class="headerlink" title="创建数值列表:range()"></a>创建数值列表:range()</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="keyword">for</span> value <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">5</span>):</span><br><span class="line"><span class="number">2</span>   print(value)</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br></pre></td></tr></tbody></table></figure><p>差一行为，所以并不会打印数字“5”。</p><p>要创建数字列表:</p><ol><li>可使用<strong>list()</strong>将<strong>range()</strong>的结果直接转换为列表。</li></ol><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> numbers = list(range(<span class="number">1</span>,<span class="number">6</span>))</span><br><span class="line"><span class="number">2</span> numbers</span><br></pre></td></tr></tbody></table></figure><ol><li>使用循环，利用列表函数</li></ol><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> squares = []     <span class="comment">#输出1`10的平方</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">for</span> value <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">11</span>):</span><br><span class="line"><span class="number">3</span>     square = value**<span class="number">2</span></span><br><span class="line"><span class="number">4</span>     squares.append(square)</span><br><span class="line"><span class="number">5</span> print(squares)</span><br><span class="line">[<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>, <span class="number">36</span>, <span class="number">49</span>, <span class="number">64</span>, <span class="number">81</span>, <span class="number">100</span>]</span><br></pre></td></tr></tbody></table></figure><p>range()还可以设置步长，按指定步长增长。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> even_numbers = list(range(<span class="number">2</span>,<span class="number">11</span>,<span class="number">2</span>))   <span class="comment">#设置步长为2，输出2～11之间的偶数</span></span><br><span class="line"><span class="number">2</span> print(even_numbers)</span><br><span class="line">[<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">10</span>]</span><br></pre></td></tr></tbody></table></figure><h3 id="对数字列表进行简单的统计计算"><a href="#对数字列表进行简单的统计计算" class="headerlink" title="对数字列表进行简单的统计计算"></a>对数字列表进行简单的统计计算</h3><p><strong>min()、max()、sum()</strong></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> digits = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>]</span><br><span class="line"><span class="number">2</span> min(digits)</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">3</span> max(digits)</span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">4</span> sum(digits)</span><br><span class="line"><span class="number">28</span></span><br></pre></td></tr></tbody></table></figure><h3 id="列表解析"><a href="#列表解析" class="headerlink" title="列表解析"></a>列表解析</h3><p>更加简洁的创建列表的方式。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> squares = [value**<span class="number">2</span> <span class="keyword">for</span> value <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">11</span>)]</span><br><span class="line"><span class="number">2</span> print(squares)</span><br><span class="line">[<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>, <span class="number">36</span>, <span class="number">49</span>, <span class="number">64</span>, <span class="number">81</span>, <span class="number">100</span>]</span><br></pre></td></tr></tbody></table></figure><h2 id="使用列表的一部分—-列表切片"><a href="#使用列表的一部分—-列表切片" class="headerlink" title="使用列表的一部分—-列表切片"></a>使用列表的一部分—-列表切片</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> players = [<span class="string">'charles'</span>,<span class="string">'martina'</span>,<span class="string">'florence'</span>]</span><br><span class="line"><span class="number">2</span> print(players[<span class="number">0</span>:<span class="number">3</span>])    <span class="comment">#第一个元素到第三个元素，输出下标0～2的元素</span></span><br><span class="line">[<span class="string">'charles'</span>, <span class="string">'martina'</span>, <span class="string">'florence'</span>]</span><br></pre></td></tr></tbody></table></figure><p>与range()一样，python在达到第二个数字“3”后<strong>停止</strong>，所以只输出三个元素。</p><p>负数索引返回离列表末尾相应距离的元素，因此可以输出列表末尾的任何切片。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> print(players[<span class="number">-3</span>:])    <span class="comment">#打印最后三名队员的名字</span></span><br></pre></td></tr></tbody></table></figure><h3 id="遍历切片"><a href="#遍历切片" class="headerlink" title="遍历切片"></a>遍历切片</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="keyword">for</span> player <span class="keyword">in</span> players[<span class="number">0</span>:<span class="number">3</span>]:</span><br><span class="line"><span class="number">2</span>  print(player.title())   <span class="comment">#打印前三名队员的名字</span></span><br></pre></td></tr></tbody></table></figure><h3 id="复制列表"><a href="#复制列表" class="headerlink" title="复制列表"></a>复制列表</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> my_foods = [<span class="string">'pizza'</span>,<span class="string">'falafel'</span>,<span class="string">'carrot'</span>]</span><br><span class="line"><span class="number">2</span> friend_foods = my_foods[:] <span class="comment">#这里不等同于friend_foods = my_foods</span></span><br><span class="line"><span class="number">3</span> friend_foods</span><br><span class="line">[<span class="string">'pizza'</span>, <span class="string">'falafel'</span>, <span class="string">'carrot'</span>]</span><br><span class="line"></span><br><span class="line"><span class="number">1</span> friend_foods = my_foods[<span class="number">0</span>:<span class="number">1</span>]</span><br><span class="line"><span class="number">2</span> friend_foods</span><br><span class="line">[<span class="string">'pizza'</span>]</span><br></pre></td></tr></tbody></table></figure><p><strong>注：friend_foods = my_foods[:] 与 friend_foods = my_foods的区别：</strong></p><p>friend_foods = my_foods[:]，是将my_foods的副本<strong>存储到</strong>friend_foods 中，因此会产生两个列表。</p><p>而friend_foods = my_foods，是将新变量friend_foods<strong>关联到</strong>my_foods列表，因此这两个列表都指向同一个列表</p><h2 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h2><p>列表非常适合用于存储在程序运行期间可能变化的数据集。但有时你需要创建一系列<strong>不可修改的元素</strong>。不可变的列表被称为元组。</p><h3 id="定义元组"><a href="#定义元组" class="headerlink" title="定义元组"></a>定义元组</h3><p>元组采用圆括号而不是方括号来标识。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> dimensions = (<span class="number">200</span>,<span class="number">50</span>)   <span class="comment">#定义</span></span><br><span class="line"><span class="number">2</span> print(dimensions[<span class="number">0</span>]) <span class="comment">#访问</span></span><br><span class="line"><span class="number">3</span> print(dimensions[<span class="number">1</span>])</span><br><span class="line"><span class="number">200</span></span><br><span class="line"><span class="number">50</span></span><br></pre></td></tr></tbody></table></figure><p><strong>注</strong>：Python规定不能给元组的元素赋值。因此类似于</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> dimension[<span class="number">0</span>] = <span class="number">30</span></span><br></pre></td></tr></tbody></table></figure><p><strong>是禁止的。</strong></p><h3 id="遍历元组"><a href="#遍历元组" class="headerlink" title="遍历元组"></a>遍历元组</h3><p>同列表语法</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="keyword">for</span> dimension <span class="keyword">in</span> dimensions:</span><br><span class="line"><span class="number">2</span>   print(dimension)</span><br></pre></td></tr></tbody></table></figure><h3 id="修改元组变量"><a href="#修改元组变量" class="headerlink" title="修改元组变量"></a>修改元组变量</h3><p>虽然不能修改元组的元素，但可以给存储元组的变量赋值。因此，若需要修改dimensions，可重新定义整个元组</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> dimensions = (<span class="number">400</span>,<span class="number">100</span>) <span class="comment">#重新定义</span></span><br></pre></td></tr></tbody></table></figure><p>元组的删除是python自动执行的。无需自动删除。</p><h2 id="设置代码格式"><a href="#设置代码格式" class="headerlink" title="设置代码格式"></a>设置代码格式</h2><p>  <a href="https://python.org/dev/peps/pep-0008/" target="_blank" rel="noopener">PEP 8官网</a></p><ol><li><p>缩进：PEP 8建议每级缩进都使用4个空格。（或者设置制表符为4个空格）</p></li><li><p>行长：建议每行不超过80字符。</p></li><li><p>空行：使用空行将程序的不同部分分开。</p></li></ol><h1 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h1><h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><ul><li>一个条件</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> cars = [<span class="string">'audi'</span>,<span class="string">'benchi'</span>,<span class="string">'bmw'</span>,<span class="string">'haha'</span>]</span><br><span class="line"><span class="number">2</span> <span class="keyword">for</span> car <span class="keyword">in</span> cars:</span><br><span class="line"><span class="number">3</span>   <span class="keyword">if</span> car == <span class="string">'bmw'</span>:      <span class="comment">#注意这里字符串比较直接用’==‘ 不相等用“！=”</span></span><br><span class="line"><span class="number">4</span>       print(car.upper())</span><br><span class="line"><span class="number">5</span>   <span class="keyword">else</span>:</span><br><span class="line"><span class="number">6</span>       print(car.title())</span><br></pre></td></tr></tbody></table></figure><p><strong>注意”:“的使用，注意缩行。</strong>并且，python比较相等时<strong>区分大小写</strong>。</p><ul><li>多个条件: “and””or”</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> age0 = <span class="number">0</span></span><br><span class="line"><span class="number">2</span> age1 = <span class="number">1</span></span><br><span class="line"><span class="number">3</span> age0 &gt;= <span class="number">21</span> <span class="keyword">and</span> age1 &gt;= <span class="number">21</span></span><br><span class="line">FALSE</span><br></pre></td></tr></tbody></table></figure><ul><li>检查特定值是否包含在列表中 <strong>“in、not in”</strong></li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> request_toppings = [<span class="string">'mushrooms'</span>,<span class="string">'onions'</span>,<span class="string">'pineapple'</span>,]</span><br><span class="line"><span class="number">2</span> <span class="string">'mushrooms'</span> <span class="keyword">in</span> request_toppings</span><br><span class="line">TRUE</span><br></pre></td></tr></tbody></table></figure><h2 id="if-elif-else-与-if-if-if"><a href="#if-elif-else-与-if-if-if" class="headerlink" title="if-elif-else 与 if-if-if"></a>if-elif-else 与 if-if-if</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> age = <span class="number">12</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">if</span> age &lt; <span class="number">4</span>:</span><br><span class="line"><span class="number">3</span>     price = <span class="number">0</span></span><br><span class="line"><span class="number">4</span> <span class="keyword">elif</span> age &lt; <span class="number">18</span>:</span><br><span class="line"><span class="number">5</span>     price = <span class="number">5</span></span><br><span class="line"><span class="number">6</span> <span class="keyword">else</span>:</span><br><span class="line"><span class="number">7</span>     price = <span class="number">10</span></span><br><span class="line"><span class="number">8</span> print(<span class="string">"Your admission cost is $"</span> + str(price) +<span class="string">"."</span>)</span><br><span class="line">Your admission cost <span class="keyword">is</span> $<span class="number">5.</span></span><br></pre></td></tr></tbody></table></figure><p>总之，如果你只想执行一个代码块，就使用if-else-if 结构；如果要运行多个代码块，就使用一系列独立的if语句。</p><h2 id="确定列表是否为空"><a href="#确定列表是否为空" class="headerlink" title="确定列表是否为空"></a>确定列表是否为空</h2><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> requested_toppings = []</span><br><span class="line"><span class="number">2</span> <span class="keyword">if</span> requested_toppings:</span><br><span class="line"><span class="number">3</span>     <span class="keyword">for</span> requested_topping <span class="keyword">in</span> requested_toppings:</span><br><span class="line"><span class="number">4</span>        print(<span class="string">"Adding "</span>+ requested_topping + <span class="string">"."</span>)</span><br><span class="line"><span class="number">5</span> <span class="keyword">else</span>:<span class="comment">#缩进位置一定要正确，否则运行错误。</span></span><br><span class="line"><span class="number">6</span>     print(<span class="string">"Are u sure u want to a plain pizza?"</span>)</span><br><span class="line">Are u sure u want to a plain pizza?</span><br></pre></td></tr></tbody></table></figure><p><strong>注：在if语句中将列表名用在条件表达式中时，Python将在列表至少包含一个元素时返回True，并在列表为空时返回False。</strong></p><h1 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h1><p>将相关信息联系起来的字典。</p><h2 id="一个简单的字典"><a href="#一个简单的字典" class="headerlink" title="一个简单的字典"></a>一个简单的字典</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> alien_0 = {<span class="string">'color'</span>:<span class="string">'green'</span>,<span class="string">'points'</span>:<span class="number">5</span>}</span><br><span class="line"><span class="number">2</span> print(alien_0[<span class="string">'color'</span>])</span><br><span class="line"><span class="number">3</span> print(alien_1[<span class="string">'points'</span>])</span><br><span class="line">green</span><br><span class="line"><span class="number">5</span></span><br></pre></td></tr></tbody></table></figure><h2 id="使用字典"><a href="#使用字典" class="headerlink" title="使用字典"></a>使用字典</h2><p>在Python中，字典时一系列<strong>”键-值“</strong>对。每个键都与一个值相关联，值可以是Python中的任何对象。</p><h3 id="访问字典中的值"><a href="#访问字典中的值" class="headerlink" title="访问字典中的值"></a>访问字典中的值</h3><p>要获取与键相关联的值，可依次指定字典名和放在方括号内的键。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> print(alien_0[<span class="string">'color'</span>])</span><br><span class="line">green</span><br></pre></td></tr></tbody></table></figure><h3 id="添加键-值对"><a href="#添加键-值对" class="headerlink" title="添加键-值对"></a>添加键-值对</h3><p>依次指定字典名、键、值。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> alien_0[<span class="string">'x_position'</span>] = <span class="number">0</span></span><br><span class="line"><span class="number">2</span> alien_0[<span class="string">'y_position'</span>] = <span class="number">25</span></span><br><span class="line"><span class="number">3</span> print(alien_0)</span><br><span class="line">{<span class="string">'color'</span>: <span class="string">'green'</span>, <span class="string">'points'</span>: <span class="number">5</span>, <span class="string">'x_position'</span>: <span class="number">0</span>, <span class="string">'y_position'</span>: <span class="number">25</span>}</span><br></pre></td></tr></tbody></table></figure><h3 id="创建空字典"><a href="#创建空字典" class="headerlink" title="创建空字典"></a>创建空字典</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> alien_0 = {}        <span class="comment">#定义空字典</span></span><br><span class="line"><span class="number">2</span> alien_0[<span class="string">'color'</span>] = <span class="string">'green'</span></span><br><span class="line"><span class="number">3</span> alien_0[<span class="string">'points'</span>] = <span class="string">'5'</span></span><br><span class="line"><span class="number">4</span> print(alien_0)</span><br><span class="line">{<span class="string">'color'</span>: <span class="string">'green'</span>, <span class="string">'points'</span>: <span class="string">'5'</span>}</span><br></pre></td></tr></tbody></table></figure><h3 id="修改字典中的值"><a href="#修改字典中的值" class="headerlink" title="修改字典中的值"></a>修改字典中的值</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> alien_0[<span class="string">'color'</span>] = <span class="string">'yellow'</span></span><br></pre></td></tr></tbody></table></figure><h3 id="删除键-值对"><a href="#删除键-值对" class="headerlink" title="删除键-值对"></a>删除键-值对</h3><p><strong>使用del语句</strong>将相应的键-值对彻底删除。使用del语句时，必须指定字典名和要删除的键。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> alien_0 = {<span class="string">'color'</span> : <span class="string">'green'</span>,<span class="string">'points'</span>: <span class="number">5</span>}</span><br><span class="line"><span class="number">2</span> print(alien_0)</span><br><span class="line">{<span class="string">'color'</span>: <span class="string">'green'</span>, <span class="string">'points'</span>: <span class="number">5</span>}</span><br><span class="line"></span><br><span class="line"><span class="number">1</span> <span class="keyword">del</span> alien_0[<span class="string">'points'</span>]        <span class="comment">#删除键值对</span></span><br><span class="line"><span class="number">2</span> print(alien_0)</span><br><span class="line">{<span class="string">'color'</span>: <span class="string">'green'</span>}</span><br></pre></td></tr></tbody></table></figure><h3 id="由类似对象组成的字典"><a href="#由类似对象组成的字典" class="headerlink" title="由类似对象组成的字典"></a>由类似对象组成的字典</h3><p>请注意下面字典的定义<strong>格式</strong>，还有print输出格式。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> favourite_languages = {   <span class="comment">#将一个较大的字典放在了多行中，用',隔开</span></span><br><span class="line"><span class="number">2</span>    <span class="string">'jen'</span>: <span class="string">'python'</span>,</span><br><span class="line"><span class="number">3</span>     <span class="string">'sarah'</span>: <span class="string">'c'</span>,</span><br><span class="line"><span class="number">4</span>     <span class="string">'edward'</span>: <span class="string">'ruby'</span>,</span><br><span class="line"><span class="number">5</span>     <span class="string">'phil'</span>:<span class="string">'python'</span>,</span><br><span class="line"><span class="number">6</span> }</span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">8</span> print(<span class="string">"Sarah's favourite language is"</span> +      <span class="comment">#太长的print()可以用‘+’逻辑性的隔成多行。</span></span><br><span class="line"><span class="number">9</span>      favourite_languages[<span class="string">'sarah'</span>].title() +</span><br><span class="line"><span class="number">10</span>       <span class="string">'.'</span>)</span><br><span class="line">Sarah<span class="string">'s favourite language isC.</span></span><br></pre></td></tr></tbody></table></figure><h2 id="遍历字典"><a href="#遍历字典" class="headerlink" title="遍历字典"></a>遍历字典</h2><h3 id="遍历所有的键-值对-items"><a href="#遍历所有的键-值对-items" class="headerlink" title="遍历所有的键-值对:items()"></a>遍历所有的键-值对:items()</h3><p>现有字典</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> user_0 = {</span><br><span class="line"><span class="number">2</span>     <span class="string">'username'</span>:<span class="string">'efermi'</span>,</span><br><span class="line"><span class="number">3</span>     <span class="string">'first'</span>:<span class="string">'enrico'</span>,</span><br><span class="line"><span class="number">4</span>     <span class="string">'last'</span>:<span class="string">'femi'</span>,</span><br><span class="line"><span class="number">5</span> }</span><br></pre></td></tr></tbody></table></figure><p>使用for循环遍历字典</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="keyword">or</span> key,value <span class="keyword">in</span> user_0.items():</span><br><span class="line"><span class="number">2</span>     print(<span class="string">"\nkey:"</span> + key)</span><br><span class="line"><span class="number">3</span>     print(<span class="string">"Value:"</span> + value)</span><br></pre></td></tr></tbody></table></figure><p>item()方法返回一个键值对列表。注意，即使遍历字典时，键-值对的返回顺序也与存储顺序不同。Python不关系键-值对的存储顺序，而只跟踪键值之间的关联关系。</p><h3 id="遍历所有的键-keys"><a href="#遍历所有的键-keys" class="headerlink" title="遍历所有的键:keys()"></a>遍历所有的键:keys()</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="keyword">for</span> name <span class="keyword">in</span> user_0.keys():   <span class="comment">#方法keys()返回一个列表，包含字典中的所有键。</span></span><br><span class="line"><span class="number">2</span>     print(name.title())</span><br><span class="line">Username</span><br><span class="line">First</span><br><span class="line">Last</span><br></pre></td></tr></tbody></table></figure><p>遍历字典时，会默认遍历所有的键，因此，将’user0.keys(‘)改为’user_0’,输出不变。</p><p>这种循环中，<strong>可以使用当前键来访问与之相关联的值。</strong></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> favourite_languages = {<span class="comment">#字典</span></span><br><span class="line"><span class="number">2</span>     <span class="string">'jen'</span>: <span class="string">'python'</span>,</span><br><span class="line"><span class="number">3</span>     <span class="string">'sarah'</span>: <span class="string">'c'</span>,</span><br><span class="line"><span class="number">4</span>     <span class="string">'edward'</span>: <span class="string">'ruby'</span>,</span><br><span class="line"><span class="number">5</span>     <span class="string">'phil'</span>:<span class="string">'python'</span>,</span><br><span class="line"><span class="number">6</span> }</span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">8</span> friends = [<span class="string">'phil'</span>,<span class="string">'sarah'</span>]<span class="comment">#列表</span></span><br><span class="line"><span class="number">9</span> <span class="keyword">for</span> name <span class="keyword">in</span> favourite_languages.keys():</span><br><span class="line"><span class="number">10</span>     print(name.title())</span><br><span class="line"><span class="number">11</span>    </span><br><span class="line"><span class="number">12</span>    <span class="keyword">if</span> name <span class="keyword">in</span> friends:</span><br><span class="line"><span class="number">13</span>        print(<span class="string">"Hi"</span> + name.title() +<span class="string">", I see your favourite_language is"</span> +</span><br><span class="line"><span class="number">14</span>             favourite_languages[name].title() + <span class="string">"!"</span>)     <span class="comment">#访问字典的值</span></span><br></pre></td></tr></tbody></table></figure><p>字典总是明确地记录键和值之间的关联关系，但获取字典的元素时，获取顺序是不可预测的。要以特定的顺序返回元素，一种方法是在for循环中对返回的键进行排序。</p><h3 id="顺序遍历所有键-sorted"><a href="#顺序遍历所有键-sorted" class="headerlink" title="顺序遍历所有键:sorted()"></a>顺序遍历所有键:sorted()</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="keyword">for</span> name <span class="keyword">in</span> sorted(favourite_language.keys()):</span><br><span class="line"><span class="number">2</span>     print(name.title() + <span class="string">',thank u for taking the poll'</span>)</span><br><span class="line">Edward,thank u <span class="keyword">for</span> taking the poll</span><br><span class="line">Jen,thank u <span class="keyword">for</span> taking the poll</span><br><span class="line">Phil,thank u <span class="keyword">for</span> taking the poll</span><br><span class="line">Sarah,thank u <span class="keyword">for</span> taking the poll</span><br></pre></td></tr></tbody></table></figure><h3 id="遍历所有值-values"><a href="#遍历所有值-values" class="headerlink" title="遍历所有值:values()"></a>遍历所有值:values()</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="keyword">for</span> language <span class="keyword">in</span> favourite_languages.values():</span><br><span class="line"><span class="number">2</span>     print(<span class="string">"the favourite languages is "</span> + language.title())</span><br><span class="line">the favourite languages <span class="keyword">is</span> Python</span><br><span class="line">the favourite languages <span class="keyword">is</span> C</span><br><span class="line">the favourite languages <span class="keyword">is</span> Ruby</span><br><span class="line">the favourite languages <span class="keyword">is</span> Python</span><br></pre></td></tr></tbody></table></figure><p><strong>为剔除重复项，可使用集合set，集合类似于列表，但每个元素都必须是独一无二的。</strong></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="keyword">for</span> language <span class="keyword">in</span> set(favourite_languages.values()):</span><br><span class="line"><span class="number">2</span>     print(<span class="string">"the favourite languages is "</span> + language.title())</span><br><span class="line">the favourite languages <span class="keyword">is</span> C</span><br><span class="line">the favourite languages <span class="keyword">is</span> Ruby</span><br><span class="line">the favourite languages <span class="keyword">is</span> Python</span><br></pre></td></tr></tbody></table></figure><h2 id="嵌套"><a href="#嵌套" class="headerlink" title="嵌套"></a>嵌套</h2><p>有时候，需要将一系列<strong>字典</strong>存储在列表中，或将<strong>列表</strong>作为值存储在字典中，这称为<strong>嵌套</strong>。</p><h3 id="字典列表"><a href="#字典列表" class="headerlink" title="字典列表"></a>字典列表</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> alien_0 = {<span class="string">'color'</span>:<span class="string">'green'</span>,<span class="string">'points'</span>:<span class="string">'5'</span>}     <span class="comment">#alien字典</span></span><br><span class="line"><span class="number">2</span> alien_1 = {<span class="string">'color'</span>:<span class="string">'yellow'</span>,<span class="string">'points'</span>:<span class="string">'10'</span>}</span><br><span class="line"><span class="number">3</span> alien_2 = {<span class="string">'color'</span>:<span class="string">'red'</span>,<span class="string">'points'</span>:<span class="string">'15'</span>}</span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">5</span> aliens = [alien_0,alien_1,alien_2]           <span class="comment">#aliens列表</span></span><br><span class="line"><span class="number">6</span> </span><br><span class="line"><span class="number">7</span> <span class="keyword">for</span> alien <span class="keyword">in</span> aliens:</span><br><span class="line"><span class="number">8</span>    print(alien)</span><br></pre></td></tr></tbody></table></figure><h3 id="列表字典"><a href="#列表字典" class="headerlink" title="列表字典"></a>列表字典</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">#存储此pizza的信息</span></span><br><span class="line"><span class="number">1</span> pizza = {</span><br><span class="line"><span class="number">2</span>   <span class="string">'crust'</span>: <span class="string">'thick'</span>,</span><br><span class="line"><span class="number">3</span>   <span class="string">'toppings'</span>: [<span class="string">'mushrooms'</span>,<span class="string">'extra cheese'</span>],</span><br><span class="line"><span class="number">4</span> }</span><br><span class="line"><span class="number">5</span> <span class="comment">#概述所点的pizza</span></span><br><span class="line"><span class="number">6</span> print(<span class="string">"You ordered a "</span> + pizza[<span class="string">'crust'</span>] + <span class="string">'-crust pizza '</span> +</span><br><span class="line"><span class="number">7</span>      <span class="string">"with the following toppings:"</span>)</span><br><span class="line"><span class="number">8</span> </span><br><span class="line"><span class="number">9</span> <span class="keyword">for</span> topping <span class="keyword">in</span> pizza[<span class="string">'toppings'</span>]:</span><br><span class="line"><span class="number">10</span>    print(<span class="string">"\t"</span> + topping)</span><br></pre></td></tr></tbody></table></figure><h3 id="字典字典"><a href="#字典字典" class="headerlink" title="字典字典"></a>字典字典</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> users = {</span><br><span class="line"><span class="number">2</span>     <span class="string">'GK'</span>: {</span><br><span class="line"><span class="number">3</span>       <span class="string">'first'</span>:<span class="string">'Grace'</span>,</span><br><span class="line"><span class="number">4</span>         <span class="string">'last'</span>: <span class="string">'Koo'</span>,</span><br><span class="line"><span class="number">5</span>         <span class="string">'location'</span>:<span class="string">'6Lanzhou'</span>,</span><br><span class="line"><span class="number">6</span>     },                            <span class="comment">#这是一个键值对，‘，’莫忘记</span></span><br><span class="line"><span class="number">7</span>     <span class="string">'BJ'</span>:{</span><br><span class="line"><span class="number">8</span>         <span class="string">'first'</span>:<span class="string">'Benedict'</span>,</span><br><span class="line"><span class="number">9</span>         <span class="string">'last'</span>:<span class="string">'Jin'</span>,</span><br><span class="line"><span class="number">10</span>        <span class="string">'location'</span>:<span class="string">'Yangzhou'</span>,</span><br><span class="line"><span class="number">11</span>     },</span><br><span class="line"><span class="number">12</span> } </span><br><span class="line"><span class="number">13</span> <span class="keyword">for</span> username,user_info <span class="keyword">in</span> users.items():</span><br><span class="line"><span class="number">14</span>        print(<span class="string">"\nUsername:"</span> + username)</span><br><span class="line"><span class="number">15</span>        full_name = user_info[<span class="string">'first'</span>] + <span class="string">" "</span> + user_info[<span class="string">"last"</span>]</span><br><span class="line"><span class="number">16</span>        location = user_info[<span class="string">'location'</span>]</span><br><span class="line"><span class="number">17</span>        </span><br><span class="line"><span class="number">18</span>        print(<span class="string">"\tFull name:"</span> + full_name.title())</span><br><span class="line"><span class="number">19</span>        print(<span class="string">"\tlocation: "</span> + location.title())</span><br><span class="line"></span><br><span class="line">Username:GK</span><br><span class="line">Full name:Grace Koo</span><br><span class="line">location: <span class="number">6L</span>anzhou</span><br><span class="line"></span><br><span class="line">Username:BJ</span><br><span class="line">Full name:Benedict Jin</span><br><span class="line">location: Yangzhou</span><br></pre></td></tr></tbody></table></figure><h2 id="使用标准库中的Collection优化字典"><a href="#使用标准库中的Collection优化字典" class="headerlink" title="使用标准库中的Collection优化字典"></a>使用标准库中的Collection优化字典</h2><p>字典不记输入顺序，要记录键-值输入顺序，可使用模块collections中的OrderedDict类。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> OrderedDict</span><br><span class="line"></span><br><span class="line">favourite_languages = OrderedDict()</span><br><span class="line"></span><br><span class="line">favourite_languages[<span class="string">'jen'</span>] = <span class="string">'python'</span></span><br><span class="line">favourite_languages[<span class="string">'sarah'</span>] = <span class="string">'C'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> name,language <span class="keyword">in</span> favourite_languages.items():</span><br><span class="line">  print(name.title() + <span class="string">"'s favourite language is"</span> +</span><br><span class="line">       language.title() + <span class="string">"."</span>)</span><br></pre></td></tr></tbody></table></figure><h1 id="用户输入和while循环"><a href="#用户输入和while循环" class="headerlink" title="用户输入和while循环"></a>用户输入和while循环</h1><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> message = input(<span class="string">"Tell me something,and I will repeat it back to u:"</span>)</span><br><span class="line"><span class="number">2</span> print(message)</span><br><span class="line">Tell me something,<span class="keyword">and</span> I will repeat it back to u:hello,python</span><br><span class="line">hello,python</span><br></pre></td></tr></tbody></table></figure><p>input接受一个参数，即向用户显示的信息。程序等待用户输入，并在用户按回车键后继续执行。输入存储变量在message中。</p><p>出于清晰考虑，若提示信息太长，可以使用以下方法。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> prompt = <span class="string">"If you tell us who u are,we can personalize the message you see."</span></span><br><span class="line"><span class="number">2</span> prompt += <span class="string">"\nwhat is your first name?"</span>      <span class="comment">#在字符串末尾添加一个字符串</span></span><br><span class="line"><span class="number">3</span> name = input(prompt)</span><br><span class="line"><span class="number">4</span> print(<span class="string">"\nHello,"</span> + name +<span class="string">"!"</span>)</span><br><span class="line"></span><br><span class="line">If you tell us who u are,we can personalize the message you see.</span><br><span class="line">what is your first name?Grace</span><br><span class="line"></span><br><span class="line">Hello,Grace!</span><br></pre></td></tr></tbody></table></figure><h2 id="用户输入input"><a href="#用户输入input" class="headerlink" title="用户输入input()"></a>用户输入input()</h2><h3 id="使用int-来获取数值输入"><a href="#使用int-来获取数值输入" class="headerlink" title="使用int()来获取数值输入"></a>使用int()来获取数值输入</h3><p>input()将用户输入的内容解释成字符串，但是如果用户只是想输入数值，就会遇到麻烦。对此，使用int()函数来将<strong>字符串转化为数值</strong>。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> height = input(<span class="string">"How tall are u,in inches?"</span>)</span><br><span class="line"><span class="number">2</span> height = int(height)</span><br><span class="line"><span class="number">3</span> </span><br><span class="line"><span class="number">4</span> <span class="keyword">if</span> height  &gt;= <span class="number">36</span>:</span><br><span class="line"><span class="number">5</span>     print(<span class="string">"You are old enough to ride!"</span>)</span><br><span class="line"><span class="number">6</span> <span class="keyword">else</span>:</span><br><span class="line"><span class="number">7</span>     print(<span class="string">"\nYou'll be able to ride when you're a little older."</span>)</span><br></pre></td></tr></tbody></table></figure><h3 id="求模运算符“-”"><a href="#求模运算符“-”" class="headerlink" title="求模运算符“%”"></a>求模运算符“%”</h3><p>返回余数。可用来求奇偶性。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="number">4</span>%<span class="number">3</span></span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></tbody></table></figure><h2 id="While循环简介"><a href="#While循环简介" class="headerlink" title="While循环简介"></a>While循环简介</h2><p>while循环不断的运行，直到指定的条件不满足为止。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> current_number = <span class="number">1</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">while</span> current_number &lt;= <span class="number">5</span>:</span><br><span class="line"><span class="number">3</span>     print(current_number)</span><br><span class="line"><span class="number">4</span>     current_number += <span class="number">1</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">5</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#获取用户输入，输入“quit”退出程序</span></span><br><span class="line"><span class="number">1</span> prompt = <span class="string">"\nTell me something,and I will repeat it back to u:"</span></span><br><span class="line"><span class="number">2</span> prompt += <span class="string">"\nEnter 'quit' to end the program."</span></span><br><span class="line"><span class="number">3</span> message = <span class="string">""</span></span><br><span class="line"><span class="number">4</span> <span class="keyword">while</span> message != <span class="string">"quit"</span>:</span><br><span class="line"><span class="number">5</span>     message = input(prompt)</span><br><span class="line"><span class="number">6</span>     <span class="keyword">if</span> message != <span class="string">'quit'</span>        <span class="comment">#选择不打印quit</span></span><br><span class="line"><span class="number">7</span>     print(message)</span><br><span class="line"></span><br><span class="line">Tell me something,<span class="keyword">and</span> I will repeat it back to u:</span><br><span class="line">Enter <span class="string">'quit'</span> to end the program.ui</span><br><span class="line">ui</span><br></pre></td></tr></tbody></table></figure><h3 id="使用标志"><a href="#使用标志" class="headerlink" title="使用标志"></a>使用标志</h3><p><strong>在要求很多条件都必须满足才能继续运行的程序中</strong>，可定义一个变量，用于判断整个程序是否处于活跃状态。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#标志</span></span><br><span class="line"><span class="number">1</span> prompt = <span class="string">"\nTell me something,and I will repeat it back to u:"</span></span><br><span class="line"><span class="number">2</span> prompt += <span class="string">"\nEnter 'quit' to end the program."</span></span><br><span class="line"><span class="number">3</span> </span><br><span class="line"><span class="number">4</span> active = <span class="literal">True</span></span><br><span class="line"><span class="number">5</span> <span class="keyword">while</span> active:</span><br><span class="line"><span class="number">6</span>     message = input(prompt)</span><br><span class="line"><span class="number">7</span>     <span class="keyword">if</span> message == <span class="string">'quit'</span>:</span><br><span class="line"><span class="number">8</span>         active = <span class="literal">False</span></span><br><span class="line"><span class="number">9</span>     <span class="keyword">else</span>:</span><br><span class="line"><span class="number">10</span>         print(message)</span><br></pre></td></tr></tbody></table></figure><p>简化了while语句，因为<strong>不需要在其中作任何比较</strong>。</p><h3 id="使用break跳出循环"><a href="#使用break跳出循环" class="headerlink" title="使用break跳出循环"></a>使用break跳出循环</h3><p>使用break立即跳出while循环。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> prompt = <span class="string">"\nTell me something,and I will repeat it back to u:"</span></span><br><span class="line"><span class="number">2</span> prompt += <span class="string">"\nEnter 'quit' to end the program."</span></span><br><span class="line"><span class="number">3</span> </span><br><span class="line"><span class="number">4</span> <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line"><span class="number">5</span>     city = input(prompt)</span><br><span class="line"><span class="number">6</span>     </span><br><span class="line"><span class="number">7</span>     <span class="keyword">if</span> city == <span class="string">"quit"</span>:</span><br><span class="line"><span class="number">8</span>         <span class="keyword">break</span></span><br><span class="line"><span class="number">9</span>     <span class="keyword">else</span>:</span><br><span class="line"><span class="number">10</span>        print(<span class="string">"I'd love to go to"</span> + city.title() + <span class="string">"!"</span>)</span><br></pre></td></tr></tbody></table></figure><h3 id="在循环中使用continue"><a href="#在循环中使用continue" class="headerlink" title="在循环中使用continue"></a>在循环中使用continue</h3><p>返回到循环开头。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#打印奇数</span></span><br><span class="line"><span class="number">1</span> current_number = <span class="number">0</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">while</span> current_number &lt;<span class="number">10</span>:</span><br><span class="line"><span class="number">3</span>     current_number += <span class="number">1</span></span><br><span class="line"><span class="number">4</span>     <span class="keyword">if</span> current_number %<span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line"><span class="number">5</span>         <span class="keyword">continue</span></span><br><span class="line"><span class="number">6</span>     print(current_number)</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">9</span></span><br></pre></td></tr></tbody></table></figure><h2 id="用while循环来处理列表和字典"><a href="#用while循环来处理列表和字典" class="headerlink" title="用while循环来处理列表和字典"></a>用while循环来处理列表和字典</h2><p><strong>通过将while循环同列表和字典结合起来使用，可收集、存储并组织大量输入</strong>，供以后查看和显示。</p><h3 id="在列表之间移动元素"><a href="#在列表之间移动元素" class="headerlink" title="在列表之间移动元素"></a>在列表之间移动元素</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> unconfirmed_users = [<span class="string">'alice'</span>,<span class="string">'brian'</span>,<span class="string">'cadace'</span>]     <span class="comment">#未验证用户</span></span><br><span class="line"><span class="number">2</span> confirmed_users = [] <span class="comment">#已验证用户</span></span><br><span class="line"><span class="number">3</span> </span><br><span class="line"><span class="number">4</span> <span class="keyword">while</span> unconfirmed_users:</span><br><span class="line"><span class="number">5</span>     current_user = unconfirmed_users.pop()         <span class="comment">#删除未验证用户</span></span><br><span class="line"><span class="number">6</span>     print(<span class="string">"Verifying user:"</span> + current_user.title())</span><br><span class="line"><span class="number">7</span>     confirmed_users.append(current_user) <span class="comment">#添加到已验证用户</span></span><br><span class="line"><span class="number">8</span>     </span><br><span class="line"><span class="number">9</span> print(<span class="string">"\nThe following users have been confirmed:"</span>)</span><br><span class="line"><span class="number">10</span><span class="keyword">for</span> confirmed_user <span class="keyword">in</span> confirmed_users:</span><br><span class="line"><span class="number">11</span>    print(confirmed_user.title())</span><br><span class="line"></span><br><span class="line">Verifying user:Cadace</span><br><span class="line">Verifying user:Brian</span><br><span class="line">Verifying user:Alice</span><br><span class="line"></span><br><span class="line">The following users have been confirmed:</span><br><span class="line">Cadace</span><br><span class="line">Brian</span><br><span class="line">Alice</span><br></pre></td></tr></tbody></table></figure><h3 id="删除包含特定值的所有列表元素"><a href="#删除包含特定值的所有列表元素" class="headerlink" title="删除包含特定值的所有列表元素"></a>删除包含特定值的所有列表元素</h3><p>函数remove()只删除一个特定元素，想要删除所有，使用while。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> pets = [<span class="string">'dog'</span>,<span class="string">'cat'</span>,<span class="string">'dog'</span>,<span class="string">'goldfish'</span>,<span class="string">'cat'</span>,<span class="string">'rabbit'</span>,<span class="string">'cat'</span>]</span><br><span class="line"><span class="number">2</span> print(pets)</span><br><span class="line"><span class="number">3</span> </span><br><span class="line"><span class="number">4</span> <span class="keyword">while</span> <span class="string">'cat'</span> <span class="keyword">in</span> pets:         <span class="comment">#使用while找到元素，再remove()一个。</span></span><br><span class="line"><span class="number">5</span>     pets.remove(<span class="string">'cat'</span>)</span><br><span class="line"><span class="number">6</span> </span><br><span class="line"><span class="number">7</span> print(pets)</span><br><span class="line"></span><br><span class="line">[<span class="string">'dog'</span>, <span class="string">'cat'</span>, <span class="string">'dog'</span>, <span class="string">'goldfish'</span>, <span class="string">'cat'</span>, <span class="string">'rabbit'</span>, <span class="string">'cat'</span>]</span><br><span class="line">[<span class="string">'dog'</span>, <span class="string">'dog'</span>, <span class="string">'goldfish'</span>, <span class="string">'rabbit'</span>]</span><br></pre></td></tr></tbody></table></figure><h3 id="使用用户输入来填充字典"><a href="#使用用户输入来填充字典" class="headerlink" title="使用用户输入来填充字典"></a>使用用户输入来填充字典</h3><p>可使用while循环提示用户输入任意数量的信息。将收集的信息存储在一个字典中，将回答同被调查者联系起来。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> responses = {}       <span class="comment">#问卷字典</span></span><br><span class="line"><span class="number">2</span> polling_active = <span class="literal">True</span> <span class="comment">#标记</span></span><br><span class="line"><span class="number">3</span> </span><br><span class="line"><span class="number">4</span> <span class="keyword">while</span> polling_active:</span><br><span class="line"><span class="number">5</span>     name = input(<span class="string">"\nWhat's your name?"</span>)</span><br><span class="line"><span class="number">6</span>     response = input(<span class="string">"Which mountain would you like to climb someday?"</span>)</span><br><span class="line"><span class="number">7</span>     </span><br><span class="line"><span class="number">8</span>     responses[name] = response    <span class="comment">#将信息存储在字典中</span></span><br><span class="line"><span class="number">9</span>     </span><br><span class="line"><span class="number">10</span>    repeat = input(<span class="string">"Would u like to let another person respond?(yes/no)"</span>)</span><br><span class="line"><span class="number">11</span>    <span class="keyword">if</span> repeat == <span class="string">'no'</span>:</span><br><span class="line"><span class="number">12</span>        polling_active = <span class="literal">False</span></span><br><span class="line"><span class="number">13</span></span><br><span class="line"><span class="number">14</span> print(<span class="string">"\n------Polling Results-------"</span>)</span><br><span class="line"><span class="number">15</span> <span class="keyword">for</span> name,response <span class="keyword">in</span> responses.items():</span><br><span class="line"><span class="number">16</span>    print(name + <span class="string">"would like to climb "</span> + response)</span><br><span class="line"></span><br><span class="line">What<span class="string">'s your name?grace</span></span><br><span class="line"><span class="string">Which mountain would you like to climb someday?huangshan</span></span><br><span class="line"><span class="string">Would u like to let another person respond?(yes/no)y</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">What's your name?benedict</span><br><span class="line">Which mountain would you like to climb someday?huangshan</span><br><span class="line">Would u like to let another person respond?(yes/no)no</span><br><span class="line"></span><br><span class="line">------Polling Results-------</span><br><span class="line">gracewould like to climb huangshan</span><br><span class="line">benedictwould like to climb huangshan</span><br></pre></td></tr></tbody></table></figure><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><p>每个函数都应只负责一项具体的工作，这有助于将复杂的任务划分成一系列的步骤。</p><h2 id="定义函数"><a href="#定义函数" class="headerlink" title="定义函数"></a>定义函数</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="function"><span class="keyword">def</span> <span class="title">greet_user</span><span class="params">(username)</span>:</span>     <span class="comment">#函数定义</span></span><br><span class="line"><span class="number">2</span>     print(<span class="string">"Hello，"</span> + username + <span class="string">"！"</span>)</span><br><span class="line"><span class="number">3</span> greet_user(<span class="string">"Grace"</span>)</span><br><span class="line">Hello,Grace!</span><br></pre></td></tr></tbody></table></figure><h2 id="传递实参"><a href="#传递实参" class="headerlink" title="传递实参"></a>传递实参</h2><h3 id="位置实参"><a href="#位置实参" class="headerlink" title="位置实参"></a>位置实参</h3><p>位置实参的顺序很重要，每个实参都必须关联到函数定义的一个形参。</p><h3 id="关键字实参"><a href="#关键字实参" class="headerlink" title="关键字实参"></a>关键字实参</h3><p>关键字实参是传递给函数的名称-值对。直接在实参中将名称和值关联起来了。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="function"><span class="keyword">def</span> <span class="title">describe_pet</span><span class="params">(animal_type,pet_name)</span>:</span></span><br><span class="line"><span class="number">2</span>     print(<span class="string">"My pet is "</span> + animal_type + <span class="string">" It's name is "</span> + pet_name)</span><br><span class="line"><span class="number">3</span> </span><br><span class="line"><span class="number">4</span> describe_pet(pet_name = <span class="string">'harry'</span>,animal_type = <span class="string">'hamster'</span>)</span><br><span class="line">My pet <span class="keyword">is</span> hamster It<span class="string">'s name is harry</span></span><br></pre></td></tr></tbody></table></figure><h3 id="默认值"><a href="#默认值" class="headerlink" title="默认值"></a>默认值</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="function"><span class="keyword">def</span> <span class="title">describe_pet</span><span class="params">(animal_type,pet_name = <span class="string">'harry'</span>)</span>:</span></span><br><span class="line"><span class="number">2</span>   print(<span class="string">"My pet is "</span> + animal_type + <span class="string">" It's name is "</span> + pet_name)</span><br><span class="line"><span class="number">3</span> </span><br><span class="line"><span class="number">4</span> describe_pet(animal_type = <span class="string">'hamster'</span>)</span><br><span class="line">My pet <span class="keyword">is</span> hamster It<span class="string">'s name is harry</span></span><br></pre></td></tr></tbody></table></figure><p>需要注意的是，如果实参中只提供了一个参数，Python依然将这个实参视为位置实参，即将把这个实参关联到函数中的第一个形参中。所以，下面的写法会导致错误。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="function"><span class="keyword">def</span> <span class="title">describe_pet</span><span class="params">(animal_type = <span class="string">'khah'</span>,pet_name)</span>:</span></span><br><span class="line"><span class="number">2</span>     print(<span class="string">"My pet is "</span> + animal_type + <span class="string">" It's name is "</span> + pet_name)</span><br><span class="line"><span class="number">3</span>  </span><br><span class="line"><span class="number">4</span> describe_pet(pet_name = <span class="string">'hamster'</span>)</span><br><span class="line"></span><br><span class="line">File <span class="string">"&lt;ipython-input-13-1f3b75aa0373&gt;"</span>, line <span class="number">1</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">describe_pet</span><span class="params">(animal_type = <span class="string">'khah'</span>,pet_name)</span>:</span></span><br><span class="line">                    ^</span><br><span class="line">SyntaxError: non-default argument follows default argument</span><br></pre></td></tr></tbody></table></figure><p><strong>使用默认值时，在形参列表中必须先列出没有默认值的形参，再列出有默认值的形参。让python能够正确的解读出位置实参。</strong></p><h2 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="function"><span class="keyword">def</span> <span class="title">get_formatted_name</span><span class="params">(first_name,last_name)</span>:</span></span><br><span class="line"><span class="number">2</span>     full_name = first_name + <span class="string">" "</span> + last_name</span><br><span class="line"><span class="number">3</span>     <span class="keyword">return</span> full_name.title()</span><br><span class="line"><span class="number">4</span> </span><br><span class="line"><span class="number">5</span> musician = get_formatted_name(<span class="string">"jimi"</span>,<span class="string">"hendrix"</span>)</span><br><span class="line"><span class="number">6</span> print(musician)</span><br><span class="line"></span><br><span class="line">Jimi Hendrix</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#检查名字，并输出</span></span><br><span class="line"><span class="number">1</span> <span class="function"><span class="keyword">def</span> <span class="title">get_full_name</span><span class="params">(first_name,last_name,middle_name = <span class="string">""</span>)</span>:</span></span><br><span class="line"><span class="number">2</span>     full_name = first_name + <span class="string">" "</span> + middle_name +<span class="string">" "</span>+ last_name</span><br><span class="line"><span class="number">3</span>     <span class="keyword">return</span> full_name.title()</span><br><span class="line"><span class="number">4</span> </span><br><span class="line"><span class="number">5</span> musician  = get_full_name(<span class="string">"jin"</span>,<span class="string">"hen"</span>)</span><br><span class="line"><span class="number">6</span> print(musician)</span><br><span class="line"><span class="number">7</span>     </span><br><span class="line"><span class="number">8</span> musician = get_full_name(<span class="string">"jin"</span>,<span class="string">"hen"</span>,<span class="string">"lee"</span>)</span><br><span class="line"><span class="number">9</span> print(musician)</span><br><span class="line"></span><br><span class="line">Jin  Hen</span><br><span class="line">Jin Lee Hen</span><br></pre></td></tr></tbody></table></figure><h3 id="返回字典"><a href="#返回字典" class="headerlink" title="返回字典"></a>返回字典</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="function"><span class="keyword">def</span> <span class="title">build_person</span><span class="params">(first_name,last_name,age = <span class="string">''</span>)</span>:</span></span><br><span class="line"><span class="number">2</span>     person = {<span class="string">"first"</span>:first_name,<span class="string">"last"</span>:last_name}</span><br><span class="line"><span class="number">3</span>  <span class="keyword">if</span> age:</span><br><span class="line"><span class="number">4</span>        person[<span class="string">'age'</span>] = age</span><br><span class="line"><span class="number">5</span>     <span class="keyword">return</span> person</span><br><span class="line"><span class="number">6</span> </span><br><span class="line"><span class="number">7</span> musician = build_person(<span class="string">"jimi"</span>,<span class="string">"hendix"</span>,age = <span class="number">27</span>)</span><br><span class="line"><span class="number">8</span> print(musician)</span><br><span class="line"></span><br><span class="line">{<span class="string">'first'</span>: <span class="string">'jimi'</span>, <span class="string">'last'</span>: <span class="string">'hendix'</span>,<span class="string">'age'</span>: <span class="number">27</span>}</span><br></pre></td></tr></tbody></table></figure><h2 id="传递列表"><a href="#传递列表" class="headerlink" title="传递列表"></a>传递列表</h2><p>假设有一个用户列表，我们要问候其中的每位用户。下面示例将一个名字列表传递给一个名为greet_users()的函数</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="function"><span class="keyword">def</span> <span class="title">greet_users</span><span class="params">(names)</span>:</span></span><br><span class="line"><span class="number">2</span>     <span class="keyword">for</span> name <span class="keyword">in</span> names:</span><br><span class="line"><span class="number">3</span>         msg = <span class="string">"Hello,"</span> + name.title() + <span class="string">"!"</span></span><br><span class="line"><span class="number">4</span>         print(msg)</span><br><span class="line"><span class="number">5</span> usernames = [<span class="string">'hannah'</span>,<span class="string">'ty'</span>,<span class="string">'margot'</span>]</span><br><span class="line"><span class="number">6</span> greet_users(usernames)</span><br><span class="line"></span><br><span class="line">Hello,Hannah!</span><br><span class="line">Hello,Ty!</span><br><span class="line">Hello,Margot!</span><br></pre></td></tr></tbody></table></figure><h3 id="禁止函数修改列表"><a href="#禁止函数修改列表" class="headerlink" title="禁止函数修改列表"></a>禁止函数修改列表</h3><p>可向函数传递列表的副本而不是原件，这样函数所做的任何修改都只影响副本，而丝毫不影响原件。</p><p><strong>切片表示法[:]创建列表的副本。</strong></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> function_name(list_name[:])</span><br></pre></td></tr></tbody></table></figure><p>以上的list调用方法将调用list_name的副本，保留原始的内容，除非有充分的理由需要传递副本，否则还是应该将原始列表传递给函数，因为副本将花费时间和内存，降低效率，在处理大型列表时尤其如此。</p><h2 id="传递任意数量的实参"><a href="#传递任意数量的实参" class="headerlink" title="传递任意数量的实参"></a>传递任意数量的实参</h2><p>有时候，你预先不知道函数需要接受多少个实参，好在Python允许函数从调用语句中收集任意数量的实参。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="function"><span class="keyword">def</span> <span class="title">make_pizza</span><span class="params">(*toppings)</span>:</span></span><br><span class="line"><span class="number">2</span>     print(toppings)</span><br><span class="line"><span class="number">3</span> </span><br><span class="line"><span class="number">4</span> make_pizza(<span class="string">'pepperoni'</span>)</span><br><span class="line"><span class="number">5</span> make_pizza(<span class="string">'mushrooms'</span>,<span class="string">'green peppers'</span>,<span class="string">'extra cheese'</span>)</span><br><span class="line"></span><br><span class="line">(<span class="string">'pepperoni'</span>,)</span><br><span class="line">(<span class="string">'mushrooms'</span>, <span class="string">'green peppers'</span>, <span class="string">'extra cheese'</span>)</span><br></pre></td></tr></tbody></table></figure><p>形参名toppings中的”<em>“让Python创建一个名为toppings的<strong>空元组</strong>，并将收到的所有值都封装到这个元组中。<em>*注意：Python将实参封装到一个元组中，即便函数只收到一个值也如此。</em></em></p><h3 id="结合使用位置实参和任意数量的实参"><a href="#结合使用位置实参和任意数量的实参" class="headerlink" title="结合使用位置实参和任意数量的实参"></a>结合使用位置实参和任意数量的实参</h3><p>Python先匹配位置实参和关键字实参，再<strong>将余下的实参都收集到最后一个形参中</strong>。</p><p>如前面的函数还需要一个size的实参，必须将该形参放在形参*toppings的前面。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="function"><span class="keyword">def</span> <span class="title">make_pizza</span><span class="params">(size,*toppings)</span>:</span></span><br><span class="line"><span class="number">2</span>     print(<span class="string">"Making a"</span> + str(size) + </span><br><span class="line"><span class="number">3</span>             <span class="string">"-inch pizza with the following toppings:"</span>)</span><br><span class="line"><span class="number">4</span>  <span class="keyword">for</span> topping <span class="keyword">in</span> toppings:</span><br><span class="line"><span class="number">5</span>      print(<span class="string">"-"</span> + topping)</span><br><span class="line"><span class="number">6</span> </span><br><span class="line"><span class="number">7</span> make_pizza(<span class="string">'pepperoni'</span>)</span><br><span class="line"><span class="number">8</span> make_pizza(<span class="string">'mushrooms'</span>,<span class="string">'green peppers'</span>,<span class="string">'extra cheese'</span>)</span><br><span class="line"></span><br><span class="line">Making a16-inch pizza <span class="keyword">with</span> the following toppings:</span><br><span class="line">-pepperoni</span><br><span class="line">Making a12-inch pizza <span class="keyword">with</span> the following toppings:</span><br><span class="line">-mushrooms</span><br><span class="line">-green peppers</span><br><span class="line">-extra cheese</span><br></pre></td></tr></tbody></table></figure><h3 id="使用任意数量的关键字实参"><a href="#使用任意数量的关键字实参" class="headerlink" title="使用任意数量的关键字实参"></a>使用任意数量的关键字实参</h3><p>预先不知道传递给函数的会是什么样的信息。可将函数编写成能够接受任意数量的“键-值”对————调用语句提供多少就接受多少。（<strong>匹配成字典</strong>）</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">build_profile</span><span class="params">(first,last,**user_info)</span>:</span></span><br><span class="line">    profile = {}</span><br><span class="line">    profile[<span class="string">'first_name'</span>] = first</span><br><span class="line">    profile[<span class="string">'last_name'</span>] = last</span><br><span class="line">    <span class="keyword">for</span> key,value <span class="keyword">in</span> user_info.items():</span><br><span class="line">        profile[key] = value</span><br><span class="line">    <span class="keyword">return</span> profile</span><br><span class="line"></span><br><span class="line">  <span class="comment">#传递两个键值对，location='princeton',filed='physics'</span></span><br><span class="line">user_profile = build_profile(<span class="string">'albert'</span>,<span class="string">'einstein'</span>,location=<span class="string">'princeton'</span>,filed=<span class="string">'physics'</span>)</span><br><span class="line">print(user_profile)</span><br><span class="line"></span><br><span class="line">{<span class="string">'first_name'</span>: <span class="string">'albert'</span>, <span class="string">'last_name'</span>: <span class="string">'einstein'</span>, <span class="string">'location'</span>: <span class="string">'princeton'</span>, <span class="string">'filed'</span>: <span class="string">'physics'</span>}</span><br></pre></td></tr></tbody></table></figure><h2 id="将函数存储在模块中"><a href="#将函数存储在模块中" class="headerlink" title="将函数存储在模块中"></a>将函数存储在模块中</h2><p>将函数存储在被称为<strong>模块</strong>的<em>独立文件</em>中，再将模块导入到主程序中，<strong>import</strong>语句允许在当前运行的程序文件中使用模块中的代码。</p><h3 id="导入整个模块"><a href="#导入整个模块" class="headerlink" title="导入整个模块"></a>导入整个模块</h3><p>要让函数是可导入的，得先创建模块。模块是扩展名为<em>.py</em>的文件，包含要导入到程序中的代码。</p><p>首先创建pizza.py文件，然后在pizza.py所在的目录中创建另一个名为making_pizza.py的文件，这个文件导入刚创建的模块，调用里面的函数两次。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pizza</span><br><span class="line"></span><br><span class="line">pizza.make_pizza(<span class="number">16</span>,<span class="string">'pepperoni'</span>)</span><br><span class="line">pizza.make_pizza(<span class="number">12</span>,<span class="string">'mushrooms'</span>,<span class="string">'green peppers'</span>,<span class="string">'extra cheese'</span>)</span><br></pre></td></tr></tbody></table></figure><p>Python读取这个文件时，<strong>代码行import pizza让Python打开文件pizza.py，并将其中的所有函数都复制到这个程序中。</strong></p><h3 id="导入特定的函数"><a href="#导入特定的函数" class="headerlink" title="导入特定的函数"></a>导入特定的函数</h3><p>导入模块中特定的函数。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> module_name <span class="keyword">import</span> function_name1,function_name2</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pizza <span class="keyword">import</span> make_pizza</span><br><span class="line"></span><br><span class="line">make_pizza(<span class="number">16</span>,<span class="string">'pepperoni'</span>)</span><br><span class="line">make_pizza(<span class="number">12</span>,<span class="string">'mushrooms'</span>,<span class="string">'green peppers'</span>,<span class="string">'extra cheese'</span>)</span><br></pre></td></tr></tbody></table></figure><p>由于在import中显式的使用了函数名，因此调用它无需只需指定其名称。</p><h3 id="使用as给函数指定别名"><a href="#使用as给函数指定别名" class="headerlink" title="使用as给函数指定别名"></a>使用as给函数指定别名</h3><p><strong>如果要导入的函数名称可能与程序中现有的名称冲突，或者函数名称太长，可指定别名。</strong>关键字<strong>as</strong>将函数重命名为你提供的别名。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pizza <span class="keyword">import</span> make_pizza <span class="keyword">as</span> mp</span><br><span class="line"></span><br><span class="line">mp(<span class="number">16</span>,<span class="string">'pepperoni'</span>)</span><br><span class="line">mp(<span class="number">12</span>,<span class="string">'mushrooms'</span>,<span class="string">'green peppers'</span>,<span class="string">'extra cheese'</span>)</span><br></pre></td></tr></tbody></table></figure><h3 id="使用as给模块指定别名"><a href="#使用as给模块指定别名" class="headerlink" title="使用as给模块指定别名"></a>使用as给模块指定别名</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pizza <span class="keyword">as</span> p</span><br><span class="line"></span><br><span class="line">p.make_pizza(<span class="number">16</span>,<span class="string">'pepperoni'</span>)</span><br><span class="line">p.make_pizza(<span class="number">12</span>,<span class="string">'mushrooms'</span>,<span class="string">'green peppers'</span>,<span class="string">'extra cheese'</span>)</span><br></pre></td></tr></tbody></table></figure><h3 id="导入模块中的所有函数"><a href="#导入模块中的所有函数" class="headerlink" title="导入模块中的所有函数"></a>导入模块中的所有函数</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pizza <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">make_pizza(<span class="number">16</span>,<span class="string">'pepperoni'</span>)</span><br></pre></td></tr></tbody></table></figure><p>但是这种方法不推荐。最佳做法，要么只导入你需要的函数，要么导入整个模块并使用句点表示法。这能让代码更清晰。</p><h2 id="函数编写指南"><a href="#函数编写指南" class="headerlink" title="函数编写指南"></a>函数编写指南</h2><ol><li>函数起名描述性名称，且只使用小写字母和下划线。</li><li>注释应紧跟在函数定义后面。</li><li>给形参指定默认值时，等号两边不要有空格。</li><li>函数调用中的关键字实参，也不要有空格。</li></ol><h1 id="类"><a href="#类" class="headerlink" title="类"></a>类</h1><p>在<strong>面向对象编程</strong>中，你编写表示现实世界中的事物和情景的类，并基于这些类来创建对象。基于类创建对象时，每个对象都自动具备这种通用的行为，然后可根据需要赋予每个对象独特的个性。根据类来创建对象被称为实例化。</p><h2 id="创建和使用类"><a href="#创建和使用类" class="headerlink" title="创建和使用类"></a>创建和使用类</h2><h3 id="创建Dog类"><a href="#创建Dog类" class="headerlink" title="创建Dog类"></a>创建Dog类</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""一次模拟小狗的简单尝试"""</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name,age)</span>:</span> </span><br><span class="line">      <span class="string">"""特殊的方法，初始化,两个下划线"""</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sit</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(self.name.title() + <span class="string">"is now sitting."</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">roll_over</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(self.name.title() + <span class="string">"rolled over!"</span>)</span><br></pre></td></tr></tbody></table></figure><ol><li>定义了一个名为Dog的类。<strong>在Python中，首字母大写的名称指的是类。</strong></li><li>方法 <em>init</em>()，类中的函数称为方法。<strong>init方法是一个特殊的方法，每当根据Dog类创建对象新实例时，Python都会自动执行它。</strong>这个方法中，开头和末尾有两个下划线，这是约定。</li><li><strong>注意！！！方法init 是以两个下划线开始和结束的。</strong></li><li><strong>形参self必不可少，</strong>还必须位于其他形参的前面。Python调用这个init方法来创建Dog实例时，将自动传入实参self。每个与类相关联的方法调用都自动传递实参self，<strong>它是一个指向实例本身的引用，让实例能够访问类中的属性和方法。</strong>我们创建Dog类实例时，Python将调用Dog类的方法init()。我们通过实参传递名字和方法，self会自动传递，因此我们不需要给self提供值。</li><li>通过类的构造函数中的参数传入的这些数据也想在各个方法中被使用，就需要在类中长久保存并能随时调用这些数据，为解决这个问题，<strong>在类中，所有传入的数据都赋给了一个变量，就是self。</strong>它接收实例化过程中传入的所有数据。</li><li><strong>以self为前缀的变量都可供类中的所有方法使用。</strong>self.name = name获取存储在形参name中的值，并将其存储到变量name中，然后该变量被关联到当前创建的实例。想这样可以通过实例访问的变量称为<strong>属性</strong>。</li><li>sit和roll_over方法。<strong>由于这些方法不需要额外的信息，如名字或年龄，因此它们只有一个形参self。</strong></li></ol><h3 id="根据类创建实例，访问类"><a href="#根据类创建实例，访问类" class="headerlink" title="根据类创建实例，访问类"></a>根据类创建实例，访问类</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">my_dog = Dog(<span class="string">"willie"</span>,<span class="number">6</span>)</span><br><span class="line"><span class="string">"""在类中这两个参数被传给了self参数"""</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">"My Dog's name is "</span> + my_dog.name.title() + <span class="string">"."</span>)</span><br><span class="line"><span class="string">"""访问类属性"""</span></span><br><span class="line"></span><br><span class="line">my_dog.sit()</span><br><span class="line"><span class="string">"""访问类方法"""</span></span><br></pre></td></tr></tbody></table></figure><p><strong>在类中访问name属性时，使用self.name；在类外使用my_dog.name。</strong></p><h3 id="修改属性的值"><a href="#修改属性的值" class="headerlink" title="修改属性的值"></a>修改属性的值</h3><p>1.直接在类外修改属性的值</p><p>2.通过方法修改属性的值</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span><span class="params">()</span>:</span></span><br><span class="line">  --snip--</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">update_name</span><span class="params">(self,new_name)</span>:</span></span><br><span class="line">    <span class="string">"""更新姓名"""</span></span><br><span class="line">    self.name = new_name</span><br><span class="line">    </span><br><span class="line">my_dog = Dog(<span class="string">"willie"</span>,<span class="number">6</span>)</span><br><span class="line">my_dog.update_name(<span class="string">"hahaha"</span>)</span><br></pre></td></tr></tbody></table></figure><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>一个类继承另一个类时，它将自动获得另一个类的所有属性和方法。同时还可以定义自己的属性和方法。</p><h3 id="子类的方法-init"><a href="#子类的方法-init" class="headerlink" title="子类的方法__init__()"></a>子类的方法<strong>__</strong>init__()</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""汽车"""</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,make,model,year)</span>:</span></span><br><span class="line">        self.make = make</span><br><span class="line">        self.model = model</span><br><span class="line">        self.year = year</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_descriptive_name</span><span class="params">(self)</span>:</span></span><br><span class="line">        long_name = str(self.year) + <span class="string">' '</span> + self.make + <span class="string">' '</span> + self.model</span><br><span class="line">        <span class="keyword">return</span> long_name.title()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ElectricCar</span><span class="params">(Car)</span>:</span></span><br><span class="line">    <span class="string">"""电动汽车,集成父类Car"""</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,make,model,year)</span>:</span></span><br><span class="line">        <span class="string">"""初始化父类的属性"""</span></span><br><span class="line">        super().__init__(make,model,year)</span><br><span class="line">        </span><br><span class="line">        <span class="string">"""子类特有的属性"""</span></span><br><span class="line">        self.battery_size = <span class="number">70</span></span><br><span class="line"></span><br><span class="line">     <span class="function"><span class="keyword">def</span> <span class="title">describe_battery</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"this car has a"</span> + str(self.battery_size) + <span class="string">"-kWh battery"</span>)</span><br><span class="line"></span><br><span class="line">my_tesla = ElectricCar(<span class="string">'tesla'</span>,<span class="string">'model s'</span>,<span class="number">2016</span>)</span><br><span class="line"><span class="string">"""调用父类的方法"""</span></span><br><span class="line">print(my_tesla.get_descriptive_name())</span><br><span class="line">my_tesla.describe_battery()</span><br><span class="line"></span><br><span class="line"><span class="number">2016</span> Tesla Model S</span><br><span class="line">this car has a <span class="number">70</span>-kWh battery</span><br></pre></td></tr></tbody></table></figure><p><strong>创建子类时，父类必须包含在当前文件中，且位于子类的前面。（在子类模块中，必须导入父类来实现继承。）</strong>定义子类时，必须在括号内指定父类的名称。super()调用父类方法<strong>init</strong>()。可以在子类中创建新的属性和方法。</p><h3 id="重写父类的方法"><a href="#重写父类的方法" class="headerlink" title="重写父类的方法"></a>重写父类的方法</h3><p>在子类中定义一个与父类方法同名的方法。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ElectricCar</span><span class="params">(Car)</span>:</span></span><br><span class="line">  --snip--</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">fill</span>-<span class="title">gas_tank</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""重写父类方法，直接覆盖"""</span></span><br></pre></td></tr></tbody></table></figure><h3 id="类的实例作为另个类的属性"><a href="#类的实例作为另个类的属性" class="headerlink" title="类的实例作为另个类的属性"></a>类的实例作为另个类的属性</h3><p>如上例中，将电瓶划分出来作为一个新类，作为电瓶车类的一个属性。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span><span class="params">()</span>:</span></span><br><span class="line">  --snip--</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Battery</span><span class="params">()</span>:</span></span><br><span class="line">  <span class="string">"""电瓶"""</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,battery_size=<span class="number">70</span>)</span>:</span></span><br><span class="line">    self.battery_size = battery_size</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">battery</span>.<span class="title">describe_battery</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"haha"</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Electricity</span><span class="params">(Car)</span>:</span></span><br><span class="line">  --snip--</span><br><span class="line">  <span class="string">"""类Battery作为属性出现在init()中"""</span></span><br><span class="line">  self.battery = Battery()</span><br><span class="line">  </span><br><span class="line">my_tesla = ElectricCar(<span class="string">'tesla'</span>,<span class="string">'model'</span>s<span class="string">',2016)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"""引用 属性（类）的方法"""</span></span><br><span class="line"><span class="string">my_tesla.battery.describe_battery()</span></span><br></pre></td></tr></tbody></table></figure><h2 id="导入类"><a href="#导入类" class="headerlink" title="导入类"></a>导入类</h2><p>将类存储在模块中，然后在主程序中导入所需的模块。</p><h3 id="导入单个类"><a href="#导入单个类" class="headerlink" title="导入单个类"></a>导入单个类</h3><p>创建Car类，并保存为car.py。创建另一个文件my_car.py，其中导入Car类并创建其实例。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""my_car.py"""</span></span><br><span class="line"><span class="keyword">from</span> car <span class="keyword">import</span> Car</span><br><span class="line"></span><br><span class="line">my_new_car = Car(<span class="string">'audi'</span>,<span class="string">'a4'</span>,<span class="number">2016</span>)</span><br><span class="line">my_new_car.get_descriptive_name()</span><br></pre></td></tr></tbody></table></figure><h3 id="在一个模块中存储多个类"><a href="#在一个模块中存储多个类" class="headerlink" title="在一个模块中存储多个类"></a>在一个模块中存储多个类</h3><p>也可以将多个类存储在同一个模块中，导入方法和上节相同。</p><h3 id="从一个模块中导入多个类"><a href="#从一个模块中导入多个类" class="headerlink" title="从一个模块中导入多个类"></a>从一个模块中导入多个类</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> car <span class="keyword">import</span> Car,ElectricCar</span><br></pre></td></tr></tbody></table></figure><h3 id="导入整个模块-1"><a href="#导入整个模块-1" class="headerlink" title="导入整个模块"></a>导入整个模块</h3><p>你可以导入整个模块，再使用句点表示法访问需要的类。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> car</span><br><span class="line"></span><br><span class="line"><span class="string">"""句点表示法"""</span></span><br><span class="line">my_tesla = car.ElectricCar(<span class="string">'tesla'</span>,<span class="string">'model'</span>s<span class="string">',2016)</span></span><br></pre></td></tr></tbody></table></figure><h3 id="8-3-5-导入模块中所有的类"><a href="#8-3-5-导入模块中所有的类" class="headerlink" title="8.3.5 导入模块中所有的类"></a>8.3.5 导入模块中所有的类</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> car <span class="keyword">import</span> *</span><br></pre></td></tr></tbody></table></figure><p>但是不推荐这种方法，需要从一个模块中导入很多类时，最好导入整个模块，并使用<em>module.class_name</em>语法来访问类。这样做你可以清楚的知道程序中使用了哪些导入的类。还避免了导入模块中的每个类可能引发的名称冲突。</p><h2 id="编码规则"><a href="#编码规则" class="headerlink" title="编码规则"></a>编码规则</h2><ol><li>类名采用驼峰命名法，类中每个单词首字母大写，而不适用下划线。</li></ol><p>​       实例名和模块名采用小写格式，在单词间加上下划线。</p><ol><li>在类后加上文档字符串作为说明。模块也是，在开头。</li></ol><ol><li>import先导入标准库中的。再导入你自己写的。两者用一个空行隔开。</li></ol><h1 id="文件和异常"><a href="#文件和异常" class="headerlink" title="文件和异常"></a>文件和异常</h1><h2 id="从文件中读取数据"><a href="#从文件中读取数据" class="headerlink" title="从文件中读取数据"></a>从文件中读取数据</h2><h3 id="读取整个文件"><a href="#读取整个文件" class="headerlink" title="读取整个文件"></a>读取整个文件</h3><p>打开并读取文件，并将内容显示到屏幕上。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'pi_digits.txt'</span>) <span class="keyword">as</span> file_object:</span><br><span class="line">    contents = file_object.read()</span><br><span class="line">    print(contents)</span><br></pre></td></tr></tbody></table></figure><p>1.<strong>函数open()返回一个表示文件的对象</strong>。在这里open(‘pi_digits.txt’)返回一个表示文件pi_digits.txt的对象，Python将这个对象存储在我们将在后面使用的变量中。</p><p>2.<strong>关键字with在不再需要访问文件后将其关闭。</strong>注意我们使用了open(),但没有使用close(),你也可以用open和close来打开和关闭文件，但这样做时，如果程序存在bug，导致close未执行，文件将不会关闭，未妥善的关闭文件可能导致数据丢失或受损。并非在任何情况下都能轻松的确定关闭文件的恰当时机，但通过使用前面使用的结构，可让python 去确定：你只管打开文件，并在需要时使用它，<strong>Python自会在合适的时候自动将其关闭</strong>。</p><p>3.有了表示pi_digits.txt的文件对象后，我们使用方法read()，读取文件文件的全部内容。</p><p>4.read()到达文件末尾时返回一个空字符串，而将这个空字符串显示出来时就是一个空行。要删除末尾的空行，可在print中使用rstrip()</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(contents.rstrip())</span><br></pre></td></tr></tbody></table></figure><h3 id="逐行读取"><a href="#逐行读取" class="headerlink" title="逐行读取"></a>逐行读取</h3><p>要以每次一行的方式检查文件，可对文件对象使用for循环。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">filename = <span class="string">'pi_digits.txt'</span></span><br><span class="line"><span class="keyword">with</span> open(filename) <span class="keyword">as</span> file_object:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> file_object:</span><br><span class="line">        print(line.rstrip())</span><br></pre></td></tr></tbody></table></figure><h3 id="文件路径"><a href="#文件路径" class="headerlink" title="文件路径"></a>文件路径</h3><p>相对文件路径：相对当前的工作目录。</p><p>在LInux和OS X中：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'text_files/filename.txt'</span>) <span class="keyword">as</span> file_object:</span><br></pre></td></tr></tbody></table></figure><p>在Windows中：使用反斜杠</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'text_files\filename.txt'</span>) <span class="keyword">as</span> file_object:</span><br></pre></td></tr></tbody></table></figure><p>绝对文件路径：无需关心，给出完整目录。</p><p>在LInux和OS X中：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">file_path = <span class="string">'/home/ehmatthes/other_files/text_files/filename.txt'</span></span><br><span class="line"><span class="keyword">with</span> open(file_path) <span class="keyword">as</span> file_object:</span><br></pre></td></tr></tbody></table></figure><p>在Windows中：使用反斜杠</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">file_path = <span class="string">'C:\Users\ehmatthes\other_files\text_files\filename.txt'</span></span><br><span class="line"><span class="keyword">with</span> open(file_path) <span class="keyword">as</span> file_object:</span><br></pre></td></tr></tbody></table></figure><h3 id="建包含文件各行内容的列表"><a href="#建包含文件各行内容的列表" class="headerlink" title="建包含文件各行内容的列表"></a>建包含文件各行内容的列表</h3><p>使用关键字with时，open()返回的文件对象只在with代码块内可用。如果要在with代码块外访问文件的内容，可在with代码块内将文件的各行存储在一个列表中，并在with代码块外使用该列表。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">filename = <span class="string">'pi_digits.txt'</span></span><br><span class="line"><span class="keyword">with</span> open(filename) <span class="keyword">as</span> file_object:</span><br><span class="line">    lines = file_object.readlines()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">    print(line.rstrip())</span><br></pre></td></tr></tbody></table></figure><p><strong>readlines()从文件中读取每一行，并将其存储在一个列表中。</strong></p><p>如果要将文件作为一个字符串打印出来，可以使用下面的方法。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""以字符串形式打印文件的前499个字符"""</span></span><br><span class="line">filename = <span class="string">'pi_digits.txt'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(filename) <span class="keyword">as</span> file_object:</span><br><span class="line">    lines = file_object.readlines()</span><br><span class="line"></span><br><span class="line">pi_string = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">    pi_string += line.strip()</span><br><span class="line"></span><br><span class="line">print(pi_string[:<span class="number">500</span>] + <span class="string">"......"</span>)</span><br></pre></td></tr></tbody></table></figure><h3 id="字符串是否包含在文件中"><a href="#字符串是否包含在文件中" class="headerlink" title="字符串是否包含在文件中"></a>字符串是否包含在文件中</h3><p>先将文件整理成字符串，在上节代码最后添加：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">--snip--</span><br><span class="line">input_str = input(<span class="string">"Input your string that you want to check:"</span>)</span><br><span class="line"><span class="keyword">if</span> input_str <span class="keyword">in</span> pi_string:</span><br><span class="line"><span class="string">"""检查是否包含字符串"""</span></span><br><span class="line">  print(<span class="string">"Yes"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">  print(<span class="string">"No"</span>)</span><br></pre></td></tr></tbody></table></figure><h2 id="写入文件"><a href="#写入文件" class="headerlink" title="写入文件"></a>写入文件</h2><h3 id="写入空文件"><a href="#写入空文件" class="headerlink" title="写入空文件"></a>写入空文件</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">filename = <span class="string">'writef.txt'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(filename,<span class="string">'w'</span>) <span class="keyword">as</span> file_object:</span><br><span class="line">    file_object.write(<span class="string">"I love programming."</span>)</span><br></pre></td></tr></tbody></table></figure><p>注：1.<strong>open()</strong>提供了两个参数，第一个是要打开的文件名称，第二个是<strong>打开模式</strong>。</p><p>​    2.可以以<strong>只读模式”r“、写入模式“w”、附加模式“a”</strong>打开文件。或让你能够读取和写入文件的模式<strong>“r+”</strong>，如果你省略了模式参数，<strong>Python将默认为只读模式</strong>。</p><p>​    3.如果你要打开的文件不存在，函数open()将自动创建它。然而，以写入模式打开文件时千万要小心，因为如果<strong>指定的文件已经存在，Python将在返回文件对象前清空文件</strong>。</p><p>​    4.Python只能将字符串写入文本文件。要将<strong>数值存储，需使用str()转化为String</strong>。</p><h3 id="写入多行"><a href="#写入多行" class="headerlink" title="写入多行"></a>写入多行</h3><p>函数write()不会在你写入的文本末尾添加换行符。要写多行，使用换行符。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">file_object.write(<span class="string">"I love programming.\n"</span>)</span><br><span class="line">file_object.write(<span class="string">"I love programming very much.\n"</span>)</span><br></pre></td></tr></tbody></table></figure><h3 id="附加到文件"><a href="#附加到文件" class="headerlink" title="附加到文件"></a>附加到文件</h3><p>给文件添加内容，而不是覆盖。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(filename,<span class="string">'a'</span>) <span class="keyword">as</span> file_object:</span><br><span class="line">    file_object.write(<span class="string">"I love programming.\n"</span>)</span><br></pre></td></tr></tbody></table></figure><h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><p>每当发生让Python不知所措的错误时，它都会创建一个异常对象。如果你编写了处理该异常的代码，程序将继续运行，否则会停止，并显示一个traceback，其中包含异常的报告。</p><p>异常使用<strong>try-except</strong>代码块处理。</p><h3 id="ZeroDivisionError异常"><a href="#ZeroDivisionError异常" class="headerlink" title="ZeroDivisionError异常"></a>ZeroDivisionError异常</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    print(<span class="number">5</span>/<span class="number">0</span>)</span><br><span class="line"><span class="keyword">except</span> ZeroDivisionError:</span><br><span class="line">    print(<span class="string">"You can't divide by zero!"</span>)</span><br><span class="line"></span><br><span class="line">You can<span class="string">'t divide by zero!</span></span><br></pre></td></tr></tbody></table></figure><p>try代码块中的代码运行起来没有问题，Python将跳过except代码块；如果有问题，Python将会查找Except代码块</p><p><strong>依赖于try代码块成功执行的代码都应该放到else代码块中：</strong></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    answer = <span class="number">5</span>/<span class="number">3</span></span><br><span class="line"><span class="keyword">except</span> ZeroDivisionError:</span><br><span class="line">    print(<span class="string">"you can't divide 0!"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(answer)</span><br><span class="line"></span><br><span class="line"><span class="number">1.6666666666666667</span></span><br></pre></td></tr></tbody></table></figure><h3 id="FileNotFoundError异常"><a href="#FileNotFoundError异常" class="headerlink" title="FileNotFoundError异常"></a>FileNotFoundError异常</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">filename = <span class="string">'alice.txt'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">with</span> open(filename) <span class="keyword">as</span> f_obj:</span><br><span class="line">        contents = f_obj.read()</span><br><span class="line"><span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">    print(<span class="string">"your file is not exisit"</span>)</span><br><span class="line"></span><br><span class="line">your file <span class="keyword">is</span> <span class="keyword">not</span> exisit</span><br></pre></td></tr></tbody></table></figure><h3 id="分析文本split"><a href="#分析文本split" class="headerlink" title="分析文本split()"></a>分析文本split()</h3><p><strong>split()，根据一个字符串创建一个单词列表。</strong></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">title = <span class="string">"Alice in Wonderland"</span></span><br><span class="line">title.split()</span><br><span class="line"></span><br><span class="line">[<span class="string">'Alice'</span>, <span class="string">'in'</span>, <span class="string">'Wonderland'</span>]</span><br></pre></td></tr></tbody></table></figure><p>split()以空格为分隔符将字符串分拆成多个部分，并将这些部分都存储到一个列表中。</p><h3 id="失败时一声不吭"><a href="#失败时一声不吭" class="headerlink" title="失败时一声不吭"></a>失败时一声不吭</h3><p>如果你想让try代码块在发生异常后医生不吭，Python有一个pass语句，可在代码块中使用它来让Python“沉默”</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    answer = <span class="number">5</span>/<span class="number">0</span></span><br><span class="line"><span class="keyword">except</span> ZeroDivisionError:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(answer)</span><br></pre></td></tr></tbody></table></figure><h2 id="存储数据"><a href="#存储数据" class="headerlink" title="存储数据"></a>存储数据</h2><p>程序需要把用户提供的信息存储在列表和字典等数据结构中。用户关闭程序时，你几乎总是要保存他们提供的信息。一种简单的方式是<strong>使用模块json来存储数据</strong>。【 JSON(JavaScript Object Notation) 】</p><h3 id="使用json-dump-和json-load"><a href="#使用json-dump-和json-load" class="headerlink" title="使用json.dump()和json.load()"></a>使用json.dump()和json.load()</h3><p>函数json.dump()接受两个实参：1.要存储的数据 2.可用于存储数据的文件对象。下面展示用其存储数字列表。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""使用json.dump()写入数据"""</span></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">numbers = [<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">11</span>,<span class="number">13</span>]</span><br><span class="line"></span><br><span class="line">filename = <span class="string">'number.json'</span></span><br><span class="line"><span class="keyword">with</span> open(filename,<span class="string">'w'</span>) <span class="keyword">as</span> f_obj:</span><br><span class="line">    json.dump(numbers,f_obj)</span><br></pre></td></tr></tbody></table></figure><p>json.load()参数与上面一样。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""使用json.load()读取数据"""</span></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">filename = <span class="string">'number.json'</span></span><br><span class="line"><span class="keyword">with</span> open(filename) <span class="keyword">as</span> f_obj:</span><br><span class="line">    numbers = json.load(f_obj)</span><br><span class="line"></span><br><span class="line">print(numbers)</span><br><span class="line"></span><br><span class="line">[<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">13</span>]</span><br></pre></td></tr></tbody></table></figure><h3 id="为什么使用json"><a href="#为什么使用json" class="headerlink" title="为什么使用json"></a>为什么使用json</h3><p>对于用户生成的数据，使用json保存它们大有裨益，因为如果不以某种方式进行存储，等程序停止运行时用户的信息将丢失。下面看个例子，<strong>用户首次运行被提示输入自己的名字，这样再次运行程序就记住他了</strong>。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""存储用户的名字"""</span></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">username = input(<span class="string">"what's your name?"</span>)</span><br><span class="line"></span><br><span class="line">filename = <span class="string">'username.json'</span></span><br><span class="line"><span class="keyword">with</span> open(filename,<span class="string">'w'</span>) <span class="keyword">as</span> f_obj:</span><br><span class="line">    json.dump(username,f_obj)</span><br><span class="line">    print(<span class="string">"we'll remember you when you come back,"</span> + username + <span class="string">"!"</span>)</span><br><span class="line">    </span><br><span class="line">what<span class="string">'s your name?GraceKoo</span></span><br><span class="line"><span class="string">we'</span>ll remember you when you come back,GraceKoo!</span><br></pre></td></tr></tbody></table></figure><p>再来编写一个程序，向其名字被存储的用户发出问候。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">filename = <span class="string">'username.json'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(filename) <span class="keyword">as</span> f_obj:</span><br><span class="line">    username = json.load(f_obj)</span><br><span class="line">    print(<span class="string">"welcome back,"</span> + username +<span class="string">"!"</span>)</span><br><span class="line">   </span><br><span class="line">welcome back,GraceKoo!</span><br></pre></td></tr></tbody></table></figure><p>将以上两个程序进行合并：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="comment">#如果以前存储了用户名，就加载它，否则，就提示用户输入用户名并存储它</span></span><br><span class="line">filename = <span class="string">'username.json'</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">with</span> open(filename) <span class="keyword">as</span> f_obj:</span><br><span class="line">        username = json.load(f_obj)</span><br><span class="line"><span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">    username = input(<span class="string">"what's your name?"</span>)</span><br><span class="line">    <span class="keyword">with</span> open(filename,<span class="string">'w'</span>) <span class="keyword">as</span> f_obj:</span><br><span class="line">        json.dump(username,f_obj)</span><br><span class="line">        print(<span class="string">"we'll remember you when you come back,"</span> + username + <span class="string">"!"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"Welcome back,"</span> + username + <span class="string">"!"</span>)</span><br></pre></td></tr></tbody></table></figure><h3 id="重构"><a href="#重构" class="headerlink" title="重构"></a>重构</h3><p>代码能正确运行，但可做进一步的改进————-将代码划分为一系列完成具体工作的函数。这样的过程叫做重构。重构让代码更清晰、更易于理解、更容易扩展。</p><p>假若重构上列代码，可将其大部分逻辑放到一个或多个函数中。比如:<strong>get_stored_username()用于获取存储了的用户名，get_new_username()用于存储新的用户名,greet_user()相当于主函数，在三个函数外部首先被调用，它进行判断，调用相应的函数，对不同的用户显示不同的信息。</strong>这样三个<strong>函数分工明确，代码结构也清晰明了。</strong></p><h1 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h1><p>在本章中，将学习如何用Python模块unittest中的工具来测试代码。将学习编写测试用例。</p><h2 id="测试函数"><a href="#测试函数" class="headerlink" title="测试函数"></a>测试函数</h2><p>测试代码为：(name_function.py)</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_formatted_name</span><span class="params">(first,last)</span>:</span></span><br><span class="line">  <span class="string">"""返回整洁的名字"""</span></span><br><span class="line">    full_name = first + <span class="string">''</span> + last</span><br><span class="line">    <span class="keyword">return</span> full_name.title()</span><br></pre></td></tr></tbody></table></figure><p>为测试上例代码，编写一个使用这个函数的程序，下例让用户输入名和姓。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> name_function <span class="keyword">import</span> get_formatted_name</span><br><span class="line"></span><br><span class="line">print(<span class="string">"Enter 'q' at any time to quit"</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    first = input(<span class="string">"\nPlease give me a first name:"</span>)</span><br><span class="line">    <span class="keyword">if</span> first == <span class="string">'q'</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    last = input(<span class="string">"\nPlease give me a last name:"</span>)</span><br><span class="line">    <span class="keyword">if</span> last == <span class="string">'q'</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    </span><br><span class="line">    format_name = get_formatted_name(first,last)</span><br><span class="line">    print(<span class="string">"\tNeatly formatted name:"</span> + format_name + <span class="string">'.'</span>)</span><br></pre></td></tr></tbody></table></figure><h3 id="单元测试和测试用例"><a href="#单元测试和测试用例" class="headerlink" title="单元测试和测试用例"></a>单元测试和测试用例</h3><p>Python标准库中的模块<strong>unittest</strong>提供了代码测试工具。<strong>单元测试</strong>用于核实函数的某个方面没有问题；<strong>测试用例</strong>是一组单元测试，这些单元测试一起核实函数在各种情形下的行为都符合要求。</p><p>创建测试用例的语法需要一段时间才能习惯，但测试用例创建后，再添加针对函数的单元测试就很简单了。</p><p>编写测试用例, 1.可先导入模块unittest以及要测试的函数。</p><p>​             2.再创建一个继承unittest.TestCase的类。并编写一系列方法对函数行为的不用方面进行测试。</p><p>下面是一个只包含一个方法的测试用例，它检查函数get_formatted_name()在给定名和姓时能否正常工作。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"><span class="keyword">from</span> name_function <span class="keyword">import</span> get_formatted_name</span><br><span class="line"><span class="string">"""1.导入模块unittest和要测试的函数get_formatted_name()"""</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NameTestCase</span><span class="params">(unittest.TestCase)</span>:</span></span><br><span class="line"><span class="string">"""2.创建测试类，集成自TestCase"""</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_first_last_name</span><span class="params">(self)</span>:</span></span><br><span class="line"><span class="string">"""3.测试name_function.py"""</span></span><br><span class="line">        <span class="string">"""能够正确地处理像Janis Joplin这样的姓名吗？"""</span></span><br><span class="line">        formatted_name = get_formatted_name(<span class="string">'janis'</span>,<span class="string">'joplin'</span>)</span><br><span class="line"><span class="string">"""4.一个断言方法"""</span></span><br><span class="line">        self.assertEqual(formatted_name,<span class="string">'Janis Joplin'</span>)</span><br><span class="line"></span><br><span class="line">  <span class="string">"""5.运行这个文件中的测试"""</span>        </span><br><span class="line">unittest.main()</span><br></pre></td></tr></tbody></table></figure><p><strong>我们运行测试用例时，所有以test_打头的方法都将自动运行。</strong></p><p><strong>这个断言方法用来核实得到的结果是否与期望的结果一致。</strong>asserEqual()意思是说，进行比较，如果它们相等，就万事大吉，如果不等，跟我说一声！</p><h2 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h2><h3 id="各种断言方法"><a href="#各种断言方法" class="headerlink" title="各种断言方法"></a>各种断言方法</h3><p>unittest <strong>Module中的断言方法</strong></p><div class="table-container"><table><thead><tr><th style="text-align:center">方法</th><th style="text-align:center">用途</th></tr></thead><tbody><tr><td style="text-align:center">assertEqual(a,b)</td><td style="text-align:center">核实 a==b</td></tr><tr><td style="text-align:center">assertNotEqual(a,b)</td><td style="text-align:center">核实 a!=b</td></tr><tr><td style="text-align:center">assertTrue(x)</td><td style="text-align:center">核实x为True</td></tr><tr><td style="text-align:center">assertFalse(x)</td><td style="text-align:center">核实x为False</td></tr><tr><td style="text-align:center">assertIn(item.list)</td><td style="text-align:center">核实item在list中</td></tr><tr><td style="text-align:center">assertNotIn(item.list)</td><td style="text-align:center">核实item不在list中</td></tr></tbody></table></div><h3 id="一个要测试的类"><a href="#一个要测试的类" class="headerlink" title="一个要测试的类"></a>一个要测试的类</h3><p>Survey.py</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AnonymousSurvey</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""收集匿名调查问卷的答案"""</span> </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,question)</span>:</span></span><br><span class="line">        <span class="string">"""存储一个问题，并未存储答案做准备"""</span></span><br><span class="line">        self.question = question</span><br><span class="line">        self.responses = []</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show_question</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""显示调查问卷"""</span></span><br><span class="line">        print(self.question)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">store_response</span><span class="params">(self,new_response)</span>:</span></span><br><span class="line">        <span class="string">"""存储单份调查问卷"""</span></span><br><span class="line">        self.responses.append(new_response)</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show_results</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""显示收集到的所有答案"""</span></span><br><span class="line">        print(<span class="string">"Survey results:"</span>)</span><br><span class="line">        <span class="keyword">for</span> response <span class="keyword">in</span> self.responses:</span><br><span class="line">            print(<span class="string">'-'</span> + response)</span><br></pre></td></tr></tbody></table></figure><p>再来编写一个使用它的程序：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> survey <span class="keyword">import</span> AnonymousSurvey</span><br><span class="line"></span><br><span class="line"><span class="comment">#定义一个问题，并创建一个表示调查的AnonymousSurvey对象</span></span><br><span class="line">question = <span class="string">'what language did you first learn to speak?'</span></span><br><span class="line">my_survey = AnonymousSurvey(question)</span><br><span class="line"></span><br><span class="line"><span class="comment">#显示问题并存储答案</span></span><br><span class="line">my_survey.show_question()</span><br><span class="line">print(<span class="string">"Enter 'q' at any time to quit.\n"</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    response = input(<span class="string">"language:"</span>)</span><br><span class="line">    <span class="keyword">if</span> response == <span class="string">'q'</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    my_survey.store_response(response)</span><br><span class="line">    </span><br><span class="line"><span class="comment">#显示调查结果</span></span><br><span class="line">print(<span class="string">"\nThank you to everyone who participated in the survey!"</span>)</span><br><span class="line">my_survey.show_results()</span><br></pre></td></tr></tbody></table></figure><h3 id="测试AnonymousSurvey"><a href="#测试AnonymousSurvey" class="headerlink" title="测试AnonymousSurvey"></a>测试AnonymousSurvey</h3><p>下面来编写一个测试，对AnonymousSurvey类的行为的一个方面进行验证：如果用户对面对调查问题时只提供了一个答案，这个答案也能被妥善的存储。为此，我们将在这个答案被存储后，使用方法assertIn()来核实它包含在答案列表中。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"><span class="keyword">from</span> survey <span class="keyword">import</span> AnonymousSurvey</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestAnonymousSurvey</span><span class="params">(unittest.TestCase)</span>:</span></span><br><span class="line"><span class="string">"""针对AnonymousSurvey类的测试"""</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_store_single_response</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""测试单个答案会被妥善的存储"""</span></span><br><span class="line">        question = <span class="string">"what language did you first learn to speak?"</span></span><br><span class="line">        my_survey = AnonymousSurvey(question)</span><br><span class="line">        my_survey.store_response(<span class="string">"English"</span>)</span><br><span class="line">        </span><br><span class="line">        self.assertIn(<span class="string">'English'</span>,my_survey.response)</span><br><span class="line"></span><br><span class="line">unittest.main()</span><br></pre></td></tr></tbody></table></figure><h2 id="方法setUp"><a href="#方法setUp" class="headerlink" title="方法setUp()"></a>方法setUp()</h2><p>unittest.TestCase类包含方法SetUp(),让我们只需创建这些对象一次，并在每个测试方法中使用它们。如果你在TestCase类中包含了方法setUp(),Python将先运行它，在运行各个以test_打头的方法。<strong>这样，你在编写的每个测试方法中都可以使用在方法setUp()中创建的对象了。</strong></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestAnonymousSurvey</span><span class="params">(unittest.TestCase)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setUp</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        创建一个调查对象和一组答案，供使用的测试方法使用</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        question = <span class="string">"What language did you first learn to speak?"</span></span><br><span class="line">        self.my_survey = AnonymousSurvey(question)</span><br><span class="line">        self.responses = [<span class="string">'English'</span>,<span class="string">'Spanish'</span>,<span class="string">'Mandarin'</span>]</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_store_single_response</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""测试单个答案会被妥善的存储"""</span></span><br><span class="line">        self.my_survey.store_response(self.response[<span class="number">0</span>])</span><br><span class="line">        self.assertIn(self.responses[<span class="number">0</span>],self.my_survey.responses)</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_store_three_response</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""测试三个答案会被妥善的存储"""</span></span><br><span class="line">        <span class="keyword">for</span> response <span class="keyword">in</span> self.responses:</span><br><span class="line">                self.my_survey.store_response(response)</span><br><span class="line">         </span><br><span class="line">        <span class="keyword">for</span> response <span class="keyword">in</span> self.responses:</span><br><span class="line">            self.assertIn(response,self.my_survey.responses)</span><br><span class="line"></span><br><span class="line">unittest.main()</span><br></pre></td></tr></tbody></table></figure><p>包含self，即存储在类的属性中。测试自己写的类时，在setUp()中创建一系列实例并设置它们的属性，在测试方法中直接使用这些实例。</p><p><strong>每完成一个单元测试，Python打印一个字符：测试通过打印一个句点；测试引发错误打印一个E；测试导致断言失败打印一个F。</strong></p><h1 id="参考书籍"><a href="#参考书籍" class="headerlink" title="参考书籍"></a>参考书籍</h1><ul><li>《Python编程：从入门到实践》</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Python的安装、IPython的使用&quot;&gt;&lt;a href=&quot;#Python的安装、IPython的使用&quot; class=&quot;headerlink&quot; title=&quot;Python的安装、IPython的使用&quot;&gt;&lt;/a&gt;Python的安装、IPython的使用&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;Python的安装参见&lt;a href=&quot;https://stringpiggy.hpd.io/mac-osx-python3-dual-install/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://stringpiggy.hpd.io/mac-osx-python3-dual-install/&lt;/a&gt; ，或者《Python编程：从入门到实战》一书中也有详细的记载。&lt;/li&gt;
&lt;li&gt;利用IPython可以代替传统python开发的文本编辑器，灵活的改变所写代码，快捷的生成结果代码。IPython Notebook目前已经成为用Python做教学、计算、科研的一个重要工具，很多示例都是用.ipynb文件。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;​        安装Ipython有两种方式，第一种是通过pip安装。第二种是安装Anaconda从而获得iPython （这个选择比较适合新手，推荐&lt;a href=&quot;http://jupyter.readthedocs.io/en/latest/install.html#new-to-python-and-jupyter&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;官网教程&lt;/a&gt;一键搞定），下面主要介绍使用pip命令来安装。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;iPython是由&lt;a href=&quot;http://ipython.org/ipython-doc/stable/install/install.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;很多模块&lt;/a&gt;组成的, 为了不漏装任何组件，我用了这个命令来安装所有组件：&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ sudo pip install ipython[all]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol&gt;
&lt;li&gt;安装成功后通过这命令来运行Notebook&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ ipython notebook&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;之后有可能会弹出这个错误(你如果选择了用Anaconda的方式来安装也会碰到这个错误)：&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ValueError, &lt;span class=&quot;string&quot;&gt;&#39;unknown locale: %s&#39;&lt;/span&gt; % localename&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在&lt;a href=&quot;http://stackoverflow.com/questions/19961239/pelican-3-3-pelican-quickstart-error-valueerror-unknown-locale-utf-8&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;StackOverflow上已经有人提出了解决方案&lt;/a&gt;，在命令行里找到.bash_profile 然后添加下面两行代码：&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;export LC_ALL=en_US.UTF&lt;span class=&quot;number&quot;&gt;-8&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;export LANG=en_US.UTF&lt;span class=&quot;number&quot;&gt;-8&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后别忘了重新载入.bash_profile让新添加的代码生效（注意两个点之间的空格）：&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ . .bash_profile&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;之后再运行命令”ipython notebook “就可以在浏览器里看到iPython Notebook的界面了。&lt;/p&gt;
&lt;p&gt;iPython Notebook的工作原理是在本地启动一个服务器，你通过localhost:8888/tree 这个地址就可以连接到这个服务器上与之通信。从而实现在浏览器里写代码，传给本地服务器执行，然后本地服务器传回结果并在网页上呈现这个循环。&lt;/p&gt;
&lt;p&gt;每次使用完Notebook，只关闭网页本身是不够的。&lt;strong&gt;需要在你启动Notebook的那个Terminal里输 Ctrl + c 然后确认，才能把服务器关闭。&lt;/strong&gt;官网具体链接为：&lt;a href=&quot;http://IPython.org/install.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://IPython.org/install.html&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Language" scheme="https://unknown.yuzhouwan.com/categories/Language/"/>
    
    
      <category term="Python" scheme="https://unknown.yuzhouwan.com/tags/Python/"/>
    
      <category term="iPython" scheme="https://unknown.yuzhouwan.com/tags/iPython/"/>
    
  </entry>
  
</feed>
